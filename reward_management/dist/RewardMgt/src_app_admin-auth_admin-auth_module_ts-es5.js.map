{"version":3,"sources":["webpack:///src/app/admin-auth/admin-auth-routing.module.ts","webpack:///src/app/admin-auth/admin-auth.module.ts","webpack:///src/app/admin-auth/components/admin-login/admin-login.component.html","webpack:///src/app/admin-auth/components/admin-login/admin-login.component.ts","webpack:///src/app/admin-auth/components/admin-recover/admin-recover.component.html","webpack:///src/app/admin-auth/components/admin-recover/admin-recover.component.ts","webpack:///src/app/admin-auth/components/admin-sign-up/admin-sign-up.component.html","webpack:///src/app/admin-auth/components/admin-sign-up/admin-sign-up.component.ts"],"names":["routes","path","component","AdminLoginComponent","AdminSignUpComponent","AdminRecoverComponent","redirectTo","pathMatch","AdminAuthRoutingModule","RouterModule","AdminAuthModule","CommonModule","SharedModule","ReactiveFormsModule","emailControl","_router","admin","storage","toaster","spinner","loginUserData","loginEmail","loginPassword","FormControl","Validators","showRecoveryBlock","navigateByUrl","show","onLogin","subscribe","data","message","setUserDetails","hide","success","navigate","error","markAllAsTouched","valid","forgotPassword","value","err","onSubmit","formBuilder","router","route","showPasswordForm","params","val","token","email","tempPassword","replace","passwordForm","controls","initForm","group","password","confirmPassword","validators","get","obj","newPassword","resetPassword","signUpForm","initSignUpForm","firstName","lastName","passWord","signUp","backToLogin"],"mappings":"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","file":"src_app_admin-auth_admin-auth_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AdminLoginComponent } from './components/admin-login/admin-login.component';\r\nimport { AdminRecoverComponent } from './components/admin-recover/admin-recover.component';\r\nimport { AdminSignUpComponent } from './components/admin-sign-up/admin-sign-up.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: AdminLoginComponent },\r\n  { path: 'signup', component: AdminSignUpComponent },\r\n  { path: 'recoverPassword/:token/:email/:date', component: AdminRecoverComponent },\r\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AdminAuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AdminAuthRoutingModule } from './admin-auth-routing.module';\r\nimport { AdminLoginComponent } from './components/admin-login/admin-login.component';\r\nimport { AdminSignUpComponent } from './components/admin-sign-up/admin-sign-up.component';\r\nimport { AdminRecoverComponent } from './components/admin-recover/admin-recover.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AdminLoginComponent,\r\n    AdminSignUpComponent,\r\n    AdminRecoverComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AdminAuthRoutingModule,\r\n    SharedModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class AdminAuthModule { }\r\n","<div class=\"container-fluid\">\r\n    <div class=\"row vh-100\">\r\n        <div class=\"col-lg-7 col-md-12 positive-relative\">\r\n            <div class=\"logo p-5\">\r\n                <img src=\"https://ca-studentdev.inhabitr.com/assets/img/inhabitr_logo/caLogoNew.png\" width=\"200\"\r\n                    height=\"100\" alt=\"alt_text\" style=\"max-width:100px;height:auto;\">\r\n            </div>\r\n\r\n            <div class=\"login-main\">\r\n                <img src=\"assets/images/rewards-image.png\" />\r\n                <h3 class=\"admin\">REWARDS SUPERADMIN</h3>\r\n                <p style=\"color: #858181;\">Manage your CA property managers.</p>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-lg-5 col-md-12 p-0 bg-theme\">\r\n            <div class=\"m-auto login-align\" id=\"bgTheme\">\r\n                <div>\r\n                    <h4 class=\"mt-5 text-center\" style=\"font-weight: 600;\">WELCOME BACK</h4>\r\n                    <p class=\"text-center\" style=\"font-weight:100 !important;color:black;\">Sign In to your Account</p>\r\n                </div>\r\n                <div class=\"login-form\">\r\n                    <form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"mb-1\">Email ID</label>\r\n                            <input required #username=\"ngModel\" type=\"text\" name=\"username\"\r\n                                [(ngModel)]=\"loginUserData.loginEmail\" class=\"form-control padding-input login_control\"\r\n                                placeholder=\"Enter your Email ID\">\r\n                            <span *ngIf=\"username.invalid && username.touched\" class=\"error\">Enter email Id</span>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"mb-1\">Password</label>\r\n                            <input type=\"password\" required #password=\"ngModel\"\r\n                                [(ngModel)]=\"loginUserData.loginPassword\" name=\"password\" ngModel\r\n                                class=\"form-control padding-input login_control\" placeholder=\"Enter your Password\">\r\n                            <span *ngIf=\"password.invalid && password.touched\" class=\"error\">Enter valid password</span>\r\n                        </div>\r\n                        <div class=\"form-group text-end\">\r\n                            <a class=\"mb-3 align-right forgot-password \" data-bs-toggle=\"modal\"\r\n                                data-bs-target=\"#forgotPassword\" (click)=\"showRecoveryBlock = true\">Forgot Password?</a>\r\n                        </div>\r\n                        <div class=\" text-center login-block\">\r\n                            <button type=\"submit\" class=\"btn btn-primary mb-4\">LOGIN</button><br />\r\n                            <!-- <button type=\"button\" class=\"btn btn-primary\" style=\"background-color:#1969AF\"\r\n                                (click)=\"singup()\">SIGNUP</button> -->\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"modal fade\" id=\"forgotPassword\" tabindex=\"-1\" aria-labelledby=\"forgotPasswordLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content p-3\">\r\n            <div class=\"modal-header border-0\">\r\n                <!-- <h5 class=\"modal-title\" id=\"forgotPasswordLabel\">Modal title</h5> -->\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n            </div>\r\n\r\n            <div class=\"modal-body text-center\">\r\n                <h3 class=\"border-bottom pb-2\">RECOVER PASSWORD</h3>\r\n                <div class=\"form-group\" *ngIf=\"showRecoveryBlock\">\r\n                    <p>Please provide your email</p>\r\n                    <input type=\"text\" class=\"pass_recovery\" [formControl]=\"emailControl\">\r\n                    <div *ngIf=\"emailControl.touched && emailControl?.errors?.required\">\r\n                        Please enter recovery email\r\n                    </div>\r\n                    <div *ngIf=\"emailControl.touched && emailControl?.errors?.email\">\r\n                        Please enter valid email\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"!showRecoveryBlock\">\r\n                    <p>An email has been sent. Please click\r\n                        the link when you receive it.</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer justify-content-center border-0\">\r\n                <button type=\"button\" class=\"btn  btn_theme\" (click)=\"submitRecovery() \" *ngIf=\"showRecoveryBlock\">Email\r\n                    me a recovery\r\n                    link</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"emailControl.reset()\" data-bs-dismiss=\"modal\"\r\n                    *ngIf=\"!showRecoveryBlock\">Close\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AdminService } from 'src/app/services/admin.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-login',\r\n  templateUrl: './admin-login.component.html',\r\n  styleUrls: ['./admin-login.component.css']\r\n})\r\nexport class AdminLoginComponent implements OnInit {\r\n\r\n  loginUserData = { loginEmail: '', loginPassword: '' }\r\n  emailControl = new FormControl('', [Validators.required, Validators.email]);\r\n  showRecoveryBlock = true;\r\n\r\n  constructor(private _router: Router, private admin: AdminService, private storage: StorageService,\r\n    private toaster: ToastrService, private spinner: NgxSpinnerService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  singup() {\r\n    this._router.navigateByUrl('/superadmin/signup');\r\n  }\r\n  onSubmit() {\r\n    if (this.loginUserData.loginEmail != '' || this.loginUserData.loginPassword != '') {\r\n      this.spinner.show();\r\n      this.admin.onLogin(this.loginUserData.loginEmail, this.loginUserData.loginPassword).subscribe((data: any) => {\r\n        if (!data?.message) {\r\n          this.storage.setUserDetails(data);\r\n          this.spinner.hide();\r\n          this.toaster.success('Login Successful')\r\n          this._router.navigate(['/superadmin/dashboard'])\r\n        }\r\n        else {\r\n          this.spinner.hide();\r\n          this.toaster.error(data?.message)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  submitRecovery() {\r\n    this.emailControl.markAllAsTouched();\r\n    if (this.emailControl.valid) {\r\n      this.spinner.show();\r\n      this.admin.forgotPassword(this.emailControl.value).subscribe((data: any) => {\r\n        this.spinner.hide();\r\n        if (!data.message) {\r\n          this.showRecoveryBlock = !this.showRecoveryBlock;\r\n        }\r\n        else {\r\n          this.toaster.error(\"User is not available,Please sign up\")\r\n        }\r\n      }, err => {\r\n        this.spinner.hide();\r\n        this.toaster.error(\"Network Error\")\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"logo\">\r\n        <img src=\"https://ca-studentdev.inhabitr.com/assets/img/inhabitr_logo/caLogoNew.png\" width=\"200\" height=\"100\"\r\n            alt=\"alt_text\" border=\"0\" align=\"center\"\r\n            style=\"width:100%;max-width:100px;height:auto;background:#ffffff;font-size:15px;line-height:20px;color:#555555;margin:auto;padding: 18px 0px 0px 0px;\">\r\n    </div>\r\n\r\n    <div class=\"card mt-4\">\r\n        <div class=\"card-body p-4\" *ngIf = \"showPasswordForm\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <div>\r\n                        <h4 class=\"mt-5 text-center\" style=\"font-weight: 600;\">CHANGE PASSWORD</h4>\r\n                        <section>\r\n                            <h5 class=\"mt-5 text-center\" style=\"font-weight: 500;\">In order to protect your account,\r\n                                make sure your password:\r\n                            </h5>\r\n                            <p>∙ Is longer than 5 characters</p>\r\n                            <p>∙ Does not match or significantly contain your username</p>\r\n                            <!-- <p>∙ Use letters, numbers and special characters</p> -->\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <form [formGroup]=\"passwordForm\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-6 col-md-12 col-sm-12\">\r\n                        <div class=\"form-group  mt-4\">\r\n                            <label>NEW PASSWORD</label>\r\n                            <input type=\"password\" class=\"form-control mt-4\" formControlName=\"password\" placeholder=\"Enter a password\">\r\n                            <div class=\"err-msg mt-2\" *ngIf=\"signUpControls['password']?.touched && signUpControls['password']?.errors?.required\">\r\n                                Password is required.\r\n                            </div>\r\n                            <div class=\"err-msg mt-2\" *ngIf=\"signUpControls['password']?.touched && signUpControls['password']?.errors?.minlength\">\r\n                                Minimum 6 characters are required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6 col-md-12 col-sm-12\">\r\n                        <div class=\"form-group  mt-4\">\r\n                            <label>RE-ENTER PASSWORD</label>\r\n                            <input type=\"password\" class=\"form-control mt-4\" formControlName=\"confirmPassword\" placeholder=\"Enter a password\">\r\n                            <div class=\"err-msg mt-2\" *ngIf=\"signUpControls['confirmPassword']?.touched && signUpControls['confirmPassword']?.errors?.required && !passwordForm?.errors?.mismatch\">\r\n                                Confirm Password is required.\r\n                            </div>\r\n                            <div class=\"err-msg mt-2\" *ngIf=\"signUpControls['confirmPassword']?.touched && passwordForm?.errors?.mismatch\">\r\n                                Confirm Password does not match with Password.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-5 text-center\">\r\n                        <button class=\"btn btn-primary\" (click)=\"submitPasswordChange()\">CHANGE PASSWORD</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"card-body p-4 text-center d-flex align-items-center justify-content-center\" *ngIf = \"!showPasswordForm\" style=\"min-height: 400px;\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <section>\r\n                        <h5>Your password has been reset successfully!</h5>\r\n                    </section>\r\n                </div>\r\n                <div class=\"mt-5 text-center\">\r\n                    <button class=\"btn btn-primary\" (click)=\"login()\">LOGIN</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AdminService } from 'src/app/services/admin.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-recover',\r\n  templateUrl: './admin-recover.component.html',\r\n  styleUrls: ['./admin-recover.component.css']\r\n})\r\nexport class AdminRecoverComponent implements OnInit {\r\n\r\n  passwordForm: FormGroup;\r\n  showPasswordForm = true;\r\n  tempPassword: any;\r\n  email: any;\r\n\r\n  get signUpControls() {\r\n    return this.passwordForm.controls\r\n  }\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private spinner: NgxSpinnerService\r\n    , private route: ActivatedRoute, private admin: AdminService, private toaster: ToastrService) {\r\n    this.route.params.subscribe(val => {\r\n      if (val && val?.token && val?.email) {\r\n        this.tempPassword = val?.token.replace(':', '');\r\n        this.email = val?.email;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  initForm() {\r\n    this.passwordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', Validators.required]\r\n    }, { validators: this.confirmPassword })\r\n  }\r\n\r\n\r\n  confirmPassword(group: AbstractControl): { [key: string]: any } | null {\r\n    const password = group.get('password')?.value;\r\n    const confirmPassword = group.get('confirmPassword')?.value;\r\n    if ((password == confirmPassword)) {\r\n      return null;\r\n    }\r\n    else {\r\n      return { 'mismatch': true }\r\n    }\r\n  }\r\n\r\n  submitPasswordChange() {\r\n    this.passwordForm.markAllAsTouched();\r\n    if (this.passwordForm.valid) {\r\n      const obj = {\r\n        email: this.email, newPassword: this.passwordForm.get('password')?.value, tempPassword:\r\n          this.tempPassword\r\n      }\r\n      this.spinner.show();\r\n      this.admin.resetPassword(obj).subscribe((data) => {\r\n        this.spinner.hide();\r\n        this.toaster.success(\"Password reset Sucessfull\");\r\n        this.showPasswordForm = !this.showPasswordForm\r\n      }, err => {\r\n        this.spinner.hide();\r\n        this.toaster.error(\"Network error\")\r\n      })\r\n    }\r\n  }\r\n\r\n  login() {\r\n    this.router.navigate(['/superadmin'])\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"logo\">\r\n        <img src=\"https://ca-studentdev.inhabitr.com/assets/img/inhabitr_logo/caLogoNew.png\" (click)=\"backToLogin()\"\r\n            width=\"200\" height=\"100\" alt=\"alt_text\" border=\"0\" align=\"center\"\r\n            style=\"width:100%;max-width:100px;height:auto;background:#ffffff;font-size:15px;line-height:20px;color:#555555;margin:auto;padding: 18px 0px 0px 0px;\">\r\n    </div>\r\n    <div class=\"card mb-1\">\r\n        <div class=\"card-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <div>\r\n                        <h3 class=\"text-center\">WELCOME TO THE CA PORTAL</h3>\r\n                        <h5 class=\"text-center\">Let’s get your home essentials reward authorization started.</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <form [formGroup]=\"signUpForm\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>FIRST NAME</label>\r\n                            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                                placeholder=\"Enter first name\">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['firstName']?.touched && signUpControls['firstName']?.errors?.required\">\r\n                                First Name is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>LAST NAME</label>\r\n                            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                                placeholder=\"Enter last name\">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['lastName']?.touched&& signUpControls['lastName']?.errors?.required\">\r\n                                Last Name is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>EMAIL</label>\r\n                            <input type=\"text\" formControlName=\"loginEmail\" class=\"form-control\"\r\n                                placeholder=\"Enter your email \">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['loginEmail']?.touched && signUpControls['loginEmail']?.errors?.required\">\r\n                                Email is required.\r\n                            </div>\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['loginEmail']?.touched && signUpControls['loginEmail']?.errors?.email\">\r\n                                Enter Valid Email.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>PASSWORD</label>\r\n                            <input type=\"password\" formControlName=\"passWord\" class=\"form-control\"\r\n                                placeholder=\"Password\">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['passWord']?.touched && signUpControls['passWord']?.errors?.required\">\r\n                                Password is required.\r\n                            </div>\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['passWord']?.touched && signUpControls['passWord']?.errors?.minlength\">\r\n                                Password must be at least 6 characters long.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <!-- <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>ADDRESS</label>\r\n                            <input type=\"text\" formControlName=\"address\" class=\"form-control\"\r\n                                placeholder=\"Enter your address \">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['address']?.touched && signUpControls['address']?.errors?.required\">\r\n                                Address is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>STATE</label>\r\n                            <input type=\"text\" formControlName=\"state\" class=\"form-control\"\r\n                                placeholder=\"Enter your state\">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['state']?.touched && signUpControls['state']?.errors?.required\">\r\n                                State is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>CITY</label>\r\n                            <input type=\"text\" formControlName=\"city\" class=\"form-control\"\r\n                                placeholder=\"Enter your city \">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['city']?.touched && signUpControls['city']?.errors?.required\">\r\n                                City is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>ZIPCODE</label>\r\n                            <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"\r\n                                placeholder=\"Enter your zipcode\">\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['zipcode']?.touched && signUpControls['zipcode']?.errors?.required\">\r\n                                ZipCode is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div> -->\r\n                <!-- <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>BUILDING NAME</label>\r\n                            <select placeholder=\"Select a Property\" formControlName=\"buildingName\">\r\n                                <option [value]=\"null\">Select a Property</option>\r\n                            </select>\r\n                            <div class=\"err-msg mt-2\"\r\n                                *ngIf=\"signUpControls['buildingName']?.touched && signUpControls['buildingName']?.errors?.required\">\r\n                                Building Name is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div> -->\r\n            </form>\r\n            <div class=\"submit text-center\">\r\n                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!signUpForm.valid\"\r\n                    (click)=\"signUp()\">SUBMIT</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card back-login border-0\">\r\n        <div class=\"\">\r\n            <span style=\"padding-right: 5px;color: black;text-decoration: none;\">Back to</span><a\r\n                [routerLink]=\"['/superadmin/login']\"><span class=\"ml-2\">Login</span></a>\r\n\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AdminService } from 'src/app/services/admin.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-sign-up',\r\n  templateUrl: './admin-sign-up.component.html',\r\n  styleUrls: ['./admin-sign-up.component.css']\r\n})\r\nexport class AdminSignUpComponent implements OnInit {\r\n\r\n  signUpForm: FormGroup;\r\n  buildingList: any;\r\n\r\n  get signUpControls() {\r\n    return this.signUpForm.controls\r\n  }\r\n\r\n  constructor(private formBuilder: FormBuilder, private _router: Router ,private admin:AdminService\r\n    , private storage:StorageService , private toaster :ToastrService , private spinner:NgxSpinnerService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initSignUpForm();\r\n  }\r\n\r\n  backToLogin() {\r\n    this._router.navigate(['/superadmin/login'])\r\n  }\r\n\r\n  initSignUpForm() {\r\n    this.signUpForm = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      // buildingName: [null, Validators.required],\r\n      passWord: ['', [Validators.required, Validators.minLength(6)]],\r\n      loginEmail: ['', [Validators.required, Validators.email]],\r\n      // address: ['', Validators.required],\r\n      // state: ['', Validators.required],\r\n      // city: ['', Validators.required],\r\n      // country: ['US', Validators.required],\r\n      // zipcode: ['', Validators.required],\r\n    })\r\n  }\r\n\r\n  signUp() {\r\n    if (this.signUpForm.valid) {\r\n      const obj = { ...this.signUpForm.value }\r\n      this.spinner.show();\r\n      this.admin.signUp(obj).subscribe((data:any) => {\r\n        if (!data.message) {\r\n          // this.storage.setUserDetails(data);\r\n          this.spinner.hide();\r\n          this.toaster.success('SignUp Successful')\r\n          this._router.navigate(['/superadmin/login'])\r\n        }\r\n        else {\r\n          this.spinner.hide();\r\n          this.toaster.error(data?.message)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n"]}