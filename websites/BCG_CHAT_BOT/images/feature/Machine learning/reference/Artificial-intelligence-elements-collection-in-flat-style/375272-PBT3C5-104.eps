%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Artificial Intelligence Element Collection-4 up-02.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 13/07/18
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font OpenSans-CondensedLight
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: OpenSans-CondensedLight
%%DocumentNeededFonts: OpenSans-CondensedLight
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Artificial Intelligence Element Collection-4 up-02</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-13T20:10:54+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-13T20:10:54+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-13T20:10:54+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAkACQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAkAAAAAEA&#xA;AQCQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqg9V1OPTrZJ5FLh5Y4+I8HajN/sVq30ZKMbac+YY42e8D8e7mkyecJWjjkFiOElAp9ViS&#xA;xDHYCMkj4aGnfoDk/D83CHaBIB4efn+xVufNZt7WS5a0rFFKbcgSHkZfTMgCjhQqRQVr17YBjZz1&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:9632a08d-64d0-437e-b788-2df38f438bf6</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:9632a08d-64d0-437e-b788-2df38f438bf6</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b0cf7a18-a79b-8545-98e0-55f0cde07c1e</stRef:instanceID>
            <stRef:documentID>xmp.did:6ccc8fb4-72d6-46bb-a7da-704f66eb9faf</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9632a08d-64d0-437e-b788-2df38f438bf6</stEvt:instanceID>
                  <stEvt:when>2018-07-13T20:10:54+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>OpenSans-CondensedLight</stFnt:fontName>
                  <stFnt:fontFamily>Open Sans</stFnt:fontFamily>
                  <stFnt:fontFace>Condensed Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.10</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>OpenSans-CondLight.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=103 G=168 B=146 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>103</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 8</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=22 G=216 B=216</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>22</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>216</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=191 B=180 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>62</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>180</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=58 G=77 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>58</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 4</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=191 B=180</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>62</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>180</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.67126 0 .361639 0 cmyk
%%IncludeResource: font OpenSans-CondensedLight
/CHIVEP+OpenSans-CondensedLight /OpenSans-CondensedLight findfont ct_VMDictPut/CHIVEP+OpenSans-CondensedLight*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /.notdef /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /.notdef /T 171{/.notdef}rp]CHIVEP+OpenSans-CondensedLight nfCHIVEP+OpenSans-CondensedLight*1 [12.6961 0 0 -12.6961 0 0 ]msf151.079 32.2656 mo(ARTIF)sh173.03 32.2656 mo(ICIAL INTE)sh214.02 32.2656 mo(LLIGE)sh236.976 32.2656 mo(NCE)sh253.95 32.2656 mo( ELEMENT COLLECTION)[2.38672 4.88477 4.40771 4.88525 8.64795 4.88525 6.75732 4.40771 2.38672 5.33154 6.60205 4.40771 4.40771 4.88477 5.33154 4.40771 2.59131 6.60205 0 ]xsh145.069 289.044 mo
71.8616 289.044 li
71.8616 215.837 li
145.069 215.837 li
145.069 289.044 li
cp
.623468 0 .234043 0 cmyk
f
135.308 284.164 mo
81.6226 284.164 li
78.9272 284.164 76.7421 281.978 76.7421 279.283 cv
76.7421 225.598 li
76.7421 222.902 78.9272 220.717 81.6226 220.717 cv
135.308 220.717 li
138.004 220.717 140.189 222.902 140.189 225.598 cv
140.189 279.283 li
140.189 281.978 138.004 284.164 135.308 284.164 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
79.1824 203.635 mo
79.1824 203.635 li
77.8347 203.635 76.7421 204.728 76.7421 206.076 cv
76.7421 215.837 li
81.6226 215.837 li
81.6226 206.076 li
81.6226 204.728 80.5301 203.635 79.1824 203.635 cv
cp
f
88.9434 203.635 mo
88.9434 203.635 li
87.5957 203.635 86.5031 204.728 86.5031 206.076 cv
86.5031 215.837 li
91.3836 215.837 li
91.3836 206.076 li
91.3836 204.728 90.2911 203.635 88.9434 203.635 cv
cp
f
98.7044 203.635 mo
98.7044 203.635 li
97.3567 203.635 96.2641 204.728 96.2641 206.076 cv
96.2641 215.837 li
101.145 215.837 li
101.145 206.076 li
101.145 204.728 100.052 203.635 98.7044 203.635 cv
cp
f
108.465 203.635 mo
108.465 203.635 li
107.118 203.635 106.025 204.728 106.025 206.076 cv
106.025 215.837 li
110.906 215.837 li
110.906 206.076 li
110.906 204.728 109.813 203.635 108.465 203.635 cv
cp
f
118.226 203.635 mo
118.226 203.635 li
116.879 203.635 115.786 204.728 115.786 206.076 cv
115.786 215.837 li
120.667 215.837 li
120.667 206.076 li
120.667 204.728 119.574 203.635 118.226 203.635 cv
cp
f
127.987 203.635 mo
127.987 203.635 li
126.64 203.635 125.547 204.728 125.547 206.076 cv
125.547 215.837 li
130.428 215.837 li
130.428 206.076 li
130.428 204.728 129.335 203.635 127.987 203.635 cv
cp
f
137.748 203.635 mo
137.748 203.635 li
136.401 203.635 135.308 204.728 135.308 206.076 cv
135.308 215.837 li
140.189 215.837 li
140.189 206.076 li
140.189 204.728 139.096 203.635 137.748 203.635 cv
cp
f
79.1824 301.245 mo
79.1824 301.245 li
77.8347 301.245 76.7421 300.153 76.7421 298.805 cv
76.7421 289.044 li
81.6226 289.044 li
81.6226 298.805 li
81.6226 300.153 80.5301 301.245 79.1824 301.245 cv
cp
f
88.9434 301.245 mo
88.9434 301.245 li
87.5957 301.245 86.5031 300.153 86.5031 298.805 cv
86.5031 289.044 li
91.3836 289.044 li
91.3836 298.805 li
91.3836 300.153 90.2911 301.245 88.9434 301.245 cv
cp
f
98.7044 301.245 mo
98.7044 301.245 li
97.3567 301.245 96.2641 300.153 96.2641 298.805 cv
96.2641 289.044 li
101.145 289.044 li
101.145 298.805 li
101.145 300.153 100.052 301.245 98.7044 301.245 cv
cp
f
108.465 301.245 mo
108.465 301.245 li
107.118 301.245 106.025 300.153 106.025 298.805 cv
106.025 289.044 li
110.906 289.044 li
110.906 298.805 li
110.906 300.153 109.813 301.245 108.465 301.245 cv
cp
f
118.226 301.245 mo
118.226 301.245 li
116.879 301.245 115.786 300.153 115.786 298.805 cv
115.786 289.044 li
120.667 289.044 li
120.667 298.805 li
120.667 300.153 119.574 301.245 118.226 301.245 cv
cp
f
127.987 301.245 mo
127.987 301.245 li
126.64 301.245 125.547 300.153 125.547 298.805 cv
125.547 289.044 li
130.428 289.044 li
130.428 298.805 li
130.428 300.153 129.335 301.245 127.987 301.245 cv
cp
f
137.748 301.245 mo
137.748 301.245 li
136.401 301.245 135.308 300.153 135.308 298.805 cv
135.308 289.044 li
140.189 289.044 li
140.189 298.805 li
140.189 300.153 139.096 301.245 137.748 301.245 cv
cp
f
154.83 225.598 mo
145.069 225.598 li
145.069 220.717 li
154.83 220.717 li
156.178 220.717 157.27 221.809 157.27 223.157 cv
157.27 223.157 li
157.27 224.505 156.178 225.598 154.83 225.598 cv
cp
f
154.83 235.359 mo
145.069 235.359 li
145.069 230.478 li
154.83 230.478 li
156.178 230.478 157.27 231.57 157.27 232.918 cv
157.27 232.918 li
157.27 234.266 156.178 235.359 154.83 235.359 cv
cp
f
154.83 245.12 mo
145.069 245.12 li
145.069 240.239 li
154.83 240.239 li
156.178 240.239 157.27 241.331 157.27 242.679 cv
157.27 242.679 li
157.27 244.027 156.178 245.12 154.83 245.12 cv
cp
f
154.83 254.88 mo
145.069 254.88 li
145.069 250 li
154.83 250 li
156.178 250 157.27 251.092 157.27 252.44 cv
157.27 252.44 li
157.27 253.788 156.178 254.88 154.83 254.88 cv
cp
f
154.83 264.641 mo
145.069 264.641 li
145.069 259.761 li
154.83 259.761 li
156.178 259.761 157.27 260.853 157.27 262.201 cv
157.27 262.201 li
157.27 263.549 156.178 264.641 154.83 264.641 cv
cp
f
154.83 274.402 mo
145.069 274.402 li
145.069 269.522 li
154.83 269.522 li
156.178 269.522 157.27 270.615 157.27 271.962 cv
157.27 271.962 li
157.27 273.31 156.178 274.402 154.83 274.402 cv
cp
f
154.83 284.164 mo
145.069 284.164 li
145.069 279.283 li
154.83 279.283 li
156.178 279.283 157.27 280.375 157.27 281.723 cv
157.27 281.723 li
157.27 283.071 156.178 284.164 154.83 284.164 cv
cp
f
62.1006 225.598 mo
71.8616 225.598 li
71.8616 220.717 li
62.1006 220.717 li
60.7529 220.717 59.6604 221.809 59.6604 223.157 cv
59.6604 223.157 li
59.6604 224.505 60.7529 225.598 62.1006 225.598 cv
cp
f
62.1006 235.359 mo
71.8616 235.359 li
71.8616 230.478 li
62.1006 230.478 li
60.7529 230.478 59.6604 231.57 59.6604 232.918 cv
59.6604 232.918 li
59.6604 234.266 60.7529 235.359 62.1006 235.359 cv
cp
f
62.1006 245.12 mo
71.8616 245.12 li
71.8616 240.239 li
62.1006 240.239 li
60.7529 240.239 59.6604 241.331 59.6604 242.679 cv
59.6604 242.679 li
59.6604 244.027 60.7529 245.12 62.1006 245.12 cv
cp
f
62.1006 254.88 mo
71.8616 254.88 li
71.8616 250 li
62.1006 250 li
60.7529 250 59.6604 251.092 59.6604 252.44 cv
59.6604 252.44 li
59.6604 253.788 60.7529 254.88 62.1006 254.88 cv
cp
f
62.1006 264.641 mo
71.8616 264.641 li
71.8616 259.761 li
62.1006 259.761 li
60.7529 259.761 59.6604 260.853 59.6604 262.201 cv
59.6604 262.201 li
59.6604 263.549 60.7529 264.641 62.1006 264.641 cv
cp
f
62.1006 274.402 mo
71.8616 274.402 li
71.8616 269.522 li
62.1006 269.522 li
60.7529 269.522 59.6604 270.615 59.6604 271.962 cv
59.6604 271.962 li
59.6604 273.31 60.7529 274.402 62.1006 274.402 cv
cp
f
62.1006 284.164 mo
71.8616 284.164 li
71.8616 279.283 li
62.1006 279.283 li
60.7529 279.283 59.6604 280.375 59.6604 281.723 cv
59.6604 281.723 li
59.6604 283.071 60.7529 284.164 62.1006 284.164 cv
cp
f
109.685 267.082 mo
107.245 267.082 li
107.245 237.799 li
109.685 237.799 li
109.685 267.082 li
cp
0 0 0 0 cmyk
f
129.207 267.082 mo
126.767 267.082 li
126.767 237.799 li
129.207 237.799 li
129.207 267.082 li
cp
f
108.465 229.258 mo
106.447 229.258 104.805 230.9 104.805 232.918 cv
104.805 234.937 106.447 236.579 108.465 236.579 cv
110.484 236.579 112.126 234.937 112.126 232.918 cv
112.126 230.9 110.484 229.258 108.465 229.258 cv
cp
108.465 239.019 mo
105.102 239.019 102.365 236.282 102.365 232.918 cv
102.365 229.555 105.102 226.818 108.465 226.818 cv
111.829 226.818 114.566 229.555 114.566 232.918 cv
114.566 236.282 111.829 239.019 108.465 239.019 cv
cp
f
108.465 268.302 mo
106.447 268.302 104.805 269.944 104.805 271.962 cv
104.805 273.981 106.447 275.623 108.465 275.623 cv
110.484 275.623 112.126 273.981 112.126 271.962 cv
112.126 269.944 110.484 268.302 108.465 268.302 cv
cp
108.465 278.063 mo
105.102 278.063 102.365 275.326 102.365 271.962 cv
102.365 268.599 105.102 265.862 108.465 265.862 cv
111.829 265.862 114.566 268.599 114.566 271.962 cv
114.566 275.326 111.829 278.063 108.465 278.063 cv
cp
f
127.987 229.258 mo
125.969 229.258 124.327 230.9 124.327 232.918 cv
124.327 234.937 125.969 236.579 127.987 236.579 cv
130.006 236.579 131.648 234.937 131.648 232.918 cv
131.648 230.9 130.006 229.258 127.987 229.258 cv
cp
127.987 239.019 mo
124.624 239.019 121.887 236.282 121.887 232.918 cv
121.887 229.555 124.624 226.818 127.987 226.818 cv
131.351 226.818 134.088 229.555 134.088 232.918 cv
134.088 236.282 131.351 239.019 127.987 239.019 cv
cp
f
127.987 268.302 mo
125.969 268.302 124.327 269.944 124.327 271.962 cv
124.327 273.981 125.969 275.623 127.987 275.623 cv
130.006 275.623 131.648 273.981 131.648 271.962 cv
131.648 269.944 130.006 268.302 127.987 268.302 cv
cp
127.987 278.063 mo
124.624 278.063 121.887 275.326 121.887 271.962 cv
121.887 268.599 124.624 265.862 127.987 265.862 cv
131.351 265.862 134.088 268.599 134.088 271.962 cv
134.088 275.326 131.351 278.063 127.987 278.063 cv
cp
f
90.1635 267.082 mo
87.7233 267.082 li
87.7233 237.799 li
90.1635 237.799 li
90.1635 267.082 li
cp
f
88.9434 229.258 mo
86.9249 229.258 85.283 230.9 85.283 232.918 cv
85.283 234.937 86.9249 236.579 88.9434 236.579 cv
90.9618 236.579 92.6038 234.937 92.6038 232.918 cv
92.6038 230.9 90.9618 229.258 88.9434 229.258 cv
cp
88.9434 239.019 mo
85.5797 239.019 82.8428 236.282 82.8428 232.918 cv
82.8428 229.555 85.5797 226.818 88.9434 226.818 cv
92.3071 226.818 95.044 229.555 95.044 232.918 cv
95.044 236.282 92.3071 239.019 88.9434 239.019 cv
cp
f
88.9434 268.302 mo
86.9249 268.302 85.283 269.944 85.283 271.962 cv
85.283 273.981 86.9249 275.623 88.9434 275.623 cv
90.9618 275.623 92.6038 273.981 92.6038 271.962 cv
92.6038 269.944 90.9618 268.302 88.9434 268.302 cv
cp
88.9434 278.063 mo
85.5797 278.063 82.8428 275.326 82.8428 271.962 cv
82.8428 268.599 85.5797 265.862 88.9434 265.862 cv
92.3071 265.862 95.044 268.599 95.044 271.962 cv
95.044 275.326 92.3071 278.063 88.9434 278.063 cv
cp
f
147.509 159.711 mo
69.4214 159.711 li
64.0305 159.711 59.6604 155.34 59.6604 149.95 cv
59.6604 71.8616 li
59.6604 66.4708 64.0305 62.1006 69.4214 62.1006 cv
147.509 62.1006 li
152.9 62.1006 157.27 66.4708 157.27 71.8616 cv
157.27 149.95 li
157.27 155.34 152.9 159.711 147.509 159.711 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
147.509 110.906 mo
147.509 132.469 130.029 149.95 108.465 149.95 cv
86.902 149.95 69.4214 132.469 69.4214 110.906 cv
69.4214 89.3422 86.902 71.8616 108.465 71.8616 cv
130.029 71.8616 147.509 89.3422 147.509 110.906 cv
cp
.67126 0 .361639 0 cmyk
f
122.202 101.145 mo
121.571 101.145 120.941 100.901 120.463 100.415 cv
118.935 98.8617 117.159 97.6368 115.185 96.7753 cv
113.95 96.2362 113.386 94.798 113.925 93.5624 cv
114.464 92.3279 115.904 91.7631 117.137 92.3023 cv
119.686 93.4146 121.975 94.9928 123.942 96.9934 cv
124.887 97.9543 124.874 99.4992 123.914 100.445 cv
123.438 100.912 122.82 101.145 122.202 101.145 cv
cp
0 0 0 0 cmyk
f
94.997 100.875 mo
94.3654 100.875 93.7339 100.632 93.2561 100.145 cv
92.3118 99.184 92.3256 97.6386 93.2871 96.6943 cv
95.1769 94.8379 97.3663 93.3598 99.7947 92.3017 cv
101.028 91.7637 102.468 92.3291 103.006 93.5641 cv
103.545 94.7998 102.98 96.2373 101.744 96.7759 cv
99.865 97.5951 98.17 98.739 96.7068 100.176 cv
96.232 100.642 95.6142 100.875 94.997 100.875 cv
cp
f
108.465 133.853 mo
96.5108 133.853 86.7849 124.128 86.7849 112.173 cv
86.7849 106.3 89.0947 100.801 93.2889 96.6901 cv
94.2505 95.7476 95.7959 95.7613 96.7396 96.7247 cv
97.6833 97.6868 97.6678 99.2317 96.705 100.175 cv
93.4551 103.361 91.6654 107.622 91.6654 112.173 cv
91.6654 121.436 99.2019 128.973 108.465 128.973 cv
117.729 128.973 125.266 121.436 125.266 112.173 cv
125.266 107.749 123.561 103.572 120.463 100.412 cv
119.52 99.4503 119.536 97.9055 120.497 96.9618 cv
121.46 96.0181 123.003 96.033 123.949 96.9963 cv
127.946 101.073 130.146 106.463 130.146 112.173 cv
130.146 124.128 120.42 133.853 108.465 133.853 cv
cp
f
108.465 103.069 mo
107.118 103.069 106.025 101.976 106.025 100.629 cv
106.025 85.236 li
106.025 83.8883 107.118 82.7957 108.465 82.7957 cv
109.813 82.7957 110.906 83.8883 110.906 85.236 cv
110.906 100.629 li
110.906 101.976 109.813 103.069 108.465 103.069 cv
cp
f
149.95 71.8616 mo
149.95 73.2093 148.857 74.3019 147.509 74.3019 cv
146.162 74.3019 145.069 73.2093 145.069 71.8616 cv
145.069 70.5139 146.162 69.4214 147.509 69.4214 cv
148.857 69.4214 149.95 70.5139 149.95 71.8616 cv
cp
f
149.95 149.95 mo
149.95 151.297 148.857 152.39 147.509 152.39 cv
146.162 152.39 145.069 151.297 145.069 149.95 cv
145.069 148.602 146.162 147.509 147.509 147.509 cv
148.857 147.509 149.95 148.602 149.95 149.95 cv
cp
f
71.8616 71.8616 mo
71.8616 73.2093 70.7691 74.3019 69.4214 74.3019 cv
68.0737 74.3019 66.9811 73.2093 66.9811 71.8616 cv
66.9811 70.5139 68.0737 69.4214 69.4214 69.4214 cv
70.7691 69.4214 71.8616 70.5139 71.8616 71.8616 cv
cp
f
71.8616 149.95 mo
71.8616 151.297 70.7691 152.39 69.4214 152.39 cv
68.0737 152.39 66.9811 151.297 66.9811 149.95 cv
66.9811 148.602 68.0737 147.509 69.4214 147.509 cv
70.7691 147.509 71.8616 148.602 71.8616 149.95 cv
cp
f
258.541 154.83 mo
256.101 154.83 li
256.101 138.969 li
278.063 138.969 li
278.063 82.8428 li
268.476 82.8428 li
268.476 94.1557 li
233.964 128.666 li
233.964 130.924 233.964 139.984 233.966 140.179 cv
232.745 140.186 li
232.745 141.409 li
219.497 141.409 li
219.497 80.4025 li
241.459 80.4025 li
241.459 66.9811 li
243.899 66.9811 li
243.899 82.8428 li
221.937 82.8428 li
221.937 138.969 li
231.559 138.969 li
231.524 137.903 231.524 136.373 231.524 134.175 cv
231.524 127.656 li
266.036 93.1453 li
266.036 80.4025 li
280.503 80.4025 li
280.503 141.409 li
258.541 141.409 li
258.541 154.83 li
cp
.779202 .591241 .502647 .329534 cmyk
f
224.168 107.455 mo
222.262 105.549 219.172 105.549 217.266 107.455 cv
215.36 109.361 215.36 112.451 217.266 114.357 cv
219.172 116.263 222.262 116.263 224.168 114.357 cv
226.074 112.451 226.074 109.361 224.168 107.455 cv
cp
.169497 .120851 .124178 0 cmyk
f
224.168 114.357 mo
222.262 116.263 219.172 116.263 217.266 114.357 cv
224.168 107.455 li
226.074 109.361 226.074 112.451 224.168 114.357 cv
cp
0 0 0 0 cmyk
f
220.717 107.245 mo
218.698 107.245 217.057 108.887 217.057 110.906 cv
217.057 112.924 218.698 114.566 220.717 114.566 cv
222.735 114.566 224.377 112.924 224.377 110.906 cv
224.377 108.887 222.735 107.245 220.717 107.245 cv
cp
220.717 117.006 mo
217.353 117.006 214.616 114.269 214.616 110.906 cv
214.616 107.542 217.353 104.805 220.717 104.805 cv
224.081 104.805 226.818 107.542 226.818 110.906 cv
226.818 114.269 224.081 117.006 220.717 117.006 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
246.13 58.6496 mo
244.224 56.7436 241.134 56.7436 239.228 58.6496 cv
237.322 60.5555 237.322 63.6457 239.228 65.5517 cv
241.134 67.4576 244.224 67.4576 246.13 65.5517 cv
248.036 63.6457 248.036 60.5555 246.13 58.6496 cv
cp
.169497 .120851 .124178 0 cmyk
f
246.13 65.5517 mo
244.224 67.4576 241.134 67.4576 239.228 65.5517 cv
246.13 58.6496 li
248.036 60.5556 248.036 63.6457 246.13 65.5517 cv
cp
0 0 0 0 cmyk
f
242.679 58.4403 mo
240.661 58.4403 239.019 60.0822 239.019 62.1006 cv
239.019 64.1191 240.661 65.761 242.679 65.761 cv
244.698 65.761 246.34 64.1191 246.34 62.1006 cv
246.34 60.0822 244.698 58.4403 242.679 58.4403 cv
cp
242.679 68.2013 mo
239.316 68.2013 236.579 65.4643 236.579 62.1006 cv
236.579 58.7369 239.316 56 242.679 56 cv
246.043 56 248.78 58.7369 248.78 62.1006 cv
248.78 65.4643 246.043 68.2013 242.679 68.2013 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
260.772 156.26 mo
258.866 154.354 255.776 154.354 253.87 156.26 cv
251.964 158.166 251.964 161.256 253.87 163.162 cv
255.776 165.068 258.866 165.068 260.772 163.162 cv
262.678 161.256 262.678 158.166 260.772 156.26 cv
cp
.169497 .120851 .124178 0 cmyk
f
260.772 163.162 mo
258.866 165.068 255.776 165.068 253.87 163.162 cv
260.772 156.26 li
262.678 158.166 262.678 161.256 260.772 163.162 cv
cp
0 0 0 0 cmyk
f
257.321 156.05 mo
255.302 156.05 253.66 157.692 253.66 159.711 cv
253.66 161.729 255.302 163.371 257.321 163.371 cv
259.339 163.371 260.981 161.729 260.981 159.711 cv
260.981 157.692 259.339 156.05 257.321 156.05 cv
cp
257.321 165.811 mo
253.957 165.811 251.22 163.074 251.22 159.711 cv
251.22 156.347 253.957 153.61 257.321 153.61 cv
260.684 153.61 263.421 156.347 263.421 159.711 cv
263.421 163.074 260.684 165.811 257.321 165.811 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
224.168 87.9326 mo
222.262 86.0266 219.172 86.0266 217.266 87.9326 cv
215.36 89.8386 215.36 92.9287 217.266 94.8347 cv
219.172 96.7406 222.262 96.7406 224.168 94.8347 cv
226.074 92.9287 226.074 89.8386 224.168 87.9326 cv
cp
.67126 0 .361639 0 cmyk
f
224.168 94.8347 mo
222.262 96.7407 219.172 96.7407 217.266 94.8347 cv
224.168 87.9326 li
226.074 89.8386 226.074 92.9287 224.168 94.8347 cv
cp
.623468 0 .234043 0 cmyk
f
220.717 87.7233 mo
218.698 87.7233 217.057 89.3652 217.057 91.3836 cv
217.057 93.4021 218.698 95.044 220.717 95.044 cv
222.735 95.044 224.377 93.4021 224.377 91.3836 cv
224.377 89.3652 222.735 87.7233 220.717 87.7233 cv
cp
220.717 97.4843 mo
217.353 97.4843 214.616 94.7473 214.616 91.3836 cv
214.616 88.02 217.353 85.283 220.717 85.283 cv
224.081 85.283 226.818 88.02 226.818 91.3836 cv
226.818 94.7473 224.081 97.4843 220.717 97.4843 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
224.168 126.977 mo
222.262 125.071 219.172 125.071 217.266 126.977 cv
215.36 128.883 215.36 131.973 217.266 133.879 cv
219.172 135.785 222.262 135.785 224.168 133.879 cv
226.074 131.973 226.074 128.883 224.168 126.977 cv
cp
.67126 0 .361639 0 cmyk
f
224.168 133.879 mo
222.262 135.785 219.172 135.785 217.266 133.879 cv
224.168 126.977 li
226.074 128.883 226.074 131.973 224.168 133.879 cv
cp
.623468 0 .234043 0 cmyk
f
220.717 126.767 mo
218.698 126.767 217.057 128.409 217.057 130.428 cv
217.057 132.446 218.698 134.088 220.717 134.088 cv
222.735 134.088 224.377 132.446 224.377 130.428 cv
224.377 128.409 222.735 126.767 220.717 126.767 cv
cp
220.717 136.528 mo
217.353 136.528 214.616 133.791 214.616 130.428 cv
214.616 127.064 217.353 124.327 220.717 124.327 cv
224.081 124.327 226.818 127.064 226.818 130.428 cv
226.818 133.791 224.081 136.528 220.717 136.528 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
282.734 107.455 mo
280.828 105.549 277.738 105.549 275.832 107.455 cv
273.926 109.361 273.926 112.451 275.832 114.357 cv
277.738 116.263 280.828 116.263 282.734 114.357 cv
284.64 112.451 284.64 109.361 282.734 107.455 cv
cp
.169497 .120851 .124178 0 cmyk
f
282.734 114.357 mo
280.828 116.263 277.738 116.263 275.832 114.357 cv
282.734 107.455 li
284.64 109.361 284.64 112.451 282.734 114.357 cv
cp
0 0 0 0 cmyk
f
279.283 107.245 mo
277.265 107.245 275.623 108.887 275.623 110.906 cv
275.623 112.924 277.265 114.566 279.283 114.566 cv
281.301 114.566 282.943 112.924 282.943 110.906 cv
282.943 108.887 281.301 107.245 279.283 107.245 cv
cp
279.283 117.006 mo
275.919 117.006 273.182 114.269 273.182 110.906 cv
273.182 107.542 275.919 104.805 279.283 104.805 cv
282.647 104.805 285.384 107.542 285.384 110.906 cv
285.384 114.269 282.647 117.006 279.283 117.006 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
282.734 87.9326 mo
280.828 86.0266 277.738 86.0266 275.832 87.9326 cv
273.926 89.8386 273.926 92.9287 275.832 94.8347 cv
277.738 96.7406 280.828 96.7406 282.734 94.8347 cv
284.64 92.9287 284.64 89.8386 282.734 87.9326 cv
cp
.67126 0 .361639 0 cmyk
f
282.734 94.8347 mo
280.828 96.7407 277.738 96.7407 275.832 94.8347 cv
282.734 87.9326 li
284.64 89.8386 284.64 92.9287 282.734 94.8347 cv
cp
.623468 0 .234043 0 cmyk
f
279.283 87.7233 mo
277.265 87.7233 275.623 89.3652 275.623 91.3836 cv
275.623 93.4021 277.265 95.044 279.283 95.044 cv
281.301 95.044 282.943 93.4021 282.943 91.3836 cv
282.943 89.3652 281.301 87.7233 279.283 87.7233 cv
cp
279.283 97.4843 mo
275.919 97.4843 273.182 94.7473 273.182 91.3836 cv
273.182 88.02 275.919 85.283 279.283 85.283 cv
282.647 85.283 285.384 88.02 285.384 91.3836 cv
285.384 94.7473 282.647 97.4843 279.283 97.4843 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
282.734 126.977 mo
280.828 125.071 277.738 125.071 275.832 126.977 cv
273.926 128.883 273.926 131.973 275.832 133.879 cv
277.738 135.785 280.828 135.785 282.734 133.879 cv
284.64 131.973 284.64 128.883 282.734 126.977 cv
cp
.67126 0 .361639 0 cmyk
f
282.734 133.879 mo
280.828 135.785 277.738 135.785 275.832 133.879 cv
282.734 126.977 li
284.64 128.883 284.64 131.973 282.734 133.879 cv
cp
.623468 0 .234043 0 cmyk
f
279.283 126.767 mo
277.265 126.767 275.623 128.409 275.623 130.428 cv
275.623 132.446 277.265 134.088 279.283 134.088 cv
281.301 134.088 282.943 132.446 282.943 130.428 cv
282.943 128.409 281.301 126.767 279.283 126.767 cv
cp
279.283 136.528 mo
275.919 136.528 273.182 133.791 273.182 130.428 cv
273.182 127.064 275.919 124.327 279.283 124.327 cv
282.647 124.327 285.384 127.064 285.384 130.428 cv
285.384 133.791 282.647 136.528 279.283 136.528 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
238.661 133.731 mo
236.936 132.005 li
271.1 97.8417 li
272.825 99.5671 li
238.661 133.731 li
cp
f
228.9 123.97 mo
227.175 122.244 li
261.339 88.0807 li
263.064 89.8061 li
228.9 123.97 li
cp
f
351.061 129.417 mo
349.155 127.511 346.065 127.511 344.159 129.417 cv
342.253 131.323 342.253 134.413 344.159 136.319 cv
346.065 138.225 349.155 138.225 351.061 136.319 cv
352.967 134.413 352.967 131.323 351.061 129.417 cv
cp
.169497 .120851 .124178 0 cmyk
f
351.061 136.319 mo
349.155 138.225 346.065 138.225 344.159 136.319 cv
351.061 129.417 li
352.967 131.323 352.967 134.413 351.061 136.319 cv
cp
0 0 0 0 cmyk
f
347.61 129.207 mo
345.592 129.207 343.95 130.85 343.95 132.868 cv
343.95 134.886 345.592 136.528 347.61 136.528 cv
349.629 136.528 351.27 134.886 351.27 132.868 cv
351.27 130.85 349.629 129.207 347.61 129.207 cv
cp
347.61 138.969 mo
344.246 138.969 341.509 136.232 341.509 132.868 cv
341.509 129.504 344.246 126.767 347.61 126.767 cv
350.974 126.767 353.711 129.504 353.711 132.868 cv
353.711 136.232 350.974 138.969 347.61 138.969 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
365.703 68.4106 mo
363.797 66.5046 360.706 66.5046 358.801 68.4106 cv
356.895 70.3165 356.895 73.4067 358.801 75.3127 cv
360.706 77.2186 363.797 77.2186 365.703 75.3127 cv
367.609 73.4067 367.609 70.3165 365.703 68.4106 cv
cp
.169497 .120851 .124178 0 cmyk
f
365.703 75.3127 mo
363.797 77.2186 360.706 77.2186 358.801 75.3127 cv
365.703 68.4106 li
367.609 70.3166 367.609 73.4067 365.703 75.3127 cv
cp
0 0 0 0 cmyk
f
362.252 68.2013 mo
360.233 68.2013 358.591 69.8432 358.591 71.8616 cv
358.591 73.8801 360.233 75.522 362.252 75.522 cv
364.27 75.522 365.912 73.8801 365.912 71.8616 cv
365.912 69.8432 364.27 68.2013 362.252 68.2013 cv
cp
362.252 77.9623 mo
358.888 77.9623 356.151 75.2253 356.151 71.8616 cv
356.151 68.4979 358.888 65.761 362.252 65.761 cv
365.615 65.761 368.352 68.4979 368.352 71.8616 cv
368.352 75.2253 365.615 77.9623 362.252 77.9623 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
351.061 85.4924 mo
349.155 83.5864 346.065 83.5864 344.159 85.4924 cv
342.253 87.3983 342.253 90.4885 344.159 92.3944 cv
346.065 94.3004 349.155 94.3004 351.061 92.3944 cv
352.967 90.4885 352.967 87.3983 351.061 85.4924 cv
cp
.67126 0 .361639 0 cmyk
f
351.061 92.3944 mo
349.155 94.3004 346.065 94.3004 344.159 92.3944 cv
351.061 85.4924 li
352.967 87.3983 352.967 90.4884 351.061 92.3944 cv
cp
.623468 0 .234043 0 cmyk
f
347.61 85.283 mo
345.592 85.283 343.95 86.9249 343.95 88.9434 cv
343.95 90.9618 345.592 92.6038 347.61 92.6038 cv
349.629 92.6038 351.27 90.9618 351.27 88.9434 cv
351.27 86.9249 349.629 85.283 347.61 85.283 cv
cp
347.61 95.044 mo
344.246 95.044 341.509 92.3071 341.509 88.9434 cv
341.509 85.5797 344.246 82.8428 347.61 82.8428 cv
350.974 82.8428 353.711 85.5797 353.711 88.9434 cv
353.711 92.3071 350.974 95.044 347.61 95.044 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
365.703 146.499 mo
363.797 144.593 360.706 144.593 358.801 146.499 cv
356.895 148.405 356.895 151.495 358.801 153.401 cv
360.706 155.307 363.797 155.307 365.703 153.401 cv
367.609 151.495 367.609 148.405 365.703 146.499 cv
cp
.67126 0 .361639 0 cmyk
f
365.703 153.401 mo
363.797 155.307 360.706 155.307 358.801 153.401 cv
365.703 146.499 li
367.609 148.405 367.609 151.495 365.703 153.401 cv
cp
.623468 0 .234043 0 cmyk
f
362.252 146.289 mo
360.233 146.289 358.591 147.931 358.591 149.95 cv
358.591 151.968 360.233 153.61 362.252 153.61 cv
364.27 153.61 365.912 151.968 365.912 149.95 cv
365.912 147.931 364.27 146.289 362.252 146.289 cv
cp
362.252 156.05 mo
358.888 156.05 356.151 153.313 356.151 149.95 cv
356.151 146.586 358.888 143.849 362.252 143.849 cv
365.615 143.849 368.352 146.586 368.352 149.95 cv
368.352 153.313 365.615 156.05 362.252 156.05 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
424.269 68.4106 mo
422.363 66.5046 419.272 66.5046 417.367 68.4106 cv
415.461 70.3165 415.461 73.4067 417.367 75.3127 cv
419.272 77.2186 422.363 77.2186 424.269 75.3127 cv
426.175 73.4067 426.175 70.3165 424.269 68.4106 cv
cp
.169497 .120851 .124178 0 cmyk
f
424.269 75.3127 mo
422.363 77.2186 419.272 77.2186 417.367 75.3127 cv
424.269 68.4106 li
426.175 70.3166 426.175 73.4067 424.269 75.3127 cv
cp
0 0 0 0 cmyk
f
420.818 68.2013 mo
418.799 68.2013 417.157 69.8432 417.157 71.8616 cv
417.157 73.8801 418.799 75.522 420.818 75.522 cv
422.836 75.522 424.478 73.8801 424.478 71.8616 cv
424.478 69.8432 422.836 68.2013 420.818 68.2013 cv
cp
420.818 77.9623 mo
417.454 77.9623 414.717 75.2253 414.717 71.8616 cv
414.717 68.4979 417.454 65.761 420.818 65.761 cv
424.181 65.761 426.918 68.4979 426.918 71.8616 cv
426.918 75.2253 424.181 77.9623 420.818 77.9623 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
424.269 146.499 mo
422.363 144.593 419.272 144.593 417.367 146.499 cv
415.461 148.405 415.461 151.495 417.367 153.401 cv
419.272 155.307 422.363 155.307 424.269 153.401 cv
426.175 151.495 426.175 148.405 424.269 146.499 cv
cp
.67126 0 .361639 0 cmyk
f
424.269 153.401 mo
422.363 155.307 419.272 155.307 417.367 153.401 cv
424.269 146.499 li
426.175 148.405 426.175 151.495 424.269 153.401 cv
cp
.623468 0 .234043 0 cmyk
f
420.818 146.289 mo
418.799 146.289 417.157 147.931 417.157 149.95 cv
417.157 151.968 418.799 153.61 420.818 153.61 cv
422.836 153.61 424.478 151.968 424.478 149.95 cv
424.478 147.931 422.836 146.289 420.818 146.289 cv
cp
420.818 156.05 mo
417.454 156.05 414.717 153.313 414.717 149.95 cv
414.717 146.586 417.454 143.849 420.818 143.849 cv
424.181 143.849 426.918 146.586 426.918 149.95 cv
426.918 153.313 424.181 156.05 420.818 156.05 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
438.91 129.417 mo
437.004 127.511 433.914 127.511 432.008 129.417 cv
430.102 131.323 430.102 134.413 432.008 136.319 cv
433.914 138.225 437.004 138.225 438.91 136.319 cv
440.816 134.413 440.816 131.323 438.91 129.417 cv
cp
.169497 .120851 .124178 0 cmyk
f
438.91 136.319 mo
437.004 138.225 433.914 138.225 432.008 136.319 cv
438.91 129.417 li
440.816 131.323 440.816 134.413 438.91 136.319 cv
cp
0 0 0 0 cmyk
f
435.459 129.207 mo
433.441 129.207 431.799 130.85 431.799 132.868 cv
431.799 134.886 433.441 136.528 435.459 136.528 cv
437.478 136.528 439.12 134.886 439.12 132.868 cv
439.12 130.85 437.478 129.207 435.459 129.207 cv
cp
435.459 138.969 mo
432.095 138.969 429.358 136.232 429.358 132.868 cv
429.358 129.504 432.095 126.767 435.459 126.767 cv
438.823 126.767 441.56 129.504 441.56 132.868 cv
441.56 136.232 438.823 138.969 435.459 138.969 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
438.91 85.4924 mo
437.004 83.5864 433.914 83.5864 432.008 85.4924 cv
430.102 87.3983 430.102 90.4885 432.008 92.3944 cv
433.914 94.3004 437.004 94.3004 438.91 92.3944 cv
440.816 90.4885 440.816 87.3983 438.91 85.4924 cv
cp
.67126 0 .361639 0 cmyk
f
438.91 92.3944 mo
437.004 94.3004 433.914 94.3004 432.008 92.3944 cv
438.91 85.4924 li
440.816 87.3983 440.816 90.4884 438.91 92.3944 cv
cp
.623468 0 .234043 0 cmyk
f
435.459 85.283 mo
433.441 85.283 431.799 86.9249 431.799 88.9434 cv
431.799 90.9618 433.441 92.6038 435.459 92.6038 cv
437.478 92.6038 439.12 90.9618 439.12 88.9434 cv
439.12 86.9249 437.478 85.283 435.459 85.283 cv
cp
435.459 95.044 mo
432.095 95.044 429.358 92.3071 429.358 88.9434 cv
429.358 85.5797 432.095 82.8428 435.459 82.8428 cv
438.823 82.8428 441.56 85.5797 441.56 88.9434 cv
441.56 92.3071 438.823 95.044 435.459 95.044 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
389.094 107.245 mo
382.994 107.245 li
382.994 97.4843 li
375.673 97.4843 li
375.673 107.245 li
363.472 107.245 li
363.472 90.1635 li
352.491 90.1635 li
352.491 87.7233 li
365.912 87.7233 li
365.912 104.805 li
373.233 104.805 li
373.233 95.044 li
385.434 95.044 li
385.434 104.805 li
389.094 104.805 li
389.094 107.245 li
cp
f
365.912 134.088 mo
352.491 134.088 li
352.491 131.648 li
363.472 131.648 li
363.472 114.566 li
375.673 114.566 li
375.673 124.327 li
382.994 124.327 li
382.994 114.566 li
389.094 114.566 li
389.094 117.006 li
385.434 117.006 li
385.434 126.767 li
373.233 126.767 li
373.233 117.006 li
365.912 117.006 li
365.912 134.088 li
cp
f
419.598 107.245 mo
407.396 107.245 li
407.396 97.4843 li
400.076 97.4843 li
400.076 107.245 li
393.975 107.245 li
393.975 104.805 li
397.635 104.805 li
397.635 95.044 li
409.836 95.044 li
409.836 104.805 li
417.157 104.805 li
417.157 87.7233 li
430.579 87.7233 li
430.579 90.1635 li
419.598 90.1635 li
419.598 107.245 li
cp
f
430.579 134.088 mo
417.157 134.088 li
417.157 117.006 li
409.836 117.006 li
409.836 126.767 li
397.635 126.767 li
397.635 117.006 li
393.975 117.006 li
393.975 114.566 li
400.076 114.566 li
400.076 124.327 li
407.396 124.327 li
407.396 114.566 li
419.598 114.566 li
419.598 131.648 li
430.579 131.648 li
430.579 134.088 li
cp
f
390.314 151.17 mo
367.132 151.17 li
367.132 148.73 li
387.874 148.73 li
387.874 73.0818 li
367.132 73.0818 li
367.132 70.6415 li
390.314 70.6415 li
390.314 151.17 li
cp
f
415.937 151.17 mo
392.755 151.17 li
392.755 70.6415 li
415.937 70.6415 li
415.937 73.0818 li
395.195 73.0818 li
395.195 148.73 li
415.937 148.73 li
415.937 151.17 li
cp
f
226.818 275.623 mo
273.182 275.623 li
273.182 229.258 li
226.818 229.258 li
226.818 275.623 li
cp
275.623 278.063 mo
224.377 278.063 li
224.377 226.818 li
275.623 226.818 li
275.623 278.063 li
cp
f
224.735 228.9 mo
212.534 216.699 li
214.259 214.974 li
226.46 227.175 li
224.735 228.9 li
cp
f
275.265 228.9 mo
273.54 227.175 li
285.741 214.974 li
287.466 216.699 li
275.265 228.9 li
cp
f
214.407 209.945 mo
212.501 208.039 209.411 208.039 207.505 209.945 cv
205.599 211.851 205.599 214.941 207.505 216.847 cv
209.411 218.753 212.501 218.753 214.407 216.847 cv
216.313 214.941 216.313 211.851 214.407 209.945 cv
cp
.169497 .120851 .124178 0 cmyk
f
214.407 216.847 mo
212.501 218.753 209.411 218.753 207.505 216.847 cv
214.407 209.945 li
216.313 211.851 216.313 214.941 214.407 216.847 cv
cp
0 0 0 0 cmyk
f
210.956 209.736 mo
208.937 209.736 207.296 211.378 207.296 213.396 cv
207.296 215.415 208.937 217.057 210.956 217.057 cv
212.974 217.057 214.616 215.415 214.616 213.396 cv
214.616 211.378 212.974 209.736 210.956 209.736 cv
cp
210.956 219.497 mo
207.592 219.497 204.855 216.76 204.855 213.396 cv
204.855 210.033 207.592 207.296 210.956 207.296 cv
214.32 207.296 217.057 210.033 217.057 213.396 cv
217.057 216.76 214.32 219.497 210.956 219.497 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
292.495 209.945 mo
290.589 208.039 287.499 208.039 285.593 209.945 cv
283.687 211.851 283.687 214.941 285.593 216.847 cv
287.499 218.753 290.589 218.753 292.495 216.847 cv
294.401 214.941 294.401 211.851 292.495 209.945 cv
cp
.67126 0 .361639 0 cmyk
f
292.495 216.847 mo
290.589 218.753 287.499 218.753 285.593 216.847 cv
292.495 209.945 li
294.401 211.851 294.401 214.941 292.495 216.847 cv
cp
.623468 0 .234043 0 cmyk
f
289.044 209.736 mo
287.026 209.736 285.384 211.378 285.384 213.396 cv
285.384 215.415 287.026 217.057 289.044 217.057 cv
291.062 217.057 292.704 215.415 292.704 213.396 cv
292.704 211.378 291.062 209.736 289.044 209.736 cv
cp
289.044 219.497 mo
285.68 219.497 282.943 216.76 282.943 213.396 cv
282.943 210.033 285.68 207.296 289.044 207.296 cv
292.408 207.296 295.145 210.033 295.145 213.396 cv
295.145 216.76 292.408 219.497 289.044 219.497 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
214.259 289.907 mo
212.534 288.181 li
224.735 275.98 li
226.46 277.705 li
214.259 289.907 li
cp
f
285.741 289.907 mo
273.54 277.705 li
275.265 275.98 li
287.466 288.181 li
285.741 289.907 li
cp
f
230.478 229.258 mo
229.804 229.258 229.258 228.712 229.258 228.038 cv
229.258 218.277 li
229.258 217.603 229.804 217.057 230.478 217.057 cv
231.152 217.057 231.698 217.603 231.698 218.277 cv
231.698 228.038 li
231.698 228.712 231.152 229.258 230.478 229.258 cv
cp
f
235.358 229.258 mo
234.684 229.258 234.138 228.712 234.138 228.038 cv
234.138 218.277 li
234.138 217.603 234.684 217.057 235.358 217.057 cv
236.033 217.057 236.579 217.603 236.579 218.277 cv
236.579 228.038 li
236.579 228.712 236.033 229.258 235.358 229.258 cv
cp
f
240.239 229.258 mo
239.565 229.258 239.019 228.712 239.019 228.038 cv
239.019 218.277 li
239.019 217.603 239.565 217.057 240.239 217.057 cv
240.913 217.057 241.459 217.603 241.459 218.277 cv
241.459 228.038 li
241.459 228.712 240.913 229.258 240.239 229.258 cv
cp
f
245.119 229.258 mo
244.445 229.258 243.899 228.712 243.899 228.038 cv
243.899 218.277 li
243.899 217.603 244.445 217.057 245.119 217.057 cv
245.794 217.057 246.34 217.603 246.34 218.277 cv
246.34 228.038 li
246.34 228.712 245.794 229.258 245.119 229.258 cv
cp
f
250 229.258 mo
249.326 229.258 248.78 228.712 248.78 228.038 cv
248.78 218.277 li
248.78 217.603 249.326 217.057 250 217.057 cv
250.674 217.057 251.22 217.603 251.22 218.277 cv
251.22 228.038 li
251.22 228.712 250.674 229.258 250 229.258 cv
cp
f
254.88 229.258 mo
254.206 229.258 253.66 228.712 253.66 228.038 cv
253.66 218.277 li
253.66 217.603 254.206 217.057 254.88 217.057 cv
255.555 217.057 256.101 217.603 256.101 218.277 cv
256.101 228.038 li
256.101 228.712 255.555 229.258 254.88 229.258 cv
cp
f
259.761 229.258 mo
259.087 229.258 258.541 228.712 258.541 228.038 cv
258.541 218.277 li
258.541 217.603 259.087 217.057 259.761 217.057 cv
260.435 217.057 260.981 217.603 260.981 218.277 cv
260.981 228.038 li
260.981 228.712 260.435 229.258 259.761 229.258 cv
cp
f
264.641 229.258 mo
263.967 229.258 263.421 228.712 263.421 228.038 cv
263.421 218.277 li
263.421 217.603 263.967 217.057 264.641 217.057 cv
265.316 217.057 265.862 217.603 265.862 218.277 cv
265.862 228.038 li
265.862 228.712 265.316 229.258 264.641 229.258 cv
cp
f
269.522 229.258 mo
268.848 229.258 268.302 228.712 268.302 228.038 cv
268.302 218.277 li
268.302 217.603 268.848 217.057 269.522 217.057 cv
270.196 217.057 270.742 217.603 270.742 218.277 cv
270.742 228.038 li
270.742 228.712 270.196 229.258 269.522 229.258 cv
cp
f
230.478 287.824 mo
229.804 287.824 229.258 287.278 229.258 286.604 cv
229.258 276.843 li
229.258 276.168 229.804 275.623 230.478 275.623 cv
231.152 275.623 231.698 276.168 231.698 276.843 cv
231.698 286.604 li
231.698 287.278 231.152 287.824 230.478 287.824 cv
cp
f
235.358 287.824 mo
234.684 287.824 234.138 287.278 234.138 286.604 cv
234.138 276.843 li
234.138 276.168 234.684 275.623 235.358 275.623 cv
236.033 275.623 236.579 276.168 236.579 276.843 cv
236.579 286.604 li
236.579 287.278 236.033 287.824 235.358 287.824 cv
cp
f
240.239 287.824 mo
239.565 287.824 239.019 287.278 239.019 286.604 cv
239.019 276.843 li
239.019 276.168 239.565 275.623 240.239 275.623 cv
240.913 275.623 241.459 276.168 241.459 276.843 cv
241.459 286.604 li
241.459 287.278 240.913 287.824 240.239 287.824 cv
cp
f
245.119 287.824 mo
244.445 287.824 243.899 287.278 243.899 286.604 cv
243.899 276.843 li
243.899 276.168 244.445 275.623 245.119 275.623 cv
245.794 275.623 246.34 276.168 246.34 276.843 cv
246.34 286.604 li
246.34 287.278 245.794 287.824 245.119 287.824 cv
cp
f
250 287.824 mo
249.326 287.824 248.78 287.278 248.78 286.604 cv
248.78 276.843 li
248.78 276.168 249.326 275.623 250 275.623 cv
250.674 275.623 251.22 276.168 251.22 276.843 cv
251.22 286.604 li
251.22 287.278 250.674 287.824 250 287.824 cv
cp
f
254.88 287.824 mo
254.206 287.824 253.66 287.278 253.66 286.604 cv
253.66 276.843 li
253.66 276.168 254.206 275.623 254.88 275.623 cv
255.555 275.623 256.101 276.168 256.101 276.843 cv
256.101 286.604 li
256.101 287.278 255.555 287.824 254.88 287.824 cv
cp
f
259.761 287.824 mo
259.087 287.824 258.541 287.278 258.541 286.604 cv
258.541 276.843 li
258.541 276.168 259.087 275.623 259.761 275.623 cv
260.435 275.623 260.981 276.168 260.981 276.843 cv
260.981 286.604 li
260.981 287.278 260.435 287.824 259.761 287.824 cv
cp
f
264.641 287.824 mo
263.967 287.824 263.421 287.278 263.421 286.604 cv
263.421 276.843 li
263.421 276.168 263.967 275.623 264.641 275.623 cv
265.316 275.623 265.862 276.168 265.862 276.843 cv
265.862 286.604 li
265.862 287.278 265.316 287.824 264.641 287.824 cv
cp
f
269.522 287.824 mo
268.848 287.824 268.302 287.278 268.302 286.604 cv
268.302 276.843 li
268.302 276.168 268.848 275.623 269.522 275.623 cv
270.196 275.623 270.742 276.168 270.742 276.843 cv
270.742 286.604 li
270.742 287.278 270.196 287.824 269.522 287.824 cv
cp
f
284.163 234.138 mo
274.402 234.138 li
273.728 234.138 273.182 233.592 273.182 232.918 cv
273.182 232.244 273.728 231.698 274.402 231.698 cv
284.163 231.698 li
284.838 231.698 285.384 232.244 285.384 232.918 cv
285.384 233.592 284.838 234.138 284.163 234.138 cv
cp
f
284.163 239.019 mo
274.402 239.019 li
273.728 239.019 273.182 238.473 273.182 237.799 cv
273.182 237.125 273.728 236.579 274.402 236.579 cv
284.163 236.579 li
284.838 236.579 285.384 237.125 285.384 237.799 cv
285.384 238.473 284.838 239.019 284.163 239.019 cv
cp
f
284.163 243.899 mo
274.402 243.899 li
273.728 243.899 273.182 243.353 273.182 242.679 cv
273.182 242.005 273.728 241.459 274.402 241.459 cv
284.163 241.459 li
284.838 241.459 285.384 242.005 285.384 242.679 cv
285.384 243.353 284.838 243.899 284.163 243.899 cv
cp
f
284.163 248.78 mo
274.402 248.78 li
273.728 248.78 273.182 248.234 273.182 247.56 cv
273.182 246.886 273.728 246.34 274.402 246.34 cv
284.163 246.34 li
284.838 246.34 285.384 246.886 285.384 247.56 cv
285.384 248.234 284.838 248.78 284.163 248.78 cv
cp
f
284.163 253.66 mo
274.402 253.66 li
273.728 253.66 273.182 253.115 273.182 252.44 cv
273.182 251.766 273.728 251.22 274.402 251.22 cv
284.163 251.22 li
284.838 251.22 285.384 251.766 285.384 252.44 cv
285.384 253.115 284.838 253.66 284.163 253.66 cv
cp
f
284.163 258.541 mo
274.402 258.541 li
273.728 258.541 273.182 257.995 273.182 257.321 cv
273.182 256.646 273.728 256.101 274.402 256.101 cv
284.163 256.101 li
284.838 256.101 285.384 256.646 285.384 257.321 cv
285.384 257.995 284.838 258.541 284.163 258.541 cv
cp
f
284.163 263.421 mo
274.402 263.421 li
273.728 263.421 273.182 262.876 273.182 262.201 cv
273.182 261.527 273.728 260.981 274.402 260.981 cv
284.163 260.981 li
284.838 260.981 285.384 261.527 285.384 262.201 cv
285.384 262.876 284.838 263.421 284.163 263.421 cv
cp
f
284.163 268.302 mo
274.402 268.302 li
273.728 268.302 273.182 267.756 273.182 267.082 cv
273.182 266.407 273.728 265.862 274.402 265.862 cv
284.163 265.862 li
284.838 265.862 285.384 266.407 285.384 267.082 cv
285.384 267.756 284.838 268.302 284.163 268.302 cv
cp
f
284.163 273.182 mo
274.402 273.182 li
273.728 273.182 273.182 272.637 273.182 271.962 cv
273.182 271.288 273.728 270.742 274.402 270.742 cv
284.163 270.742 li
284.838 270.742 285.384 271.288 285.384 271.962 cv
285.384 272.637 284.838 273.182 284.163 273.182 cv
cp
f
225.597 234.138 mo
215.836 234.138 li
215.162 234.138 214.616 233.592 214.616 232.918 cv
214.616 232.244 215.162 231.698 215.836 231.698 cv
225.597 231.698 li
226.272 231.698 226.818 232.244 226.818 232.918 cv
226.818 233.592 226.272 234.138 225.597 234.138 cv
cp
f
225.597 239.019 mo
215.836 239.019 li
215.162 239.019 214.616 238.473 214.616 237.799 cv
214.616 237.125 215.162 236.579 215.836 236.579 cv
225.597 236.579 li
226.272 236.579 226.818 237.125 226.818 237.799 cv
226.818 238.473 226.272 239.019 225.597 239.019 cv
cp
f
225.597 243.899 mo
215.836 243.899 li
215.162 243.899 214.616 243.353 214.616 242.679 cv
214.616 242.005 215.162 241.459 215.836 241.459 cv
225.597 241.459 li
226.272 241.459 226.818 242.005 226.818 242.679 cv
226.818 243.353 226.272 243.899 225.597 243.899 cv
cp
f
225.597 248.78 mo
215.836 248.78 li
215.162 248.78 214.616 248.234 214.616 247.56 cv
214.616 246.886 215.162 246.34 215.836 246.34 cv
225.597 246.34 li
226.272 246.34 226.818 246.886 226.818 247.56 cv
226.818 248.234 226.272 248.78 225.597 248.78 cv
cp
f
225.597 253.66 mo
215.836 253.66 li
215.162 253.66 214.616 253.115 214.616 252.44 cv
214.616 251.766 215.162 251.22 215.836 251.22 cv
225.597 251.22 li
226.272 251.22 226.818 251.766 226.818 252.44 cv
226.818 253.115 226.272 253.66 225.597 253.66 cv
cp
f
225.597 258.541 mo
215.836 258.541 li
215.162 258.541 214.616 257.995 214.616 257.321 cv
214.616 256.646 215.162 256.101 215.836 256.101 cv
225.597 256.101 li
226.272 256.101 226.818 256.646 226.818 257.321 cv
226.818 257.995 226.272 258.541 225.597 258.541 cv
cp
f
225.597 263.421 mo
215.836 263.421 li
215.162 263.421 214.616 262.876 214.616 262.201 cv
214.616 261.527 215.162 260.981 215.836 260.981 cv
225.597 260.981 li
226.272 260.981 226.818 261.527 226.818 262.201 cv
226.818 262.876 226.272 263.421 225.597 263.421 cv
cp
f
225.597 268.302 mo
215.836 268.302 li
215.162 268.302 214.616 267.756 214.616 267.082 cv
214.616 266.407 215.162 265.862 215.836 265.862 cv
225.597 265.862 li
226.272 265.862 226.818 266.407 226.818 267.082 cv
226.818 267.756 226.272 268.302 225.597 268.302 cv
cp
f
225.597 273.182 mo
215.836 273.182 li
215.162 273.182 214.616 272.637 214.616 271.962 cv
214.616 271.288 215.162 270.742 215.836 270.742 cv
225.597 270.742 li
226.272 270.742 226.818 271.288 226.818 271.962 cv
226.818 272.637 226.272 273.182 225.597 273.182 cv
cp
f
292.495 288.033 mo
290.589 286.127 287.499 286.127 285.593 288.033 cv
283.687 289.939 283.687 293.029 285.593 294.935 cv
287.499 296.841 290.589 296.841 292.495 294.935 cv
294.401 293.029 294.401 289.939 292.495 288.033 cv
cp
.169497 .120851 .124178 0 cmyk
f
292.495 294.935 mo
290.589 296.841 287.499 296.841 285.593 294.935 cv
292.495 288.033 li
294.401 289.939 294.401 293.029 292.495 294.935 cv
cp
0 0 0 0 cmyk
f
289.044 287.824 mo
287.026 287.824 285.384 289.466 285.384 291.484 cv
285.384 293.503 287.026 295.145 289.044 295.145 cv
291.062 295.145 292.704 293.503 292.704 291.484 cv
292.704 289.466 291.062 287.824 289.044 287.824 cv
cp
289.044 297.585 mo
285.68 297.585 282.943 294.848 282.943 291.484 cv
282.943 288.121 285.68 285.384 289.044 285.384 cv
292.408 285.384 295.145 288.121 295.145 291.484 cv
295.145 294.848 292.408 297.585 289.044 297.585 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
214.407 288.033 mo
212.501 286.127 209.411 286.127 207.505 288.033 cv
205.599 289.939 205.599 293.029 207.505 294.935 cv
209.411 296.841 212.501 296.841 214.407 294.935 cv
216.313 293.029 216.313 289.939 214.407 288.033 cv
cp
.67126 0 .361639 0 cmyk
f
214.407 294.935 mo
212.501 296.841 209.411 296.841 207.505 294.935 cv
214.407 288.033 li
216.313 289.939 216.313 293.029 214.407 294.935 cv
cp
.623468 0 .234043 0 cmyk
f
210.956 287.824 mo
208.937 287.824 207.296 289.466 207.296 291.484 cv
207.296 293.503 208.937 295.145 210.956 295.145 cv
212.974 295.145 214.616 293.503 214.616 291.484 cv
214.616 289.466 212.974 287.824 210.956 287.824 cv
cp
210.956 297.585 mo
207.592 297.585 204.855 294.848 204.855 291.484 cv
204.855 288.121 207.592 285.384 210.956 285.384 cv
214.32 285.384 217.057 288.121 217.057 291.484 cv
217.057 294.848 214.32 297.585 210.956 297.585 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
269.522 271.962 mo
235.358 271.962 li
233.452 270.056 232.384 268.988 230.478 267.082 cv
230.478 232.918 li
264.641 232.918 li
266.547 234.824 267.616 235.893 269.522 237.799 cv
269.522 271.962 li
cp
f
257.727 240.442 mo
237.189 240.442 li
236.514 240.442 235.969 239.896 235.969 239.222 cv
235.969 238.548 236.514 238.002 237.189 238.002 cv
257.727 238.002 li
258.401 238.002 258.947 238.548 258.947 239.222 cv
258.947 239.896 258.401 240.442 257.727 240.442 cv
cp
.623468 0 .234043 0 cmyk
f
244.742 245.475 mo
237.189 245.475 li
236.514 245.475 235.969 244.929 235.969 244.255 cv
235.969 243.581 236.514 243.035 237.189 243.035 cv
244.742 243.035 li
245.416 243.035 245.962 243.581 245.962 244.255 cv
245.962 244.929 245.416 245.475 244.742 245.475 cv
cp
f
346.549 213.396 mo
344.44 213.396 342.73 215.106 342.73 217.216 cv
342.73 262.201 li
342.73 268.143 li
342.73 270.252 344.44 271.962 346.549 271.962 cv
436.52 271.962 li
438.629 271.962 440.34 270.252 440.34 268.143 cv
440.34 262.201 li
440.34 217.216 li
440.34 215.106 438.629 213.396 436.52 213.396 cv
346.549 213.396 li
cp
f
396.415 281.723 mo
386.654 281.723 li
386.654 271.962 li
396.415 271.962 li
396.415 281.723 li
cp
.67126 0 .361639 0 cmyk
f
406.176 286.604 mo
376.893 286.604 li
376.893 281.723 li
406.176 281.723 li
406.176 286.604 li
cp
.623468 0 .234043 0 cmyk
f
436.692 268.921 mo
346.377 268.921 li
346.377 216.437 li
436.692 216.437 li
436.692 268.921 li
cp
.779202 .591241 .502647 .329534 cmyk
f
431.626 263.153 mo
399.262 263.153 li
399.262 222.206 li
431.626 222.206 li
431.626 263.153 li
cp
.623468 0 .234043 0 cmyk
f
427.216 241.769 mo
424.677 243.573 li
419.764 247.054 411.805 247.054 406.892 243.573 cv
404.353 241.769 li
406.892 239.965 li
408.09 239.115 409.465 238.476 410.936 238.043 cv
414.03 237.124 417.539 237.124 420.633 238.043 cv
422.104 238.476 423.479 239.115 424.677 239.965 cv
427.216 241.769 li
cp
0 0 0 0 cmyk
f
421.173 240.391 mo
421.173 243.37 418.76 245.783 415.785 245.783 cv
412.809 245.783 410.396 243.37 410.396 240.391 cv
410.396 239.552 410.588 238.755 410.936 238.043 cv
414.03 237.124 417.539 237.124 420.633 238.043 cv
420.982 238.755 421.173 239.552 421.173 240.391 cv
cp
.67126 0 .361639 0 cmyk
f
417.581 240.392 mo
417.581 241.385 416.777 242.189 415.785 242.189 cv
414.792 242.189 413.988 241.385 413.988 240.392 cv
413.988 239.4 414.792 238.596 415.785 238.596 cv
416.777 238.596 417.581 239.4 417.581 240.392 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
427.04 242.018 mo
424.499 240.216 li
419.694 236.805 411.875 236.807 407.07 240.216 cv
404.529 242.018 li
404.177 241.52 li
406.717 239.718 li
411.717 236.171 419.853 236.171 424.852 239.718 cv
427.392 241.52 li
427.04 242.018 li
cp
f
427.549 240.673 mo
424.897 238.937 li
419.871 235.647 411.698 235.647 406.672 238.937 cv
404.021 240.673 li
403.687 240.163 li
406.338 238.427 li
411.546 235.016 420.023 235.016 425.231 238.427 cv
427.882 240.163 li
427.549 240.673 li
cp
f
413.214 239.394 mo
413.214 239.98 412.739 240.454 412.153 240.454 cv
411.568 240.454 411.093 239.98 411.093 239.394 cv
411.093 238.809 411.568 238.334 412.153 238.334 cv
412.739 238.334 413.214 238.809 413.214 239.394 cv
cp
0 0 0 0 cmyk
f
391.941 224.606 mo
351.525 224.606 li
351.525 222.928 li
391.941 222.928 li
391.941 224.606 li
cp
.623468 0 .234043 0 cmyk
f
391.941 228.809 mo
351.525 228.809 li
351.525 227.131 li
391.941 227.131 li
391.941 228.809 li
cp
f
391.941 233.011 mo
351.525 233.011 li
351.525 231.334 li
391.941 231.334 li
391.941 233.011 li
cp
f
391.941 258.227 mo
351.525 258.227 li
351.525 256.55 li
391.941 256.55 li
391.941 258.227 li
cp
f
375.872 237.214 mo
351.525 237.214 li
351.525 235.536 li
375.872 235.536 li
375.872 237.214 li
cp
f
375.872 262.43 mo
351.525 262.43 li
351.525 260.752 li
375.872 260.752 li
375.872 262.43 li
cp
f
355.493 241.417 mo
351.525 241.417 li
351.525 239.739 li
355.493 239.739 li
355.493 241.417 li
cp
f
355.493 249.822 mo
351.525 249.822 li
351.525 248.144 li
355.493 248.144 li
355.493 249.822 li
cp
f
355.493 254.025 mo
351.525 254.025 li
351.525 252.347 li
355.493 252.347 li
355.493 254.025 li
cp
f
355.493 245.619 mo
351.525 245.619 li
351.525 243.942 li
355.493 243.942 li
355.493 245.619 li
cp
f
241.459 385.434 mo
209.736 385.434 li
209.736 364.692 li
212.176 364.692 li
212.176 382.994 li
239.019 382.994 li
239.019 365.197 li
229.973 356.151 li
221.937 356.151 li
221.937 369.572 li
219.497 369.572 li
219.497 353.711 li
230.983 353.711 li
241.459 364.187 li
241.459 385.434 li
cp
.779202 .591241 .502647 .329534 cmyk
f
290.264 385.434 mo
258.541 385.434 li
258.541 364.187 li
269.017 353.711 li
280.503 353.711 li
280.503 369.572 li
278.063 369.572 li
278.063 356.151 li
270.027 356.151 li
260.981 365.197 li
260.981 382.994 li
287.824 382.994 li
287.824 364.692 li
290.264 364.692 li
290.264 385.434 li
cp
f
230.983 434.239 mo
219.497 434.239 li
219.497 418.377 li
221.937 418.377 li
221.937 431.799 li
229.973 431.799 li
239.019 422.753 li
239.019 404.956 li
212.176 404.956 li
212.176 423.258 li
209.736 423.258 li
209.736 402.516 li
241.459 402.516 li
241.459 423.763 li
230.983 434.239 li
cp
f
280.503 434.239 mo
269.017 434.239 li
258.541 423.763 li
258.541 402.516 li
290.264 402.516 li
290.264 423.258 li
287.824 423.258 li
287.824 404.956 li
260.981 404.956 li
260.981 422.753 li
270.027 431.799 li
278.063 431.799 li
278.063 418.377 li
280.503 418.377 li
280.503 434.239 li
cp
f
214.407 356.36 mo
212.501 354.454 209.411 354.454 207.505 356.36 cv
205.599 358.266 205.599 361.356 207.505 363.262 cv
209.411 365.168 212.501 365.168 214.407 363.262 cv
216.313 361.356 216.313 358.266 214.407 356.36 cv
cp
.67126 0 .361639 0 cmyk
f
214.407 363.262 mo
212.501 365.168 209.411 365.168 207.505 363.262 cv
214.407 356.36 li
216.313 358.266 216.313 361.356 214.407 363.262 cv
cp
.623468 0 .234043 0 cmyk
f
210.956 356.151 mo
208.937 356.151 207.296 357.793 207.296 359.811 cv
207.296 361.83 208.937 363.472 210.956 363.472 cv
212.974 363.472 214.616 361.83 214.616 359.811 cv
214.616 357.793 212.974 356.151 210.956 356.151 cv
cp
210.956 365.912 mo
207.592 365.912 204.855 363.175 204.855 359.811 cv
204.855 356.448 207.592 353.711 210.956 353.711 cv
214.32 353.711 217.057 356.448 217.057 359.811 cv
217.057 363.175 214.32 365.912 210.956 365.912 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
253.451 346.599 mo
251.545 344.693 248.455 344.693 246.549 346.599 cv
244.643 348.505 244.643 351.595 246.549 353.501 cv
248.455 355.407 251.545 355.407 253.451 353.501 cv
255.357 351.595 255.357 348.505 253.451 346.599 cv
cp
.67126 0 .361639 0 cmyk
f
253.451 353.501 mo
251.545 355.407 248.455 355.407 246.549 353.501 cv
253.451 346.599 li
255.357 348.505 255.357 351.595 253.451 353.501 cv
cp
.623468 0 .234043 0 cmyk
f
250 346.39 mo
247.981 346.39 246.34 348.032 246.34 350.05 cv
246.34 352.069 247.981 353.711 250 353.711 cv
252.018 353.711 253.66 352.069 253.66 350.05 cv
253.66 348.032 252.018 346.39 250 346.39 cv
cp
250 356.151 mo
246.636 356.151 243.899 353.414 243.899 350.05 cv
243.899 346.687 246.636 343.95 250 343.95 cv
253.364 343.95 256.101 346.687 256.101 350.05 cv
256.101 353.414 253.364 356.151 250 356.151 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
292.495 356.36 mo
290.589 354.454 287.499 354.454 285.593 356.36 cv
283.687 358.266 283.687 361.356 285.593 363.262 cv
287.499 365.168 290.589 365.168 292.495 363.262 cv
294.401 361.356 294.401 358.266 292.495 356.36 cv
cp
.67126 0 .361639 0 cmyk
f
292.495 363.262 mo
290.589 365.168 287.499 365.168 285.593 363.262 cv
292.495 356.36 li
294.401 358.266 294.401 361.356 292.495 363.262 cv
cp
.623468 0 .234043 0 cmyk
f
289.044 356.151 mo
287.026 356.151 285.384 357.793 285.384 359.811 cv
285.384 361.83 287.026 363.472 289.044 363.472 cv
291.062 363.472 292.704 361.83 292.704 359.811 cv
292.704 357.793 291.062 356.151 289.044 356.151 cv
cp
289.044 365.912 mo
285.68 365.912 282.943 363.175 282.943 359.811 cv
282.943 356.448 285.68 353.711 289.044 353.711 cv
292.408 353.711 295.145 356.448 295.145 359.811 cv
295.145 363.175 292.408 365.912 289.044 365.912 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
214.407 424.687 mo
212.501 422.781 209.411 422.781 207.505 424.687 cv
205.599 426.593 205.599 429.683 207.505 431.589 cv
209.411 433.495 212.501 433.495 214.407 431.589 cv
216.313 429.683 216.313 426.593 214.407 424.687 cv
cp
.67126 0 .361639 0 cmyk
f
214.407 431.589 mo
212.501 433.495 209.411 433.495 207.505 431.589 cv
214.407 424.687 li
216.313 426.593 216.313 429.683 214.407 431.589 cv
cp
.623468 0 .234043 0 cmyk
f
210.956 424.478 mo
208.937 424.478 207.296 426.12 207.296 428.138 cv
207.296 430.157 208.937 431.799 210.956 431.799 cv
212.974 431.799 214.616 430.157 214.616 428.138 cv
214.616 426.12 212.974 424.478 210.956 424.478 cv
cp
210.956 434.239 mo
207.592 434.239 204.855 431.502 204.855 428.138 cv
204.855 424.775 207.592 422.038 210.956 422.038 cv
214.32 422.038 217.057 424.775 217.057 428.138 cv
217.057 431.502 214.32 434.239 210.956 434.239 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
292.495 424.687 mo
290.589 422.781 287.499 422.781 285.593 424.687 cv
283.687 426.593 283.687 429.683 285.593 431.589 cv
287.499 433.495 290.589 433.495 292.495 431.589 cv
294.401 429.683 294.401 426.593 292.495 424.687 cv
cp
.67126 0 .361639 0 cmyk
f
292.495 431.589 mo
290.589 433.495 287.499 433.495 285.593 431.589 cv
292.495 424.687 li
294.401 426.593 294.401 429.683 292.495 431.589 cv
cp
.623468 0 .234043 0 cmyk
f
289.044 424.478 mo
287.026 424.478 285.384 426.12 285.384 428.138 cv
285.384 430.157 287.026 431.799 289.044 431.799 cv
291.062 431.799 292.704 430.157 292.704 428.138 cv
292.704 426.12 291.062 424.478 289.044 424.478 cv
cp
289.044 434.239 mo
285.68 434.239 282.943 431.502 282.943 428.138 cv
282.943 424.775 285.68 422.038 289.044 422.038 cv
292.408 422.038 295.145 424.775 295.145 428.138 cv
295.145 431.502 292.408 434.239 289.044 434.239 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
224.168 371.002 mo
222.262 369.096 219.172 369.096 217.266 371.002 cv
215.36 372.908 215.36 375.998 217.266 377.904 cv
219.172 379.81 222.262 379.81 224.168 377.904 cv
226.074 375.998 226.074 372.908 224.168 371.002 cv
cp
.169497 .120851 .124178 0 cmyk
f
224.168 377.904 mo
222.262 379.81 219.172 379.81 217.266 377.904 cv
224.168 371.002 li
226.074 372.908 226.074 375.998 224.168 377.904 cv
cp
0 0 0 0 cmyk
f
220.717 370.793 mo
218.698 370.793 217.057 372.434 217.057 374.453 cv
217.057 376.471 218.698 378.113 220.717 378.113 cv
222.735 378.113 224.377 376.471 224.377 374.453 cv
224.377 372.434 222.735 370.793 220.717 370.793 cv
cp
220.717 380.553 mo
217.353 380.553 214.616 377.816 214.616 374.453 cv
214.616 371.089 217.353 368.352 220.717 368.352 cv
224.081 368.352 226.818 371.089 226.818 374.453 cv
226.818 377.816 224.081 380.553 220.717 380.553 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
282.734 371.002 mo
280.828 369.096 277.738 369.096 275.832 371.002 cv
273.926 372.908 273.926 375.998 275.832 377.904 cv
277.738 379.81 280.828 379.81 282.734 377.904 cv
284.64 375.998 284.64 372.908 282.734 371.002 cv
cp
.169497 .120851 .124178 0 cmyk
f
282.734 377.904 mo
280.828 379.81 277.738 379.81 275.832 377.904 cv
282.734 371.002 li
284.64 372.908 284.64 375.998 282.734 377.904 cv
cp
0 0 0 0 cmyk
f
279.283 370.793 mo
277.265 370.793 275.623 372.434 275.623 374.453 cv
275.623 376.471 277.265 378.113 279.283 378.113 cv
281.301 378.113 282.943 376.471 282.943 374.453 cv
282.943 372.434 281.301 370.793 279.283 370.793 cv
cp
279.283 380.553 mo
275.919 380.553 273.182 377.816 273.182 374.453 cv
273.182 371.089 275.919 368.352 279.283 368.352 cv
282.647 368.352 285.384 371.089 285.384 374.453 cv
285.384 377.816 282.647 380.553 279.283 380.553 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
224.168 410.046 mo
222.262 408.14 219.172 408.14 217.266 410.046 cv
215.36 411.952 215.36 415.042 217.266 416.948 cv
219.172 418.854 222.262 418.854 224.168 416.948 cv
226.074 415.042 226.074 411.952 224.168 410.046 cv
cp
.169497 .120851 .124178 0 cmyk
f
224.168 416.948 mo
222.262 418.854 219.172 418.854 217.266 416.948 cv
224.168 410.046 li
226.074 411.952 226.074 415.042 224.168 416.948 cv
cp
0 0 0 0 cmyk
f
220.717 409.836 mo
218.698 409.836 217.057 411.478 217.057 413.497 cv
217.057 415.515 218.698 417.157 220.717 417.157 cv
222.735 417.157 224.377 415.515 224.377 413.497 cv
224.377 411.478 222.735 409.836 220.717 409.836 cv
cp
220.717 419.598 mo
217.353 419.598 214.616 416.861 214.616 413.497 cv
214.616 410.133 217.353 407.396 220.717 407.396 cv
224.081 407.396 226.818 410.133 226.818 413.497 cv
226.818 416.861 224.081 419.598 220.717 419.598 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
282.734 410.046 mo
280.828 408.14 277.738 408.14 275.832 410.046 cv
273.926 411.952 273.926 415.042 275.832 416.948 cv
277.738 418.854 280.828 418.854 282.734 416.948 cv
284.64 415.042 284.64 411.952 282.734 410.046 cv
cp
.169497 .120851 .124178 0 cmyk
f
282.734 416.948 mo
280.828 418.854 277.738 418.854 275.832 416.948 cv
282.734 410.046 li
284.64 411.952 284.64 415.042 282.734 416.948 cv
cp
0 0 0 0 cmyk
f
279.283 409.836 mo
277.265 409.836 275.623 411.478 275.623 413.497 cv
275.623 415.515 277.265 417.157 279.283 417.157 cv
281.301 417.157 282.943 415.515 282.943 413.497 cv
282.943 411.478 281.301 409.836 279.283 409.836 cv
cp
279.283 419.598 mo
275.919 419.598 273.182 416.861 273.182 413.497 cv
273.182 410.133 275.919 407.396 279.283 407.396 cv
282.647 407.396 285.384 410.133 285.384 413.497 cv
285.384 416.861 282.647 419.598 279.283 419.598 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
253.451 434.448 mo
251.545 432.542 248.455 432.542 246.549 434.448 cv
244.643 436.354 244.643 439.444 246.549 441.35 cv
248.455 443.256 251.545 443.256 253.451 441.35 cv
255.357 439.444 255.357 436.354 253.451 434.448 cv
cp
.67126 0 .361639 0 cmyk
f
253.451 441.35 mo
251.545 443.256 248.455 443.256 246.549 441.35 cv
253.451 434.448 li
255.357 436.354 255.357 439.444 253.451 441.35 cv
cp
.623468 0 .234043 0 cmyk
f
250 434.239 mo
247.981 434.239 246.34 435.881 246.34 437.899 cv
246.34 439.918 247.981 441.56 250 441.56 cv
252.018 441.56 253.66 439.918 253.66 437.899 cv
253.66 435.881 252.018 434.239 250 434.239 cv
cp
250 444 mo
246.636 444 243.899 441.263 243.899 437.899 cv
243.899 434.536 246.636 431.799 250 431.799 cv
253.364 431.799 256.101 434.536 256.101 437.899 cv
256.101 441.263 253.364 444 250 444 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
250 369.572 mo
235.358 369.572 230.478 374.453 230.478 393.975 cv
230.478 407.452 239.218 418.377 250 418.377 cv
250 369.572 li
cp
f
232.918 398.855 mo
230.478 398.855 li
229.13 398.855 228.038 397.763 228.038 396.415 cv
228.038 391.535 li
228.038 390.187 229.13 389.094 230.478 389.094 cv
232.918 389.094 li
232.918 398.855 li
cp
f
250 369.572 mo
264.641 369.572 269.522 374.453 269.522 393.975 cv
269.522 407.452 260.782 418.377 250 418.377 cv
250 369.572 li
cp
f
267.082 398.855 mo
269.522 398.855 li
270.87 398.855 271.962 397.763 271.962 396.415 cv
271.962 391.535 li
271.962 390.187 270.87 389.094 269.522 389.094 cv
267.082 389.094 li
267.082 398.855 li
cp
f
251.22 433.019 mo
248.78 433.019 li
248.78 354.931 li
251.22 354.931 li
251.22 433.019 li
cp
f
411.057 389.094 mo
410.935 389.094 li
410.105 373.625 404.869 369.572 391.535 369.572 cv
378.2 369.572 372.964 373.625 372.135 389.094 cv
372.013 389.094 li
370.665 389.094 369.572 390.187 369.572 391.534 cv
369.572 396.415 li
369.572 397.763 370.665 398.855 372.013 398.855 cv
372.404 398.855 li
374.213 409.994 382.09 418.377 391.535 418.377 cv
400.979 418.377 408.856 409.994 410.665 398.855 cv
411.057 398.855 li
412.404 398.855 413.497 397.763 413.497 396.415 cv
413.497 391.534 li
413.497 390.187 412.404 389.094 411.057 389.094 cv
cp
f
391.535 362.252 mo
374.042 362.252 359.811 376.482 359.811 393.975 cv
359.811 411.468 374.042 425.698 391.535 425.698 cv
409.027 425.698 423.258 411.468 423.258 393.975 cv
423.258 376.482 409.027 362.252 391.535 362.252 cv
cp
391.535 435.459 mo
368.66 435.459 350.05 416.85 350.05 393.975 cv
350.05 371.1 368.66 352.491 391.535 352.491 cv
414.41 352.491 433.019 371.1 433.019 393.975 cv
433.019 416.85 414.41 435.459 391.535 435.459 cv
cp
.67126 0 .361639 0 cmyk
f
380.883 361.501 mo
376.325 347.589 li
381.174 345.999 386.243 345.185 391.39 345.17 cv
391.433 359.811 li
387.823 359.822 384.273 360.39 380.883 361.501 cv
cp
411.52 366.265 mo
408.607 364.158 405.402 362.535 401.994 361.441 cv
406.472 347.5 li
411.349 349.067 415.932 351.387 420.097 354.397 cv
411.52 366.265 li
cp
363.844 373.963 mo
351.985 365.375 li
354.989 361.227 358.608 357.59 362.742 354.566 cv
371.388 366.381 li
368.488 368.504 365.95 371.055 363.844 373.963 cv
cp
423.998 383.293 mo
422.879 379.893 421.233 376.699 419.109 373.801 cv
430.917 365.143 li
433.954 369.286 436.305 373.852 437.905 378.717 cv
423.998 383.293 li
cp
342.73 394.056 mo
342.73 393.975 li
342.73 388.861 343.518 383.819 345.074 378.991 cv
359.011 383.483 li
357.923 386.858 357.371 390.387 357.371 393.975 cv
342.73 394.056 li
cp
437.965 409.049 mo
424.038 404.531 li
425.139 401.136 425.698 397.584 425.698 393.975 cv
425.697 393.81 li
440.338 393.853 li
440.34 399.121 439.54 404.193 437.965 409.049 cv
cp
352.096 422.729 mo
349.066 418.579 346.725 414.008 345.134 409.141 cv
359.051 404.594 li
360.163 407.994 361.801 411.191 363.921 414.095 cv
352.096 422.729 li
cp
420.249 433.442 mo
411.627 421.608 li
414.531 419.493 417.075 416.946 419.188 414.041 cv
431.029 422.654 li
428.016 426.797 424.389 430.426 420.249 433.442 cv
cp
376.505 440.419 mo
371.634 438.844 367.055 436.515 362.895 433.497 cv
371.493 421.646 li
374.405 423.758 377.607 425.387 381.011 426.488 cv
376.505 440.419 li
cp
391.583 442.78 mo
391.567 428.138 li
395.177 428.135 398.728 427.572 402.121 426.469 cv
406.651 440.391 li
401.798 441.971 396.728 442.774 391.583 442.78 cv
cp
f
65.761 436.679 mo
151.17 436.679 li
151.17 351.27 li
65.761 351.27 li
65.761 436.679 li
cp
153.61 439.12 mo
63.3208 439.12 li
63.3208 348.83 li
153.61 348.83 li
153.61 439.12 li
cp
.779202 .591241 .502647 .329534 cmyk
f
67.9919 346.599 mo
66.0859 344.693 62.9958 344.693 61.0898 346.599 cv
59.1839 348.505 59.1839 351.595 61.0898 353.501 cv
62.9958 355.407 66.0859 355.407 67.9919 353.501 cv
69.8979 351.595 69.8979 348.505 67.9919 346.599 cv
cp
.67126 0 .361639 0 cmyk
f
67.9919 353.501 mo
66.0859 355.407 62.9958 355.407 61.0898 353.501 cv
67.9919 346.599 li
69.8979 348.505 69.8979 351.595 67.9919 353.501 cv
cp
.623468 0 .234043 0 cmyk
f
64.5409 346.39 mo
62.5224 346.39 60.8805 348.032 60.8805 350.05 cv
60.8805 352.069 62.5224 353.711 64.5409 353.711 cv
66.5593 353.711 68.2013 352.069 68.2013 350.05 cv
68.2013 348.032 66.5593 346.39 64.5409 346.39 cv
cp
64.5409 356.151 mo
61.1772 356.151 58.4403 353.414 58.4403 350.05 cv
58.4403 346.687 61.1772 343.95 64.5409 343.95 cv
67.9046 343.95 70.6415 346.687 70.6415 350.05 cv
70.6415 353.414 67.9046 356.151 64.5409 356.151 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
155.841 346.599 mo
153.935 344.693 150.845 344.693 148.939 346.599 cv
147.033 348.505 147.033 351.595 148.939 353.501 cv
150.845 355.407 153.935 355.407 155.841 353.501 cv
157.747 351.595 157.747 348.505 155.841 346.599 cv
cp
.67126 0 .361639 0 cmyk
f
155.841 353.501 mo
153.935 355.407 150.845 355.407 148.939 353.501 cv
155.841 346.599 li
157.747 348.505 157.747 351.595 155.841 353.501 cv
cp
.623468 0 .234043 0 cmyk
f
152.39 346.39 mo
150.371 346.39 148.73 348.032 148.73 350.05 cv
148.73 352.069 150.371 353.711 152.39 353.711 cv
154.408 353.711 156.05 352.069 156.05 350.05 cv
156.05 348.032 154.408 346.39 152.39 346.39 cv
cp
152.39 356.151 mo
149.026 356.151 146.289 353.414 146.289 350.05 cv
146.289 346.687 149.026 343.95 152.39 343.95 cv
155.754 343.95 158.491 346.687 158.491 350.05 cv
158.491 353.414 155.754 356.151 152.39 356.151 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
69.212 433.228 mo
67.3061 431.322 64.2159 431.322 62.31 433.228 cv
60.404 435.134 60.404 438.224 62.31 440.13 cv
64.2159 442.036 67.3061 442.036 69.212 440.13 cv
71.118 438.224 71.118 435.134 69.212 433.228 cv
cp
.67126 0 .361639 0 cmyk
f
69.212 440.13 mo
67.306 442.036 64.2159 442.036 62.31 440.13 cv
69.212 433.228 li
71.118 435.134 71.118 438.224 69.212 440.13 cv
cp
.623468 0 .234043 0 cmyk
f
65.761 433.019 mo
63.7426 433.019 62.1006 434.661 62.1006 436.679 cv
62.1006 438.698 63.7426 440.34 65.761 440.34 cv
67.7795 440.34 69.4214 438.698 69.4214 436.679 cv
69.4214 434.661 67.7795 433.019 65.761 433.019 cv
cp
65.761 442.78 mo
62.3973 442.78 59.6604 440.043 59.6604 436.679 cv
59.6604 433.316 62.3973 430.579 65.761 430.579 cv
69.1247 430.579 71.8616 433.316 71.8616 436.679 cv
71.8616 440.043 69.1247 442.78 65.761 442.78 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
155.841 434.448 mo
153.935 432.542 150.845 432.542 148.939 434.448 cv
147.033 436.354 147.033 439.444 148.939 441.35 cv
150.845 443.256 153.935 443.256 155.841 441.35 cv
157.747 439.444 157.747 436.354 155.841 434.448 cv
cp
.67126 0 .361639 0 cmyk
f
155.841 441.35 mo
153.935 443.256 150.845 443.256 148.939 441.35 cv
155.841 434.448 li
157.747 436.354 157.747 439.444 155.841 441.35 cv
cp
.623468 0 .234043 0 cmyk
f
152.39 434.239 mo
150.371 434.239 148.73 435.881 148.73 437.899 cv
148.73 439.918 150.371 441.56 152.39 441.56 cv
154.408 441.56 156.05 439.918 156.05 437.899 cv
156.05 435.881 154.408 434.239 152.39 434.239 cv
cp
152.39 444 mo
149.026 444 146.289 441.263 146.289 437.899 cv
146.289 434.536 149.026 431.799 152.39 431.799 cv
155.754 431.799 158.491 434.536 158.491 437.899 cv
158.491 441.263 155.754 444 152.39 444 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
144.886 395.768 mo
136.797 401.515 li
121.142 412.606 95.7883 412.606 80.1341 401.515 cv
72.0447 395.768 li
80.1341 390.022 li
83.953 387.313 88.3333 385.275 93.0186 383.897 cv
102.877 380.968 114.054 380.968 123.912 383.897 cv
128.597 385.275 132.978 387.313 136.797 390.022 cv
144.886 395.768 li
cp
.623468 0 .234043 0 cmyk
f
125.633 391.376 mo
125.633 400.868 117.946 408.555 108.465 408.555 cv
98.985 408.555 91.2982 400.868 91.2982 391.376 cv
91.2982 388.704 91.9083 386.166 93.0186 383.897 cv
102.877 380.968 114.054 380.968 123.912 383.897 cv
125.022 386.166 125.633 388.704 125.633 391.376 cv
cp
.67126 0 .361639 0 cmyk
f
114.188 391.382 mo
114.188 394.543 111.626 397.105 108.465 397.105 cv
105.305 397.105 102.742 394.543 102.742 391.382 cv
102.742 388.221 105.305 385.659 108.465 385.659 cv
111.626 385.659 114.188 388.221 114.188 391.382 cv
cp
.779202 .591241 .502647 .329534 cmyk
f
72.7505 396.763 mo
71.3386 394.773 li
79.432 389.031 li
95.4408 377.673 121.49 377.672 137.499 389.031 cv
145.592 394.773 li
144.179 396.763 li
136.086 391.021 li
120.856 380.214 96.0741 380.214 80.844 391.021 cv
72.7505 396.763 li
cp
f
145.807 392.484 mo
137.36 386.954 li
121.428 376.525 95.5028 376.525 79.5708 386.954 cv
71.1241 392.484 li
69.7872 390.442 li
78.2339 384.912 li
94.9034 374.001 122.029 374 138.697 384.912 cv
147.144 390.442 li
145.807 392.484 li
cp
f
100.275 388.202 mo
100.275 390.068 98.7625 391.58 96.8969 391.58 cv
95.0312 391.58 93.5189 390.068 93.5189 388.202 cv
93.5189 386.336 95.0312 384.824 96.8969 384.824 cv
98.7625 384.824 100.275 386.336 100.275 388.202 cv
cp
0 0 0 0 cmyk
f
177.12 478.897 mo
177.12 479.336 177.188 479.71 177.325 480.019 cv
177.461 480.327 177.648 480.559 177.886 480.716 cv
178.123 480.872 178.382 480.951 178.663 480.951 cv
178.948 480.951 179.208 480.877 179.444 480.728 cv
179.679 480.58 179.867 480.352 180.008 480.046 cv
180.148 479.739 180.218 479.354 180.218 478.897 cv
180.218 478.465 180.148 478.094 180.008 477.782 cv
179.867 477.472 179.678 477.235 179.438 477.071 cv
179.198 476.907 178.936 476.825 178.652 476.825 cv
178.355 476.825 178.09 476.909 177.856 477.077 cv
177.622 477.245 177.442 477.486 177.313 477.801 cv
177.184 478.115 177.12 478.48 177.12 478.897 cv
cp
180.308 481.277 mo
180.308 481.116 li
180.09 481.365 179.875 481.569 179.664 481.724 cv
179.452 481.881 179.222 482 178.975 482.08 cv
178.728 482.163 178.458 482.202 178.165 482.202 cv
177.777 482.202 177.417 482.121 177.087 481.957 cv
176.757 481.792 176.471 481.558 176.23 481.253 cv
175.988 480.949 175.805 480.591 175.68 480.178 cv
175.556 479.767 175.493 479.322 175.493 478.843 cv
175.493 477.83 175.741 477.04 176.235 476.474 cv
176.73 475.908 177.381 475.625 178.189 475.625 cv
178.655 475.625 179.049 475.706 179.37 475.866 cv
179.69 476.026 180.003 476.273 180.308 476.604 cv
180.308 474.213 li
180.308 473.88 180.374 473.629 180.507 473.458 cv
180.639 473.289 180.828 473.203 181.073 473.203 cv
181.319 473.203 181.507 473.281 181.64 473.438 cv
181.773 473.595 181.839 473.825 181.839 474.13 cv
181.839 481.277 li
181.839 481.586 181.768 481.817 181.625 481.972 cv
181.483 482.125 181.299 482.202 181.073 482.202 cv
180.852 482.202 180.669 482.123 180.524 481.963 cv
180.38 481.802 180.308 481.574 180.308 481.277 cv
cp
.67126 0 .361639 0 cmyk
f
184.284 478.386 mo
187.223 478.386 li
187.184 477.832 187.033 477.417 186.774 477.143 cv
186.515 476.867 186.174 476.73 185.751 476.73 cv
185.347 476.73 185.015 476.869 184.756 477.147 cv
184.497 477.427 184.34 477.84 184.284 478.386 cv
cp
187.454 479.307 mo
184.284 479.307 li
184.288 479.674 184.362 479.999 184.507 480.28 cv
184.651 480.561 184.843 480.773 185.083 480.915 cv
185.322 481.057 185.586 481.128 185.875 481.128 cv
186.069 481.128 186.246 481.106 186.406 481.061 cv
186.567 481.015 186.722 480.944 186.873 480.846 cv
187.023 480.75 187.161 480.646 187.288 480.535 cv
187.414 480.424 187.578 480.272 187.781 480.083 cv
187.864 480.012 187.983 479.976 188.137 479.976 cv
188.303 479.976 188.438 480.022 188.54 480.114 cv
188.643 480.205 188.695 480.332 188.695 480.5 cv
188.695 480.646 188.637 480.816 188.523 481.012 cv
188.407 481.209 188.234 481.397 188.003 481.576 cv
187.771 481.757 187.481 481.906 187.13 482.024 cv
186.781 482.144 186.378 482.202 185.922 482.202 cv
184.882 482.202 184.072 481.906 183.495 481.313 cv
182.917 480.719 182.628 479.914 182.628 478.897 cv
182.628 478.417 182.699 477.973 182.842 477.564 cv
182.984 477.154 183.192 476.803 183.465 476.51 cv
183.738 476.217 184.074 475.993 184.474 475.836 cv
184.874 475.68 185.317 475.602 185.804 475.602 cv
186.437 475.602 186.98 475.735 187.433 476.003 cv
187.886 476.27 188.226 476.615 188.451 477.038 cv
188.676 477.461 188.79 477.893 188.79 478.332 cv
188.79 478.74 188.673 479.004 188.44 479.125 cv
188.207 479.246 187.878 479.307 187.454 479.307 cv
cp
f
194.838 480.083 mo
194.838 480.53 194.73 480.913 194.512 481.232 cv
194.294 481.551 193.973 481.792 193.547 481.957 cv
193.122 482.121 192.604 482.202 191.995 482.202 cv
191.413 482.202 190.914 482.113 190.499 481.935 cv
190.083 481.758 189.776 481.535 189.579 481.269 cv
189.381 481 189.282 480.733 189.282 480.463 cv
189.282 480.285 189.345 480.133 189.472 480.006 cv
189.599 479.881 189.759 479.817 189.953 479.817 cv
190.123 479.817 190.253 479.859 190.344 479.942 cv
190.436 480.025 190.523 480.142 190.605 480.291 cv
190.772 480.581 190.971 480.795 191.203 480.939 cv
191.434 481.081 191.749 481.153 192.149 481.153 cv
192.474 481.153 192.74 481.079 192.948 480.935 cv
193.155 480.79 193.259 480.625 193.259 480.44 cv
193.259 480.154 193.152 479.948 192.936 479.817 cv
192.72 479.687 192.365 479.561 191.87 479.442 cv
191.312 479.304 190.858 479.158 190.508 479.005 cv
190.157 478.854 189.877 478.653 189.668 478.404 cv
189.458 478.155 189.353 477.847 189.353 477.483 cv
189.353 477.16 189.45 476.852 189.644 476.563 cv
189.838 476.275 190.124 476.044 190.502 475.872 cv
190.88 475.7 191.336 475.613 191.87 475.613 cv
192.29 475.613 192.667 475.657 193.001 475.745 cv
193.335 475.83 193.615 475.949 193.838 476.095 cv
194.062 476.24 194.232 476.403 194.348 476.581 cv
194.465 476.759 194.523 476.933 194.523 477.104 cv
194.523 477.289 194.461 477.442 194.337 477.561 cv
194.212 477.678 194.035 477.74 193.805 477.74 cv
193.639 477.74 193.497 477.692 193.381 477.595 cv
193.264 477.501 193.131 477.359 192.98 477.169 cv
192.857 477.011 192.714 476.884 192.547 476.789 cv
192.381 476.693 192.155 476.647 191.87 476.647 cv
191.577 476.647 191.334 476.708 191.14 476.834 cv
190.946 476.958 190.849 477.113 190.849 477.299 cv
190.849 477.47 190.92 477.609 191.062 477.718 cv
191.205 477.827 191.397 477.918 191.639 477.989 cv
191.88 478.059 192.212 478.146 192.636 478.249 cv
193.138 478.372 193.549 478.518 193.868 478.688 cv
194.186 478.858 194.427 479.059 194.592 479.291 cv
194.756 479.523 194.838 479.787 194.838 480.083 cv
cp
f
197.295 476.533 mo
197.295 481.217 li
197.295 481.542 197.218 481.787 197.064 481.953 cv
196.909 482.119 196.714 482.202 196.476 482.202 cv
196.238 482.202 196.045 482.118 195.897 481.947 cv
195.748 481.778 195.675 481.533 195.675 481.217 cv
195.675 476.581 li
195.675 476.261 195.748 476.02 195.897 475.857 cv
196.045 475.695 196.238 475.613 196.476 475.613 cv
196.714 475.613 196.909 475.695 197.064 475.857 cv
197.218 476.02 197.295 476.245 197.295 476.533 cv
cp
196.494 474.86 mo
196.268 474.86 196.075 474.79 195.915 474.652 cv
195.755 474.514 195.675 474.318 195.675 474.064 cv
195.675 473.835 195.757 473.646 195.921 473.498 cv
196.085 473.349 196.276 473.274 196.494 473.274 cv
196.704 473.274 196.889 473.341 197.052 473.477 cv
197.214 473.611 197.295 473.806 197.295 474.064 cv
197.295 474.314 197.216 474.508 197.057 474.649 cv
196.899 474.789 196.711 474.86 196.494 474.86 cv
cp
f
199.699 478.855 mo
199.699 479.512 199.842 480.009 200.129 480.344 cv
200.416 480.681 200.787 480.85 201.242 480.85 cv
201.511 480.85 201.765 480.777 202.005 480.633 cv
202.244 480.489 202.439 480.27 202.59 479.979 cv
202.74 479.689 202.815 479.336 202.815 478.92 cv
202.815 478.26 202.67 477.744 202.379 477.377 cv
202.088 477.01 201.705 476.825 201.23 476.825 cv
200.767 476.825 200.396 477.001 200.117 477.354 cv
199.838 477.705 199.699 478.206 199.699 478.855 cv
cp
204.395 476.801 mo
204.395 481.508 li
204.395 482.046 204.337 482.51 204.222 482.898 cv
204.108 483.285 203.923 483.606 203.67 483.859 cv
203.417 484.112 203.085 484.301 202.676 484.423 cv
202.266 484.546 201.757 484.607 201.147 484.607 cv
200.589 484.607 200.09 484.529 199.651 484.373 cv
199.212 484.215 198.874 484.014 198.636 483.767 cv
198.399 483.52 198.28 483.266 198.28 483.004 cv
198.28 482.807 198.347 482.644 198.482 482.521 cv
198.616 482.395 198.779 482.333 198.968 482.333 cv
199.206 482.333 199.414 482.438 199.592 482.648 cv
199.678 482.754 199.768 482.863 199.862 482.971 cv
199.955 483.081 200.058 483.174 200.17 483.251 cv
200.283 483.328 200.419 483.385 200.577 483.423 cv
200.735 483.46 200.918 483.479 201.123 483.479 cv
201.543 483.479 201.868 483.421 202.1 483.303 cv
202.332 483.188 202.494 483.024 202.587 482.814 cv
202.68 482.605 202.734 482.381 202.75 482.14 cv
202.766 481.901 202.778 481.516 202.785 480.985 cv
202.536 481.335 202.249 481.599 201.922 481.781 cv
201.595 481.963 201.206 482.055 200.755 482.055 cv
200.213 482.055 199.739 481.916 199.333 481.638 cv
198.928 481.361 198.616 480.974 198.399 480.475 cv
198.181 479.976 198.073 479.401 198.073 478.748 cv
198.073 478.262 198.139 477.821 198.271 477.431 cv
198.404 477.038 198.593 476.708 198.838 476.438 cv
199.083 476.17 199.366 475.967 199.687 475.83 cv
200.007 475.694 200.359 475.625 200.744 475.625 cv
201.202 475.625 201.6 475.714 201.937 475.889 cv
202.273 476.066 202.586 476.342 202.875 476.718 cv
202.875 476.498 li
202.875 476.217 202.944 476 203.082 475.845 cv
203.221 475.691 203.399 475.613 203.617 475.613 cv
203.929 475.613 204.137 475.716 204.24 475.919 cv
204.343 476.123 204.395 476.417 204.395 476.801 cv
cp
f
206.97 476.51 mo
206.97 476.706 li
207.254 476.33 207.566 476.054 207.905 475.878 cv
208.243 475.702 208.632 475.613 209.071 475.613 cv
209.499 475.613 209.88 475.707 210.217 475.893 cv
210.553 476.079 210.805 476.342 210.971 476.681 cv
211.078 476.88 211.147 477.094 211.178 477.323 cv
211.21 477.553 211.227 477.846 211.227 478.202 cv
211.227 481.217 li
211.227 481.542 211.152 481.787 211.004 481.953 cv
210.855 482.119 210.662 482.202 210.425 482.202 cv
210.183 482.202 209.988 482.118 209.837 481.947 cv
209.686 481.778 209.612 481.533 209.612 481.217 cv
209.612 478.516 li
209.612 477.982 209.537 477.573 209.389 477.29 cv
209.24 477.008 208.945 476.865 208.501 476.865 cv
208.213 476.865 207.949 476.952 207.712 477.124 cv
207.474 477.296 207.3 477.533 207.189 477.833 cv
207.11 478.075 207.071 478.526 207.071 479.187 cv
207.071 481.217 li
207.071 481.546 206.994 481.792 206.842 481.957 cv
206.69 482.121 206.493 482.202 206.252 482.202 cv
206.018 482.202 205.827 482.118 205.676 481.947 cv
205.526 481.778 205.45 481.533 205.45 481.217 cv
205.45 476.533 li
205.45 476.225 205.517 475.994 205.652 475.841 cv
205.787 475.69 205.971 475.613 206.204 475.613 cv
206.347 475.613 206.475 475.647 206.59 475.714 cv
206.705 475.783 206.797 475.883 206.866 476.017 cv
206.936 476.151 206.97 476.316 206.97 476.51 cv
cp
f
213.659 478.386 mo
216.598 478.386 li
216.558 477.832 216.409 477.417 216.15 477.143 cv
215.89 476.867 215.549 476.73 215.126 476.73 cv
214.722 476.73 214.39 476.869 214.131 477.147 cv
213.872 477.427 213.715 477.84 213.659 478.386 cv
cp
216.829 479.307 mo
213.659 479.307 li
213.664 479.674 213.737 479.999 213.882 480.28 cv
214.027 480.561 214.218 480.773 214.458 480.915 cv
214.697 481.057 214.961 481.128 215.25 481.128 cv
215.444 481.128 215.621 481.106 215.782 481.061 cv
215.942 481.015 216.097 480.944 216.248 480.846 cv
216.398 480.75 216.536 480.646 216.664 480.535 cv
216.79 480.424 216.954 480.272 217.156 480.083 cv
217.239 480.012 217.358 479.976 217.512 479.976 cv
217.678 479.976 217.813 480.022 217.916 480.114 cv
218.019 480.205 218.07 480.332 218.07 480.5 cv
218.07 480.646 218.013 480.816 217.898 481.012 cv
217.783 481.209 217.61 481.397 217.378 481.576 cv
217.146 481.757 216.856 481.906 216.506 482.024 cv
216.156 482.144 215.753 482.202 215.298 482.202 cv
214.257 482.202 213.448 481.906 212.869 481.313 cv
212.292 480.719 212.003 479.914 212.003 478.897 cv
212.003 478.417 212.074 477.973 212.217 477.564 cv
212.359 477.154 212.567 476.803 212.84 476.51 cv
213.113 476.217 213.45 475.993 213.849 475.836 cv
214.249 475.68 214.693 475.602 215.179 475.602 cv
215.812 475.602 216.355 475.735 216.808 476.003 cv
217.261 476.27 217.601 476.615 217.827 477.038 cv
218.052 477.461 218.165 477.893 218.165 478.332 cv
218.165 478.74 218.049 479.004 217.815 479.125 cv
217.582 479.246 217.253 479.307 216.829 479.307 cv
cp
f
220.248 478.897 mo
220.248 479.336 220.316 479.71 220.452 480.019 cv
220.589 480.327 220.776 480.559 221.014 480.716 cv
221.251 480.872 221.51 480.951 221.791 480.951 cv
222.076 480.951 222.337 480.877 222.572 480.728 cv
222.807 480.58 222.995 480.352 223.135 480.046 cv
223.276 479.739 223.346 479.354 223.346 478.897 cv
223.346 478.465 223.276 478.094 223.135 477.782 cv
222.995 477.472 222.805 477.235 222.566 477.071 cv
222.326 476.907 222.064 476.825 221.779 476.825 cv
221.483 476.825 221.217 476.909 220.984 477.077 cv
220.751 477.245 220.569 477.486 220.44 477.801 cv
220.312 478.115 220.248 478.48 220.248 478.897 cv
cp
223.435 481.277 mo
223.435 481.116 li
223.218 481.365 223.003 481.569 222.791 481.724 cv
222.579 481.881 222.35 482 222.103 482.08 cv
221.856 482.163 221.586 482.202 221.293 482.202 cv
220.904 482.202 220.545 482.121 220.215 481.957 cv
219.885 481.792 219.599 481.558 219.357 481.253 cv
219.116 480.949 218.933 480.591 218.808 480.178 cv
218.684 479.767 218.621 479.322 218.621 478.843 cv
218.621 477.83 218.869 477.04 219.363 476.474 cv
219.858 475.908 220.509 475.625 221.316 475.625 cv
221.783 475.625 222.177 475.706 222.498 475.866 cv
222.818 476.026 223.131 476.273 223.435 476.604 cv
223.435 474.213 li
223.435 473.88 223.502 473.629 223.634 473.458 cv
223.767 473.289 223.956 473.203 224.201 473.203 cv
224.447 473.203 224.635 473.281 224.768 473.438 cv
224.901 473.595 224.967 473.825 224.967 474.13 cv
224.967 481.277 li
224.967 481.586 224.896 481.817 224.754 481.972 cv
224.611 482.125 224.427 482.202 224.201 482.202 cv
223.98 482.202 223.797 482.123 223.652 481.963 cv
223.508 481.802 223.435 481.574 223.435 481.277 cv
cp
f
230.136 478.944 mo
230.136 479.589 230.284 480.085 230.578 480.43 cv
230.873 480.777 231.26 480.951 231.739 480.951 cv
232.146 480.951 232.498 480.774 232.792 480.419 cv
233.087 480.065 233.235 479.557 233.235 478.897 cv
233.235 478.469 233.174 478.101 233.051 477.792 cv
232.928 477.483 232.754 477.245 232.529 477.077 cv
232.303 476.909 232.04 476.825 231.739 476.825 cv
231.43 476.825 231.155 476.909 230.914 477.077 cv
230.672 477.245 230.483 477.488 230.344 477.807 cv
230.206 478.125 230.136 478.505 230.136 478.944 cv
cp
230.059 474.13 mo
230.059 476.604 li
230.364 476.288 230.674 476.045 230.991 475.878 cv
231.307 475.71 231.7 475.625 232.167 475.625 cv
232.705 475.625 233.176 475.753 233.583 476.007 cv
233.988 476.264 234.302 476.634 234.526 477.118 cv
234.75 477.603 234.862 478.178 234.862 478.843 cv
234.862 479.334 234.799 479.783 234.675 480.193 cv
234.55 480.603 234.369 480.958 234.132 481.259 cv
233.894 481.559 233.606 481.792 233.268 481.957 cv
232.929 482.121 232.556 482.202 232.149 482.202 cv
231.899 482.202 231.665 482.173 231.445 482.113 cv
231.225 482.055 231.038 481.977 230.884 481.879 cv
230.73 481.783 230.599 481.682 230.49 481.58 cv
230.381 481.477 230.237 481.322 230.059 481.116 cv
230.059 481.277 li
230.059 481.581 229.986 481.812 229.839 481.969 cv
229.693 482.125 229.507 482.202 229.281 482.202 cv
229.052 482.202 228.869 482.125 228.732 481.969 cv
228.596 481.812 228.528 481.581 228.528 481.277 cv
228.528 474.201 li
228.528 473.872 228.594 473.623 228.726 473.456 cv
228.859 473.288 229.044 473.203 229.281 473.203 cv
229.531 473.203 229.723 473.284 229.857 473.444 cv
229.992 473.605 230.059 473.832 230.059 474.13 cv
cp
f
236.963 482.405 mo
237.111 482.042 li
235.116 477.021 li
234.994 476.732 234.932 476.521 234.932 476.391 cv
234.932 476.253 234.968 476.125 235.039 476.006 cv
235.111 475.886 235.208 475.791 235.333 475.72 cv
235.458 475.648 235.587 475.613 235.722 475.613 cv
235.955 475.613 236.131 475.688 236.25 475.836 cv
236.369 475.984 236.474 476.197 236.565 476.474 cv
237.936 480.463 li
239.236 476.753 li
239.339 476.453 239.432 476.217 239.515 476.046 cv
239.598 475.877 239.686 475.762 239.779 475.703 cv
239.872 475.644 240.004 475.613 240.174 475.613 cv
240.297 475.613 240.415 475.646 240.527 475.712 cv
240.64 475.777 240.727 475.865 240.788 475.976 cv
240.849 476.087 240.881 476.203 240.881 476.326 cv
240.864 476.4 240.839 476.508 240.803 476.647 cv
240.767 476.785 240.724 476.927 240.673 477.068 cv
238.56 482.6 li
238.377 483.087 238.199 483.468 238.025 483.745 cv
237.851 484.022 237.621 484.236 237.333 484.384 cv
237.046 484.533 236.66 484.607 236.173 484.607 cv
235.698 484.607 235.342 484.556 235.105 484.453 cv
234.867 484.35 234.749 484.162 234.749 483.888 cv
234.749 483.703 234.805 483.559 234.918 483.458 cv
235.03 483.357 235.198 483.306 235.419 483.306 cv
235.506 483.306 235.592 483.318 235.675 483.343 cv
235.777 483.366 235.866 483.378 235.941 483.378 cv
236.127 483.378 236.274 483.351 236.381 483.295 cv
236.488 483.24 236.583 483.144 236.669 483.007 cv
236.754 482.871 236.852 482.67 236.963 482.405 cv
cp
f
260.439 475.753 mo
260.826 475.753 li
260.826 475.268 li
260.826 474.759 260.888 474.357 261.018 474.057 cv
261.145 473.758 261.365 473.54 261.672 473.404 cv
261.979 473.268 262.398 473.2 262.932 473.2 cv
263.882 473.2 264.353 473.429 264.353 473.896 cv
264.353 474.044 264.303 474.174 264.203 474.28 cv
264.106 474.386 263.988 474.44 263.854 474.44 cv
263.791 474.44 263.68 474.429 263.524 474.403 cv
263.376 474.383 263.242 474.368 263.135 474.368 cv
262.843 474.368 262.656 474.456 262.569 474.628 cv
262.49 474.8 262.447 475.046 262.447 475.368 cv
262.447 475.753 li
262.843 475.753 li
263.462 475.753 263.768 475.939 263.768 476.314 cv
263.768 476.575 263.689 476.745 263.523 476.817 cv
263.359 476.887 263.133 476.923 262.843 476.923 cv
262.447 476.923 li
262.447 481.217 li
262.447 481.537 262.372 481.78 262.217 481.947 cv
262.065 482.118 261.87 482.201 261.627 482.201 cv
261.398 482.201 261.208 482.118 261.053 481.947 cv
260.901 481.78 260.826 481.537 260.826 481.217 cv
260.826 476.923 li
260.379 476.923 li
260.137 476.923 259.953 476.87 259.822 476.759 cv
259.691 476.653 259.625 476.51 259.625 476.336 cv
259.625 475.946 259.896 475.753 260.439 475.753 cv
f
265.746 479.862 mo
265.746 481.217 li
265.746 481.544 265.663 481.792 265.511 481.955 cv
265.357 482.121 265.162 482.201 264.925 482.201 cv
264.687 482.201 264.496 482.119 264.347 481.951 cv
264.199 481.786 264.121 481.541 264.121 481.217 cv
264.121 476.703 li
264.121 475.974 264.383 475.611 264.909 475.611 cv
265.18 475.611 265.373 475.695 265.493 475.866 cv
265.611 476.037 265.677 476.287 265.691 476.62 cv
265.884 476.287 266.081 476.037 266.284 475.866 cv
266.492 475.695 266.76 475.611 267.102 475.611 cv
267.445 475.611 267.772 475.695 268.093 475.866 cv
268.415 476.037 268.575 476.264 268.575 476.543 cv
268.575 476.74 268.506 476.906 268.371 477.031 cv
268.233 477.162 268.087 477.227 267.93 477.227 cv
267.867 477.227 267.723 477.188 267.497 477.115 cv
267.269 477.044 267.066 477.006 266.896 477.006 cv
266.658 477.006 266.462 477.071 266.313 477.193 cv
266.162 477.321 266.044 477.503 265.961 477.747 cv
265.88 477.993 265.824 478.288 265.79 478.625 cv
265.759 478.963 265.746 479.376 265.746 479.862 cv
f
270.024 478.383 mo
272.962 478.383 li
272.923 477.83 272.777 477.415 272.517 477.141 cv
272.256 476.865 271.918 476.729 271.492 476.729 cv
271.087 476.729 270.755 476.867 270.497 477.147 cv
270.238 477.426 270.079 477.837 270.024 478.383 cv
273.196 479.304 mo
270.024 479.304 li
270.03 479.672 270.102 479.999 270.246 480.279 cv
270.393 480.558 270.583 480.771 270.824 480.915 cv
271.064 481.056 271.327 481.127 271.617 481.127 cv
271.811 481.127 271.987 481.106 272.148 481.057 cv
272.307 481.013 272.463 480.941 272.613 480.844 cv
272.765 480.749 272.901 480.645 273.028 480.531 cv
273.155 480.423 273.32 480.271 273.523 480.082 cv
273.607 480.011 273.725 479.973 273.878 479.973 cv
274.045 479.973 274.178 480.02 274.283 480.113 cv
274.387 480.204 274.436 480.331 274.436 480.498 cv
274.436 480.645 274.38 480.816 274.269 481.01 cv
274.151 481.209 273.979 481.396 273.746 481.576 cv
273.512 481.754 273.221 481.906 272.872 482.023 cv
272.523 482.141 272.119 482.201 271.665 482.201 cv
270.621 482.201 269.813 481.906 269.236 481.313 cv
268.658 480.718 268.367 479.911 268.367 478.896 cv
268.367 478.416 268.44 477.971 268.584 477.561 cv
268.724 477.15 268.932 476.801 269.208 476.507 cv
269.48 476.212 269.814 475.989 270.216 475.833 cv
270.614 475.677 271.057 475.598 271.545 475.598 cv
272.178 475.598 272.721 475.733 273.175 476.003 cv
273.627 476.266 273.971 476.613 274.193 477.036 cv
274.419 477.461 274.531 477.891 274.531 478.333 cv
274.531 478.738 274.414 479.002 274.181 479.124 cv
273.948 479.245 273.619 479.304 273.196 479.304 cv
f
276.767 478.383 mo
279.706 478.383 li
279.665 477.83 279.515 477.415 279.259 477.141 cv
278.995 476.865 278.657 476.729 278.232 476.729 cv
277.828 476.729 277.497 476.867 277.236 477.147 cv
276.979 477.426 276.82 477.837 276.767 478.383 cv
279.938 479.304 mo
276.767 479.304 li
276.771 479.672 276.846 479.999 276.988 480.279 cv
277.134 480.558 277.325 480.771 277.565 480.915 cv
277.804 481.056 278.067 481.127 278.359 481.127 cv
278.551 481.127 278.729 481.106 278.887 481.057 cv
279.049 481.013 279.203 480.941 279.355 480.844 cv
279.507 480.749 279.643 480.645 279.77 480.531 cv
279.895 480.423 280.061 480.271 280.263 480.082 cv
280.348 480.011 280.467 479.973 280.619 479.973 cv
280.786 479.973 280.92 480.02 281.025 480.113 cv
281.128 480.204 281.175 480.331 281.175 480.498 cv
281.175 480.645 281.12 480.816 281.004 481.01 cv
280.893 481.209 280.72 481.396 280.486 481.576 cv
280.254 481.754 279.961 481.906 279.613 482.023 cv
279.265 482.141 278.858 482.201 278.404 482.201 cv
277.362 482.201 276.555 481.906 275.975 481.313 cv
275.398 480.718 275.107 479.911 275.107 478.896 cv
275.107 478.416 275.179 477.971 275.325 477.561 cv
275.466 477.15 275.674 476.801 275.947 476.507 cv
276.219 476.212 276.555 475.989 276.955 475.833 cv
277.355 475.677 277.8 475.598 278.286 475.598 cv
278.917 475.598 279.46 475.733 279.919 476.003 cv
280.37 476.266 280.71 476.613 280.932 477.036 cv
281.157 477.461 281.273 477.891 281.273 478.333 cv
281.273 478.738 281.153 479.002 280.923 479.124 cv
280.688 479.245 280.36 479.304 279.938 479.304 cv
f
286.665 478.877 mo
286.665 478.449 286.599 478.081 286.468 477.775 cv
286.338 477.467 286.157 477.233 285.928 477.071 cv
285.698 476.906 285.438 476.823 285.157 476.823 cv
284.711 476.823 284.333 477 284.027 477.35 cv
283.719 477.704 283.564 478.222 283.564 478.908 cv
283.564 479.55 283.717 480.054 284.024 480.412 cv
284.328 480.771 284.703 480.949 285.157 480.949 cv
285.425 480.949 285.676 480.869 285.906 480.716 cv
286.138 480.558 286.321 480.324 286.457 480.011 cv
286.595 479.698 286.665 479.319 286.665 478.877 cv
283.487 476.522 mo
283.487 476.717 li
283.791 476.341 284.109 476.065 284.441 475.889 cv
284.764 475.711 285.139 475.622 285.554 475.622 cv
286.051 475.622 286.513 475.752 286.933 476.007 cv
287.353 476.266 287.683 476.642 287.927 477.136 cv
288.17 477.633 288.293 478.218 288.293 478.896 cv
288.293 479.392 288.222 479.853 288.083 480.271 cv
287.943 480.689 287.748 481.038 287.502 481.321 cv
287.257 481.602 286.968 481.822 286.634 481.974 cv
286.295 482.125 285.94 482.201 285.554 482.201 cv
285.093 482.201 284.702 482.108 284.388 481.922 cv
284.075 481.74 283.774 481.464 283.487 481.106 cv
283.487 483.539 li
283.487 484.248 283.227 484.607 282.71 484.607 cv
282.403 484.607 282.204 484.516 282.103 484.333 cv
282.008 484.146 281.957 483.881 281.957 483.526 cv
281.957 476.53 li
281.957 476.221 282.024 475.993 282.157 475.838 cv
282.291 475.689 282.477 475.611 282.71 475.611 cv
282.94 475.611 283.126 475.689 283.27 475.844 cv
283.417 476.003 283.487 476.226 283.487 476.522 cv
f
290.727 476.53 mo
290.727 481.219 li
290.727 481.541 290.65 481.786 290.497 481.951 cv
290.34 482.119 290.146 482.201 289.908 482.201 cv
289.67 482.201 289.48 482.118 289.328 481.947 cv
289.182 481.775 289.106 481.532 289.106 481.219 cv
289.106 476.576 li
289.106 476.258 289.182 476.017 289.328 475.855 cv
289.48 475.69 289.67 475.611 289.908 475.611 cv
290.146 475.611 290.34 475.69 290.497 475.855 cv
290.65 476.017 290.727 476.244 290.727 476.53 cv
289.925 474.856 mo
289.698 474.856 289.507 474.784 289.348 474.646 cv
289.186 474.507 289.106 474.314 289.106 474.062 cv
289.106 473.831 289.188 473.643 289.354 473.493 cv
289.518 473.346 289.708 473.271 289.925 473.271 cv
290.138 473.271 290.322 473.336 290.483 473.469 cv
290.646 473.606 290.727 473.804 290.727 474.062 cv
290.727 474.311 290.648 474.506 290.492 474.646 cv
290.333 474.784 290.145 474.856 289.925 474.856 cv
f
295.952 481.461 mo
294.525 479.108 li
293.645 479.938 li
293.645 481.229 li
293.645 481.541 293.562 481.78 293.397 481.947 cv
293.236 482.118 293.043 482.201 292.831 482.201 cv
292.582 482.201 292.384 482.119 292.242 481.951 cv
292.101 481.786 292.027 481.541 292.027 481.217 cv
292.027 474.303 li
292.027 473.944 292.099 473.671 292.235 473.482 cv
292.374 473.291 292.575 473.2 292.831 473.2 cv
293.08 473.2 293.276 473.285 293.424 473.456 cv
293.57 473.626 293.645 473.877 293.645 474.208 cv
293.645 478.141 li
295.467 476.227 li
295.693 475.991 295.863 475.827 295.984 475.74 cv
296.102 475.653 296.246 475.611 296.415 475.611 cv
296.618 475.611 296.786 475.675 296.925 475.803 cv
297.057 475.932 297.125 476.094 297.125 476.287 cv
297.125 476.524 296.904 476.842 296.466 477.238 cv
295.605 478.026 li
297.267 480.641 li
297.388 480.836 297.479 480.98 297.532 481.082 cv
297.584 481.182 297.613 481.282 297.613 481.371 cv
297.613 481.629 297.541 481.83 297.4 481.98 cv
297.259 482.128 297.073 482.201 296.847 482.201 cv
296.649 482.201 296.494 482.151 296.388 482.041 cv
296.282 481.934 296.134 481.74 295.952 481.461 cv
f
299.475 482.201 mo
299.23 482.201 299.02 482.123 298.841 481.963 cv
298.663 481.808 298.573 481.585 298.573 481.298 cv
298.573 481.057 298.659 480.849 298.829 480.677 cv
299.001 480.502 299.209 480.414 299.459 480.414 cv
299.708 480.414 299.919 480.502 300.099 480.672 cv
300.273 480.844 300.362 481.055 300.362 481.298 cv
300.362 481.581 300.273 481.803 300.099 481.961 cv
299.919 482.123 299.712 482.201 299.475 482.201 cv
f
307.536 480.196 mo
307.536 480.396 307.475 480.613 307.355 480.841 cv
307.235 481.073 307.049 481.291 306.8 481.498 cv
306.554 481.706 306.244 481.874 305.867 482 cv
305.491 482.127 305.066 482.191 304.597 482.191 cv
303.594 482.191 302.811 481.898 302.248 481.316 cv
301.689 480.731 301.407 479.948 301.407 478.966 cv
301.407 478.299 301.535 477.713 301.794 477.201 cv
302.049 476.692 302.422 476.297 302.908 476.017 cv
303.395 475.738 303.981 475.598 304.654 475.598 cv
305.075 475.598 305.459 475.659 305.812 475.783 cv
306.162 475.905 306.457 476.065 306.703 476.258 cv
306.944 476.454 307.131 476.659 307.258 476.878 cv
307.388 477.097 307.451 477.302 307.451 477.494 cv
307.451 477.687 307.38 477.852 307.236 477.986 cv
307.09 478.12 306.914 478.189 306.712 478.189 cv
306.576 478.189 306.463 478.153 306.374 478.085 cv
306.284 478.016 306.184 477.904 306.075 477.747 cv
305.876 477.448 305.671 477.221 305.453 477.072 cv
305.238 476.921 304.964 476.846 304.631 476.846 cv
304.155 476.846 303.767 477.031 303.473 477.406 cv
303.181 477.779 303.033 478.294 303.033 478.941 cv
303.033 479.246 303.072 479.528 303.148 479.783 cv
303.221 480.037 303.33 480.255 303.473 480.435 cv
303.617 480.614 303.788 480.751 303.989 480.844 cv
304.192 480.94 304.415 480.985 304.654 480.985 cv
304.98 480.985 305.259 480.91 305.489 480.76 cv
305.725 480.609 305.929 480.38 306.106 480.071 cv
306.205 479.889 306.311 479.748 306.424 479.644 cv
306.538 479.541 306.68 479.488 306.847 479.488 cv
307.044 479.488 307.209 479.564 307.337 479.715 cv
307.469 479.865 307.536 480.026 307.536 480.196 cv
f
312.903 478.908 mo
312.903 478.246 312.756 477.732 312.467 477.365 cv
312.178 476.992 311.786 476.809 311.295 476.809 cv
310.978 476.809 310.698 476.892 310.456 477.056 cv
310.215 477.219 310.03 477.461 309.9 477.783 cv
309.769 478.104 309.703 478.479 309.703 478.908 cv
309.703 479.331 309.767 479.7 309.896 480.016 cv
310.027 480.335 310.21 480.576 310.45 480.745 cv
310.691 480.911 310.971 480.998 311.295 480.998 cv
311.786 480.998 312.178 480.812 312.467 480.44 cv
312.756 480.071 312.903 479.558 312.903 478.908 cv
314.53 478.908 mo
314.53 479.389 314.454 479.835 314.308 480.244 cv
314.154 480.652 313.938 481.003 313.652 481.293 cv
313.368 481.586 313.026 481.811 312.632 481.968 cv
312.232 482.123 311.788 482.202 311.295 482.202 cv
310.804 482.202 310.362 482.123 309.969 481.963 cv
309.58 481.808 309.238 481.58 308.954 481.287 cv
308.666 480.989 308.448 480.641 308.296 480.24 cv
308.153 479.837 308.077 479.392 308.077 478.908 cv
308.077 478.416 308.154 477.967 308.301 477.559 cv
308.452 477.15 308.669 476.801 308.95 476.513 cv
309.232 476.225 309.571 476.003 309.969 475.844 cv
310.372 475.689 310.813 475.611 311.295 475.611 cv
311.786 475.611 312.231 475.689 312.632 475.849 cv
313.031 476.006 313.371 476.233 313.659 476.524 cv
313.945 476.82 314.161 477.167 314.309 477.569 cv
314.455 477.975 314.53 478.418 314.53 478.908 cv
f
320.713 479.026 mo
320.713 481.181 li
320.713 481.522 320.637 481.775 320.482 481.947 cv
320.326 482.118 320.124 482.202 319.87 482.202 cv
319.625 482.202 319.425 482.118 319.276 481.947 cv
319.122 481.775 319.044 481.522 319.044 481.181 cv
319.044 478.599 li
319.044 478.19 319.031 477.873 319.004 477.646 cv
318.976 477.425 318.899 477.237 318.778 477.094 cv
318.655 476.947 318.459 476.874 318.196 476.874 cv
317.665 476.874 317.317 477.056 317.148 477.425 cv
316.981 477.785 316.894 478.308 316.894 478.992 cv
316.894 481.181 li
316.894 481.516 316.817 481.771 316.669 481.945 cv
316.512 482.116 316.313 482.202 316.065 482.202 cv
315.818 482.202 315.617 482.116 315.461 481.945 cv
315.304 481.771 315.226 481.516 315.226 481.181 cv
315.226 476.543 li
315.226 476.238 315.295 476.006 315.436 475.849 cv
315.578 475.689 315.764 475.611 315.991 475.611 cv
316.214 475.611 316.399 475.688 316.549 475.833 cv
316.697 475.982 316.77 476.187 316.77 476.448 cv
316.77 476.601 li
317.053 476.266 317.355 476.018 317.673 475.863 cv
317.995 475.701 318.349 475.622 318.744 475.622 cv
319.15 475.622 319.501 475.703 319.792 475.866 cv
320.085 476.028 320.326 476.275 320.517 476.601 cv
320.792 476.271 321.085 476.024 321.399 475.863 cv
321.711 475.702 322.057 475.622 322.438 475.622 cv
322.878 475.622 323.263 475.711 323.584 475.884 cv
323.902 476.057 324.142 476.309 324.3 476.631 cv
324.438 476.927 324.507 477.387 324.507 478.017 cv
324.507 481.181 li
324.507 481.522 324.431 481.775 324.277 481.947 cv
324.123 482.118 323.918 482.202 323.666 482.202 cv
323.419 482.202 323.219 482.116 323.063 481.945 cv
322.906 481.771 322.827 481.516 322.827 481.181 cv
322.827 478.455 li
322.827 478.106 322.812 477.827 322.784 477.619 cv
322.755 477.408 322.673 477.23 322.545 477.089 cv
322.412 476.947 322.213 476.874 321.949 476.874 cv
321.736 476.874 321.533 476.941 321.34 477.067 cv
321.148 477.19 320.998 477.365 320.89 477.575 cv
320.774 477.848 320.713 478.333 320.713 479.026 cv
f
245.272 478.515 mo
245.271 478.512 245.271 478.509 245.271 478.504 cv
245.271 478.509 245.271 478.512 245.272 478.515 cv
cp
f
245.354 479.033 mo
245.355 479.033 245.355 479.033 245.356 479.033 cv
245.325 478.886 245.3 478.739 245.281 478.594 cv
245.3 478.74 245.325 478.887 245.354 479.033 cv
cp
f
245.89 480.537 mo
245.887 480.531 245.884 480.524 245.88 480.517 cv
245.884 480.524 245.887 480.531 245.89 480.537 cv
cp
f
245.839 480.437 mo
245.825 480.409 245.812 480.381 245.798 480.353 cv
245.812 480.382 245.825 480.409 245.839 480.437 cv
cp
f
245.505 479.612 mo
245.584 479.862 245.679 480.105 245.79 480.336 cv
245.678 480.1 245.584 479.857 245.507 479.612 cv
245.506 479.612 245.505 479.612 245.505 479.612 cv
cp
f
251.545 472.305 mo
251.859 472.305 252.09 472.329 252.355 472.375 cv
252.43 471.897 li
252.43 471.897 251.698 471.673 250.736 471.751 cv
250.66 471.492 li
250.959 471.428 251.184 471.162 251.184 470.845 cv
251.184 470.481 250.888 470.187 250.523 470.187 cv
250.159 470.187 249.863 470.481 249.863 470.845 cv
249.863 471.162 250.087 471.428 250.386 471.492 cv
250.469 471.781 li
249.448 471.922 248.635 472.32 248.635 472.32 cv
248.779 472.76 li
249.397 472.555 249.933 472.429 250.419 472.377 cv
250.895 472.327 251.253 472.305 251.545 472.305 cv
cp
f
245.878 474.716 mo
245.882 474.711 li
245.906 474.68 245.929 474.651 245.953 474.622 cv
245.757 474.481 li
245.452 474.258 li
245.435 474.283 244.955 474.723 244.576 475.539 cv
244.56 475.513 244.541 475.487 244.52 475.464 cv
244.407 475.34 244.248 475.276 244.046 475.28 cv
244.044 475.28 244.04 475.28 244.037 475.28 cv
243.912 475.28 243.826 475.238 243.77 475.188 cv
243.826 475.117 243.86 475.028 243.86 474.929 cv
243.86 474.7 243.672 474.512 243.441 474.512 cv
243.211 474.512 243.023 474.7 243.023 474.929 cv
243.023 475.161 243.211 475.348 243.441 475.348 cv
243.478 475.348 243.512 475.342 243.546 475.335 cv
243.648 475.449 243.811 475.548 244.05 475.543 cv
244.173 475.542 244.263 475.574 244.324 475.641 cv
244.393 475.717 244.417 475.826 244.424 475.908 cv
244.423 475.91 244.423 475.911 244.422 475.911 cv
244.15 476.654 244.227 477.58 244.227 477.58 cv
244.888 477.606 li
244.902 477.27 244.95 476.68 245.12 476.212 cv
245.449 475.307 245.861 474.74 245.878 474.716 cv
cp
f
257.295 472.857 mo
257.065 472.857 256.877 473.043 256.877 473.275 cv
256.877 473.311 256.882 473.345 256.892 473.378 cv
256.777 473.482 256.677 473.645 256.681 473.885 cv
256.683 474.008 256.651 474.097 256.584 474.158 cv
256.532 474.204 256.465 474.23 256.4 474.246 cv
255.908 473.556 255.303 473.136 255.303 473.136 cv
254.828 473.644 li
255.187 473.97 255.553 474.379 255.908 474.888 cv
256.155 475.241 256.407 475.695 256.618 476.148 cv
257.258 475.844 li
257.258 475.844 256.966 475.121 256.555 474.474 cv
256.626 474.448 256.698 474.409 256.761 474.353 cv
256.887 474.241 256.948 474.081 256.944 473.88 cv
256.943 473.75 256.986 473.662 257.037 473.604 cv
257.109 473.659 257.198 473.693 257.295 473.693 cv
257.527 473.693 257.713 473.506 257.713 473.275 cv
257.713 473.043 257.527 472.857 257.295 472.857 cv
cp
f
255.635 478.609 mo
254.753 479.037 253.304 479.605 251.396 479.871 cv
250.647 479.975 249.921 480.012 249.253 480.012 cv
248.384 480.012 247.616 479.948 247.027 479.873 cv
246.354 479.789 245.828 479.685 245.507 479.612 cv
245.584 479.857 245.678 480.1 245.79 480.336 cv
245.792 480.342 245.795 480.349 245.798 480.353 cv
245.812 480.381 245.825 480.409 245.839 480.437 cv
245.852 480.464 245.866 480.491 245.88 480.517 cv
245.884 480.524 245.887 480.531 245.89 480.537 cv
246.08 480.894 246.307 481.221 246.566 481.505 cv
247.466 482.489 248.383 482.646 248.391 482.647 cv
248.406 482.648 li
248.419 482.653 li
248.427 482.656 249.24 482.919 250.476 482.919 cv
251.692 482.919 252.886 482.674 254.022 482.189 cv
254.864 481.758 255.661 481.104 256.056 480.52 cv
256.361 480.069 256.582 479.588 256.712 479.087 cv
256.782 478.821 256.837 478.395 256.804 477.946 cv
256.556 478.113 256.164 478.35 255.635 478.609 cv
cp
f
248.678 474.464 mo
249.651 474.464 250.439 475.253 250.439 476.226 cv
250.439 477.198 249.651 477.985 248.678 477.985 cv
247.707 477.985 246.918 477.198 246.918 476.226 cv
246.918 475.253 247.707 474.464 248.678 474.464 cv
cp
253.829 474.508 mo
254.43 474.508 254.919 474.997 254.919 475.597 cv
254.919 476.199 254.43 476.687 253.829 476.687 cv
253.229 476.687 252.74 476.199 252.74 475.597 cv
252.74 474.997 253.229 474.508 253.829 474.508 cv
cp
246.161 474.925 mo
246.135 474.962 245.753 475.503 245.451 476.333 cv
245.225 476.955 245.235 477.86 245.235 477.87 cv
245.235 477.873 li
245.235 478.085 245.247 478.295 245.271 478.504 cv
245.271 478.509 245.271 478.512 245.272 478.515 cv
245.274 478.542 245.279 478.567 245.281 478.594 cv
245.3 478.739 245.325 478.886 245.356 479.033 cv
245.793 479.145 248.405 479.754 251.323 479.347 cv
253.153 479.092 254.542 478.551 255.386 478.142 cv
256.086 477.803 256.537 477.495 256.71 477.368 cv
256.537 476.726 256.059 475.718 255.621 475.089 cv
254.367 473.299 253.016 472.84 252.323 472.725 cv
252.058 472.682 251.846 472.656 251.545 472.656 cv
251.266 472.656 250.919 472.68 250.456 472.729 cv
249.992 472.776 249.474 472.898 248.873 473.101 cv
248.031 473.383 247.269 473.825 246.669 474.38 cv
246.649 474.4 li
246.56 474.481 246.374 474.654 246.161 474.925 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CHIVEP+OpenSans-CondensedLight*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Artificial Intelligence Element Collection-4 up-02.eps)%%CreationDate: 13/07/18 8.10 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkBc.!g??'JmXZ!sZRMc+cqAmSW9M6N!=**JgWZae+5aIJ8Z%km1,B5IZhLd]J0hm/Dc<oI+6OteQY-,7m_>E`n6p&niPj;+%%R8oY9Vp?RkmAa'DjKHFP7bckAY/3aJrnn-NYd<4`%R9R(Wejc6E9K'L>dT]isaTYb.=B/<Wl,i@u@COXC+hCCmST7W`u.n"&[Y=%L8)7YG@0rDcJ(t?%$fuM&Lj`"QNMk)iiZ=068RGeaf%r(5rJ*%^n9F7KPFcm3!+3\BDAg:PoG9]Wg"n5Z2lpUA"n4?QdZ1gFne'"%T*klG#[[QBGgH[(r!#=f0\k^]WD/EgW_X!H:Pq!L5+AHHH#>_gq4Y$\T<LnH)N>V4U_)#R39K_1m2c]8,QBN9$OE&Oj$A`RIQ1RT%!'\#k((1.?5A9=p:n=H(0#^K]MXb/@rXB]pHbc<&?g1-n_GGWNV'4"gpesFe=HVoI$tqloT4UX4-hMn9nQ0I%,PaML!_q[A$"O,\%BEeJCUd4pRTXM?V!)U$[Y(<hL"9::Z+#WKU'5H;E^stF,JY*JZ]1;8^c[k)6^XCbR,WO'XJBnHckfZ5s-(aPRCs\)c!4)`[,kDF?%G8DIt\^Z)m%jJsNQi._fr?l"^L_iL;Sall]>,!ED*R%B^!jF,^S)?b4"p4Q8#>2f6D.:#hoPFLE4TX@dA(@?s*H8_g30=ih=:D#9%&C*I8rh+dFqjjuE:%@.ui/I3aYqse$\hq<dc4ns"Lm7L#"StkR9=&4[B78WhPa[\I1agtMH(Z3ALAK4f0%rkp8Mk[)2E6D:Wgo='%Q'-9dk$;\8GZniLbM(>72CobQjlE5GSCEjg[H6Of3=1t-e8ullSLg50S<J6Q0%o\l]X%tWUaTj\nCoCJ'[K#o"KDRSce4mD$mdsT%,S)mh*]QHH&]o4N%,_bZjsq:Nlg/TN?Tb\G:,%10'V)F'$&:N##Kqs0Woo>;S0`_0Kn4"<e!QO/,FY/S)U89[7Bt.cAG'Tc>.`J&%*8g-\?mqJ?i9(\$F=%Fo12B.,hl"iY-^4UfluG<n-hUi%+\1`@cn;ms18)Ot<tEMcRU&FY%kK"oNB!&oHK*qR`!KhjkqSu=(m>u_%)3]^cRk!1bT9POl3l6%@8ks,Sr]uDM=H!HTI?DN;h\Nt"5Bc951fTPse)id-T7?.rUa4@;K]`oDBVs#D7c2R3.VFeH"AdPM5^&.g%*3KYa"NbsEce>0[bn3?N5Z;[<9a%+5.VDGPU++dYR%tV!3H?R*2*'pqS6T?@o0ta>;+YM%P)VDq]-Oe_9.fH"@Hu:9/sMSCcq[_^%8J!,P_aAhW<Za1D4(prO;d,X;.d(3Vp.9]g@`XB3jrqcC6YD/WrD^0=18Ndm<_WS^,H/<W%jd!_bZ'JeE%isOW`r[InlA9ZkhOb.%\SWb:cIX*_"G"aeJQLIu$!$j[VGrU9JPW1-E:Ifn?m52,+W9d'E7/P59HiqmCgo`>Ta&<8;C#3EpdKo6EB$16I1U+Ul-d8:'@8s1%0&/JL\aH6qX9T2('VQOXTP&;27T?!ZX71Yk$&f%XCMGuiF-:%[iP-fW!P^E^0d%<RiL[$#K8KDn@f)DDjhY>7#,lpMqJ4UCR$L\I%GDU@D`;15\72a/YH5Y8X(d@K!b00uNb4+1sS7?o9aqX/^D+\(6VEujt;ko+[[0cd9kkiKl6gutbV8u*Xj<3]lH0::>+XM:9X+O/s%rV3T+@%`'FqFu+_V=kl'!lohb(_AFk;J[G&T=<K<*,s."N,m8YI@^>K^NYk+!ON[!V-d0f%uT>cZ=0SQqo:3C,YR]LB$Figgj,:j%Jm8]i)cG[dJe::N1PS*\a-qDM2NU("!/M<o+E@\k?'p[)I9g4i.?T)65@/pE?3IfF\tb;W'4IQ:E?$bVHc,G8*;MD_#kh5jYoO[W%nXH1'5FM\Crd861b,>DH@O7GD6^fo8K`m!LWR$^DRePJ<#<Y*`(m<"<L!`6ZZ<tc$V0!QSq?qtD8o2M3_'#`X7W6Hqhq=n'P6<eS%5dtr491U>tNZ]WI=!t@G/S61c)T22S>of#:$;iKm=e-)eL#,r"OmMetXpW4F8(C'5\-IPtauTL#%]Z%C`PN'T1#^.uN?UKJs0_/Y%88\3A"G5A\AI%#Kkr+?_J>oi*E/j&&Pnonk#`a.eL!O%>B+ESNq(qe9qunOWWD#:+l-3rj8:X"!5ug>j2_?ue5r'+Qm=9dSb3mh3%3C8]+0!j]KA#AK<h%^0P8Xd*eFGaP<<f@n,a;1qC0"MEom\'inq/fLo'_KK3D+Z8BTrEYo22^M'eE>:P<N_%&Qlr0f^S@[dQXW")%c03i?m]i-NEPf14+S+hp8m*<[<QL.;S56$)V3Dg?1+IE7OGGEZHL`\\:)F\3;VH@fQnZ[rg8t,5cU%m!<D!oUl(hab%l@>_S6Y=O%knLF.<MVo+Vj'dS[>$16b11O3NtMi-Kb/V:+e'LUb`bm]L#uosp^U^Pn_Bkl4XNW>NPMupY&c9';FV$QVK`_a+,UA.FSKsXWn`9r%:`66aTNkS(aQa-\&'EK,Peef>49#?m'NutT_3q*FlHhNp4@Yc7/-Y[9;o!G]GeA-GgCt2N`0/=R7gn3(#uk_:c:QqK,_:h'JEIpA%S-'hMe2lcCk8`u]"!2e!kkTrnhuP[*9F_o;IS`^\5^']1hdA1cmeSOBdNOj&gD!5"3N,XAcQ(68Ak.I*9i=2h["7du86"I1dtqir%P<Idg04[U\'Hq#.M'1.j)rF<K0a?9feZPt.Qup(eT2SL@Er4_l$3Pe!>WHu&`q=WZ-17BCV`XcKLr.W1pC*"GiU4Pm3e-mFYW'O`%H_=`)nnR3lp#ej,MTH`7SI%[S$'#`gP#\Z4lQ*`Jq<:^*;u_h;QMLTHMiOE)V;gkj_M%B?*NIg:%oL]M:1nqR#IHa%.8BO"eu'A^%A$N?_>m(+*b)kM<H1Cb^;GZ`^U`=XqN?9@1^RdsqP>J(!dB$G0Uh'1;C6_b@l7iXp(ut7_UCYlkcDqI_Z2/F4b;jpr027csYaf_b%2F4UW)",L.AFb7F5C[BS0d1mY.WRj<a.2)th9$%D+#P4aIE_12>g1%(pt1!Aaj]6W7#B&&[SP"hIa6+7VcU;pF9fV7L$j/YVisUm%?:d>G*@=44mo,=3V\]sd3n:sL8H'VNkD`!pNCV`:_S>'LUBJUlELrnR.pe8tg0I5K6g%83?H&@XjH\[+m)6Bh?e)"3FfF7WjnVq=%`tT2-.VDPA9;\ap11+JiEJNP30An^C'BR5_f)4i#A<%`Bi&/-(D;ar[/`50kI2e[LmEX005K.`QBkNq/Og+MjCudb;]\ek+0ZD3r%-Y(()3s]qa(&O^SJ#_7I^Zum@#ADbPc[Ni[<_r+kK=5h#Ij/J6;]aAWmlK)jj2tX48#qlPigER;eqTRO!bu10Z7Nso.0dJB5^>M8%XlH=[>X`YGqkHQ^GPlP,pM?@_R>f%D>^Y()$fu![kdMmeT2;Mh=NaGcU/4V4WOS]K/W:RQ6c#+l(!6"1q4nT/L/PYaHO@:rVOm`n%^%N%FqP]WnoLX>L2f!lde*GX\TAm04adBf[XpmMpdjMi*;h=a(7^I;h30&Bd-pQ%+MAN':/f1(;*DfGW5Hk711AcA&m:5J0%!0L5%0BOd:N]l?PXAh[^%koH]et5\J:SG!n.8aWb9>fBZ.Agn.iHQm",,[QQjh?6VjT]!;W#>@LKY12s/bf,>r>WsVnsA>R#&LnBnd"sl%WVmVITNUATXOESr-Mr#NaMfLlo(ga.Z+RZj0*mcq*cI"fj11:m=+qQB_*Kc@+r)19lB"];a=0@E+m\VdR0h!`UB>,M5<>Q[g=P68%rTA#R8!`=\^>648jV47X8`[O$Am9Z\25T452!i:r^[_d":2Sl^k8WiY3PQt_REF"5329_/:W58`2pRpPc?qd;MXu_SfJmr&R5k&&%1Z'Q^l?p4'1Wh.-'mFcV3-02pd[o8Mhg"2*!RpAe:#EG732<"<;_`\J]lE07E?+dRq:6Kt3o=i8N,jeN`=Dh--)/lArc<T<&%*Qf%,g$e7XRL`LBkLkEmR8G",E%&,a4K>?D6AhVj]Y5t<D`"cWl-jN`;4nc9DXtK?Rr;drXW8[F1-"Ell0rQDeJrj,5+a9Y+G%8ftO;-%nAG9LpdRObS?:P&=LWADG.)8n>.=Ori9b@::<C)<A%/de;f(:Nb=8VO(<=1XO]+sO?Wk3.WE$h,,W]<Gq>Q^.O^d=rPNY,cjQF-0%[9)lf5`+jM!IFiY4[)"K"88E^s$neTLA]R_m#[qcj7(1OI-'\&:<*k8e;2k'J]VW^8OKgiW^jCB?\p8i$T=kQ0mUQ_%'gqH^L-ea%kK^'^\YIONTC8c4Zh<m::X*7E%9IF:NrPgl@17'u;+f.Vh<jdd@T)50(T,3ci%Lr3s+S7$n8ARp;#g.Y-sr.G*.3mnZ%Q$4n7@cT%RjERX(>o:$++Gc\"V.6jJ+UOlBrp)0qm#C6QKpAofaaH77rGq#gh=n<+:Tqtp)'sI@-52E1aHZiSt94a>XTS".E0Ei!LnOe4[LkH%HPWdFKQt3TelGJcSo$K.6JP(*LiP.)r!FhCTnrQt4X\A#ia>02b+jMdnt7)p3iD%1s8@))hnYMKcLT#27!h+Op]3M&ld+bek6';-%&%dYe]`*:bIm1&#T@]^]ld&5"S_'Jm#Nk4BkO\QAM8!3T/&G#j!q!ik#DJc42<X#%O<&PQjh0`'??8<63If<UJ>>!OK.\0OlLX8_%p5<Asm\`tZ(qMpC_/jr.?9YBV`78bG]7SM.HbG8$,rcYCWN:,MZ.AC8,7DJ&I_thEIWh*A/pB?oPBc0fGcE7Nc"e=jei/%0n[SdH%0#=O5-+JG))GhK+SEk.W3o$W'Rc!@``S\-7-`&u"5#5$l#Xk"Y#l$Bjc\6hp*(,Q+T'D%iSn.StZ_%VIT09seMG'i-DgF5PpUjd.%DDu1p5@#37`ACF#pi92^:=eIKW]s&nA]4i:]>&UZ9N"J]$I^]g"=J_/>nP(U#Im)!i*s]Pa"MD,LJjQ:D[aL?%oBh#p]Y[6Sh0XU%<8PoCW=u7(c/uo`*,dhQF*fP%S;TDj@a;NOF"ZUFM`Ks0c>aV@VPP62Qntl2TUO0:Quh?!m(&MT#K<4:E7Wo`?d]NdVQ/,ClZ>cu%hsu$^pUlmR"3LPQIdsPc'HcWN]^te97n:X_?dGF9O<_N3j3TB"8+/OSpXL8@nf9Io/XAtSh_Np=KmnR\4l:4$CbG@-_pu$&ck#4q%B/f[PDY-bdF"/7'I'_A4]%Q@VZ(>mAq>_RDMo3$7eLHl#<<m'$qg!YZ;#Pn(hPY::EIm+"bK^n?**7Z0g5#VA^CIWOphdC:l)1SL%E^KJe<&l-%*Vir#G,*(MH3,D0RDDhXK?X"f=b.3[oRA>\ppb:XEO'O7_YK^BrTVDbSAZFn&r4(R]i%!6:l"CFRQ(9E6F00B9g@n1%!?;$8XZrAN7B1dM@eietm8#(ZNdDKkU@RgK/#)&k-rHS@r&U0/^,T%6cK1,99RKUIr8IZ.jU^I+SBE!%O<L6b'f_OEcK1*sZKp]E%a1;+f;WSFV=Gu5@S"@o>ogu>ppNWtgP0=A*/)LC]F]QSO)5L'*X7Pe'$m"`c;s\$o!lFkT^_pm4Qd;"\inE4f>fVd`'OSN&-3YmD%;stBWm3p<F<dK0TJLjk;BsG"B5V0+%^t(B33C"sYqAcb<ShJPVhnO7ipFgsTqhd(_ig8ncSFX1Cqhh,2Ehe,uH"i=p5Ms-Gf4k+W%(G?d?MY243UtgHn`a<]!jjWX[qN>UA_7(llP=e_i_RCm$0[;%MC-:AUErq-c%`gA"U_N`XdqRu#m*;?O2r'+1!)4iI$Z4iW>'j#6%T1e>%Y*/TnLPLaen[S=e.Au4\mQqR%#&U9GJ>%34c)F_ATt%gDh&e]prjfdKq#@'bp7)5VF20"VKBFfT+?[qPi-mgLB7^(2$WJ)N%S?p"P(3n++ru)9ZlUEeOpIUnH^gkFf'oVCJ#+j;ZEuK9u"4(]>3=Xd@6F:Zu"s-%YaeXJ^NpHCa;RrVbkC?p3"5<;6Op)mnag]Ls%^ZG>9'PA0D>:GRW&No:NJ.m3DheCuPEP>h&(Eqr\2Z>C:qYV9j^4aAlB%-b5I3G4gm:JV`+hbZSfOi4M0Vk"`il5Ma(4QJuW'h!P%01L4)I+nGgpIl\"ZMILf<!O"X.W['K(%Lpne=YNkF0;'_aYA[*B$WJhpgR_\TF4s;hpLMUnG<Y*Hsp'`6QQdi/G8g\L&3kii4)!-%I0$udJQ7h0\D$?A$gEPt60UPA$'#`gEo2f4jLO5a^X#-1X>lB6n3+'E*N#UTS^(C-+4,&dX-?E!E?4n1kjNjO%.7.Y(WkS,BQCno%h7W]aMjI7f_%t"?0*dcnAN`5J0'&J8ni!7m&o&_,jG""s/9CidgB*P$>prB6J8ZG)c!KmdE:C*gnI%7F+%g,0^G3c,+/!Z%nJpkd%"2Y#r5k"k/"TO69N?=.j4\&9q(-S4@VgfIE<Mq2'FJGc*0'e^(.JSEX3kO#tJ!n@W6</HDVkm'.Yj(>CBMqOFT)Ak669Ib4aI[aK%jFk%(RLnSpB)!+Dk0UF!dJH\%Vo?K.3oK*;VrU4[ji2%i(<[u:YLIW:TjQ_EQ.rjU$U(qkk/^i,E^GfAKmkGR3P3\BFJFV;S?iJ!%4s'?<9%E*k8fht_oZp7Ql%nEXiGj0YnQg&uqM&pVs1[so;gN<+l0SO7?h(`pjnWelYH[RB&e(W33f[.Cn$j:*rdWCpq(G?37\>o\%jK/.`=NY.JC)PAufY?P5P]K-Fj,46ki%Z.1D\trllYB?]odJ`79rQOT;T,^t+?]?Z7I8po;NXa(=a`&"V9_@Er'g>;<3P?W\:fll%3Tb\V#Wt(I4a&%Nf.!?oeir+tm;K3EErt>]G*Tt1^LI!Q")tfl'Ha)4[4-7P&briBicdPC:Xf4r<)JZEc6CqB0&om/H+ML_=+CkL%NPgXB97=PB,-VC.WLTPWq0'pCn>S/8s+\*rcKb,rlA#>B(q98VDcB$u&A2tT`fmLN;uX4`j3di:Sgl]99tm?8nr`/.'I%Ed$'-@o%5$(LF"b_'Z`>I_C6usn1q3]I![t/u.O0?O],Hn?"a)X/j9!R4JX/t5T?MI1ZL1AD7#]toa?2?QVok@J+5]nl;:]/Y)1,Ar\9B^L`%.T<Fl[4-6gT*POAO^uQt`N)XZ(Z;h#R9Fp(+;oq%9>5l/ZGpmC'E"DC"reUFc"`#e%)@;uQ+p#@(<cdDgJB\!)jaeN23),/5PT_p%Zs2duU)f>e`-ANomp6f0c90;KAC22I#>Hq=A(A;D+6^fU:^/mDX7U)L:pUq)\tm1_KF`8=&35N8^^52bI<9bi\/V6!%\G,!\_t5i%fC*p_mmtu<'@ttmnDtR9GQU2/"LP1elGmO2h$$%#<D^TFY0)UpU]Udj^IrD]bt%7R#u'aXDER)$^u55))AS'U_!f,_SqPGM+[#7H%gJ;3`Lp9&"5pQFs>[I15m_ZY*!.F?_!p[CbEa%raZlh('\LiK==-@-XTgY#0'U@E&`+#>H7l1A<!2@;bJ`"7u!/>j5^+"r:`sV#`%Lcd/7"*Pgls&Q9$Xt"YHfk"omMnm]G5N<Xg(XpLOE&O!ipUSX\0Er`='6&;GE!QmDq?T=`"`joR:l>UX6kGsA2]o,AM.:FGjq7nn%j-R92:uc5&>\uh)WmhoXRuGl_NH'*OO!)"sE*0'9D@blLUQ:e7E;:WjILjfU^uBtL"+\^&\o7_$!.SXk+/o$D*!2.Q#B5L!+5;aS%CQ>F@(N?'&]E-gLJ^!Xn0#@]\GImo_2e7Wcjn!`U,<(>^#kYrcj$$oZd-Co:!B]>.IbuJ[ScrL#Pa^:pW-Z/pp(*E7E=(b?q!T:%%QNsh9k0,4N*]+l)pIJ!K@m2;8LW9c:"X<E+,44r1!U0ib5O62kk+fNd*\SMNlh.iOc?W[uJK[M[]PbZ-[q@alHTJgo9DAhfL11%e%@D.,Vh\2*94$Z&'!@r\D6V9Lj2ib7m-:l'q7#/_Yol5EOEEt1])@[hREM9Ak-O;PS#a^lCps7Fk,)llu8k`P5QC&*hn,V0q1][tX%8bK^O&17lKEMMK?5S;BK5<omA)^$i,J&AeQfsj;P,Smuh\4;^<&,/\;OdHH5+<VmSL%4.AL@`WD"&m$o8AbN1:B3+*5^6[DUg-ih%o$,,7o=>!p9`qt>"6)^617Yi^o-7DRC$1ZkoRjt730&J8.).%+o`8@)!ARtMOPDS+EL`DFn0!o'Xg9:@J2F1^#:-$<C-NXKW4EAY%_;taL*dn%.5oOZ2BOJtSl/)s@5_G?^F([<#.>PhL"lM/shKR52T`uSF9L+u%*`[]Lg)L3Mq1#^6F8<j.K26J]Eh1=.@`9TAOt(n'%3Vs;<!r,K];<_<;1nlU$4?WWpdQaZ=:Np"HW[F)MP,0)(5dtH^(4T=Q;FJq&p0R6*-2dISI\.]`qk<7r<[a+[Er^RVoD1E]G`Q![%A8,HPW'frq"0P<7MD+KV+@!niWW,45-VV/IiM6ZI;]/DbI%1j=DBo>Ma+2;6`@(A=0kX^B@[PYp,/kU\`I*=r,a?_`V)fUNQ%AT3%%O&R+NFbA'0K`2V15PZOM(-GP:A?RGTO/Za%r)cJ$gJc8P%TXUg!H+a"H*4FWOX)b5DJbpQico+Pf[Z+nuAoZ80kHd"X["P+9T"N%!/#euU.p6R*GRO%*JPW93uj4's&8MsH?-)@';sXo&tOGA;ICpB"jO-$B#L4NNDi\TA6Chu>AFtHl)\(Ymt^ZGj)6@kkZbYK6Md"i%^^@1c,VOhpH`@FG/c8o,dV`)]Qt%<kI61<oJ/"DL^_hgl%&n[DA4B\F>5fher$YifRY<D.`YHi)PbUj-2i*:goZ:>;-1V!Y-[$6Q%J/M6O57L[(PplW<WLhO+&,oBfeR?o[en@T\B-MjcibL.!^XL)n5XO?8@pLe-PcEb.T,1M7nbuWeq$s`1kl!VQDu@T'5[`g$WS?EX%0YEt#!B%Q+H`qO(/\fm9.Nmt'h*j9On"j^On7r?!B0"_fBqqI=VK,R$We@\N5$pr.iS,ljrtJV'Y9q1_GkY,,9*loZNl'Bm,:BVC%a12N2rGlN]>gc]K0VUt@$Y#_m`?Xl-Gj)`f,,5cnOu6PtSbU^baV^=e">sA0;jV+HSZ,'N#Q4@WP%B$$P2#(CI(ROcQ!),k>0N/[%L09P7IrfF,k"Tg`[`5P/PQ6S$6Zq^n#^f3i\%'r=1Tr_@e7kn*"Bft2+^s%n?(cXCbjIM*2\?prV::+<F2RgT>]oI-Za<=Z=].q6%*<;PfF%HBqh)(be/IPg=A7-H/D_#a&K+TJa3n4Vnj1lY%9IY_$>^F7@Z^Pt<YQc3UT$FB>F7KSSGpFogC;:6u8st#VF.j;JoP\Jm%]M7`*WW0ouR0X_B>1G>T9(u8'?##ukOloo2k#N3_7Cb8.Tjhi1;4skdI>4Y3dr[YaW9"X-HRHU<Y'Bn,M3F8qGEs0a,8+=dgUjNN%@eOYQ<KdS,HY^[nf1[=j,td/*7<PFNH@o0`.`+hRX(Qe6##5%!qCK;]Al]"7>iUT^=J5<oWjm2;()ItH@JCW9,[@il7mi\&D:__=%E(*Ja?GCF5\4E0$"7NLBdrXcC//5<7oAqLl`!KcPa.kf_0`cA/o$jj;@[7cO(.*1i>^i)4-$cc?OaL5ihR05(WS@$AEW^lnB9#PH%A@]ts(^Y=,mMFO/PSQ5d<[]XKL!#1oC(8";E'sGgjPa*L?pM<((?Pf.hhpP7d"$F9Ne-R1kg>'OTAs2>TpqG>Ak[B[/&M?+.]dk-%!>rG6<[1KZ/pepq&jJ1c1M,s6Buf!4`,b.q7-)i4ZplgKch(>8](BO/Y#'XEPNaEaeNJ/5U[rWN.O@j01Hu-N0#OM,;8&p#iX7gR%fi"W!_&P(:N!u-`ks^Z]6lZ<fmd>]Z4Mi"W"d87Ka?HFQF(:VeaAfIbNFa$=r+rsW\^8s]dgX.%8Z"h6-]Bb""7?bAcZ,?rOs&F"%Uem=,P"[s\Zdl<!E,b)AQNhL:/HMt1:@R$u``$E.blYjWE-t_h2rGXP&2'G=HY49^ZV>cOm4W:shR<#QpVQAP=XMX97X#9oVY+-=%b*8@d.gH+tC%UX*J;$nt1%47Y:>,L11(qBLN#D1fOlWF(bqpAE*E\pY1A.9/f2uV\$P%4.7Cn7^="'rc<@#);(P7"bB5YbtaE?nF%!WDMQFCL!04EfN"]Gipb1Db:$SUo6/g<Ma851Lr[%7X8DJ63SN0Ea,r!552>l[u7/2k7DMGRgdsP%0S>0N=23!SH!:W'6_/X0urS%fpEHY_MU(,j]pGIrg2mL-jKIS*jl8om2JgI`,\lK#?:mV6B?]lR^,M`!5h+)g(uX#*Sj^gqc_N(kZ#kkSMO$eW/Xdj\X_QHU`^fT%:nuF6-@t`1]VW0"7,1@H.2rPh8NhP@YP*jbJie(LdI9k(A+4"Zd9nCQ#3^1!l*nEL58g7+RDSann)#%Cq),/!=H$FC`cS=_l2BI*%Wq:Z.56+.4MXn5:*.59SiR_8WpY9Ds#Q67LU\/9Z;(@4f0auu]Dm]'4D?_2A7eAS2g<!X<Y9ENqme2F=i7F.A\G"8U_QP!P2<MYr%O22'b(60Dqq9*\>nB$%a^XcB\N6r6DJ^5+a86a4"LGs,?a`[c5V\6@5F2G*d;/al[Ym]KB*CioS$&X4f?gI3^4nT_=2o-"Mp_3/:%?%Y%r^*6_^!&MJR>!,S.HI%qmM$IKP8@<6#2B>Of@LdV@b2SFCmH%I;?-oKJEJk4og@UnM?N_I74_%NbbYR"ILh2C1DNu7th\ssX%#-ML^?$%AG*eW*\"0_Y%D&?XL;1c<TqaA\Xs56L`luD2r'X>sEU!gin8An>Lp"iYmQJmJgU[74K%p5UU69\UXkXWu=r-Ssp2!//\%cU3$0<Z?_?.CHsT>\/Jg%r"]7[X.%Z5M\<g9`4m`'!$,X%.TQ\kCNDq*<#UJCGIZX9Gt?%9.'X+]Z,`CXtBL!:WI%HZl$1RoF-a1%,JS"2^;i]JJ!(;>F!ZFZG8^ea1)mTtM?Q-=Ib!sk;haiQiP(\$IfFR$YO`ZJ7-&bp%^FX%=Oe0u'6Lts/?a!a'QGBIiQ@L5kb[=e%i6C$'RI=9A^<n03?brTVapHa!Wf>[YZ2D;<#:0+WNS=QEO3(WcB2n-U9U'P;)6^dAo/VMr42uJb\9/X5L=8M:HOV)6\6*mJ)-GoJ%="b6)H+Pr&0XbJ?]0i(Sfq7'AGd/)g'r`J%haiNPCNO1DY0f6k,E9.$IFDkm9b5TR5,$A/?&K7im8R+ubHk5Z^:AUB=FpP]dW$O6%csf%G:!`<u/oBVGfPdKuB<4tHh"S]VG,X.6K19X$%Vg*ojGi<=ASl5T4tq*gQR+<3I:Ei3BM;LOUW/h(EZ.S7jNq"I[;h2.n^>e:%T2KSG8)%q43;`?E"rihG27VS>1iAk/TlElnKZ7d5?Y]q:mR?0R>J.rt/\3fjZmVm\eho+L:^:mqf3B5_5#!;C?.)t80)M(cMd&(/%TI$R/4R-+=P_$TrUs&4(9iaK-dc=#1SL/9I`&%WqhpU:b=j<D@J]MPCgG)l1bnWC13d+TV1a[-EboLFiBc^HE!s%HIY3scOgbMZo%f:(<gBf@MA:%rOQU$6\E"jMQB7Es20AMp7@rO[e73AR&t:@ha9g0@d_-:^h<\oGB]28jVAX_D`Uf3/hhR+<nR?aX!u$u+OBEMV#u%]l1`&XoHCSdY<A?P;Zkq_qHMgs/o').TL?^-1B7DSo]k!n<>M=9AQ=4>@DDPD-^u-[.bCSk:+Da[B6I+V/;7njBa7tdaE7l^dpD5%erIrQ*.T4Ol\&#;jY(][cdb9nVV=h9]h2gX\GP-do,?CbSKA"']'sL6Vi+U4*d#Mnl]Nl)`R;=aF*OZ75M^X-[C8f@mTsNalCJ)f%Xc=rr]T28Y8%LW\r_96@Z'E6m-Q$=k$Z5..G@@j)qA7_LbhrO1jkh]'Rel4lnC2d!LucUFMaS1:?=_kHqaJodoNkL5_W=58&^4KB%3?.&f18oQ4kS<]AMrC]j\JU5BLL(X_>cRFB_qe$QDk.`;o_8m;l3T1WeVA&O&UbYb<V;crm6G%&?^gXfT-LANf8=eK(M<HFn%R2&%riPiserP0KO[7GB4U0rNHY[R;7Uq(kV[XMqAc0peV.1j;hN/m!Gsh+>a;SdtgSNlf2UaRG)!s'M.IX$_9f=#HM;?rD)MG!DBW%AE%7Si't@1:tHSrE2%k:u*keZQ1T'Y,tWC"(`01)Udc4lY=5*#3KGUH"3=!W-Mg>\Zrm?Js*s"Gi`8o$&hV;X)Q!W<fT"WQ%sJVPbfI%A*RB]$RR3\&LK6(f:%\=Wag3!XC\`A:l(LB?3H$Do:?Z?A]M#j^:R,sc**WaDl+a:!6+l]pq7Gko%e&#(`mf8i]6gP\]T5QQE9t8%ZJ6?XdW3Z20:"L`5$<X4o:nb8>)u^j\c6Jgq72eKPh!4Ea]GQV]s/k$CU89+>=kri\%WUU%]cP1pf)R/WMPO->j:%'/SsSkD(-W&%gI`JPB=iXG]5=*?GKMgY&"@_o>8u;`qM<\i$ef+afZeclSnEA>^#=B[gL$SA7JkG/);$>8#L$V958G8mU!5QkK/%o9a>Zde8#$X0%E00mAf"kUtN)P)j%Qj'C9&&V!lFbE\,l?RP"\#olTmlt""H)Dc^6`3\R)p$MA+$pGLg>;J1j1I:F]bE2Cgud9[hiNT>[3mW'i]K!%^G.h?bGoi<k=D\1f/]H2DrV-6B=$]S9E.c->cp_peJ7%@N%:NF\Tck4*#TOuj*\$(K$NR<-`a><n<dS=$1DZc?1u7@h9UY1W;E^D%pNs9l&uO*(S79A#\IA?DT'La(eoPK7&3\PAL#<Qu(P:7"[#!R(e#2kN&dc7\mOXd>*IAn"^=t2&_IA@/&UsX89;LUn.T*6G>==r8%0uSFshVb_&GmIcmge@m#Q?gU0q&0jsd+@A>MbiP'hbl!_rS_R9m*@'=*reSQFQ9:jdC4Y/'QjRa<5'?.)]IbPD/'Ul]M]PR^AGgV%TS:+p%0k9b%Bru:RG^4c(^K<ZAQ#?8?/ukUj@Nn1Tk)S"KPJWl6E&YO2MOU4CPFR-c5VcjhWSp(d)gu5s-#J@hKsL\ZsVW:/gH[b%q=97[F=pdWMu;]3g?XdO13l'(R;>)XDXs)uV"IOedZ9@OZ/NiC:COEN2uN8IBj<&nO_J%jMBA%5W3__.7UnWk0j6I!2::i*30%]Z%Sqf$Zq+/P(h>;Z&fl-RnDanaY2hm*+n\FO&'[Mgp55l2@ki-*d@o_b,NZ3m<&T\[2M5ht1-[P/R,C+8fkpChT)^0K4E]B6.bs<m@%IP"T!:.'\0`VgQnWrAfNV.e'95&G,M$0dOm&4k\T_g8n"&qu8kBYM]8mJ`GGc?o_eA=iIb@clK]k-J/4T?&A&r%NIV84Bg/$e*GT%CACCQAi@EclAqK(mOaOZYK[a4c#n]f=g+m6_=R>m5t1@Ad\Do=I!BAd5pd?Ip6$1!-9lue\88_8.Xe"*N*-L?`oC:NN,'?N#TZ\T%CN\?2I#Eb:2ca:8E"aHoO#Ke:mcJ*qIS,nG`H8&CI)0'a8+"5qH;>!0A_2I^Q#g#&PB'<D&T9PQ]udB@c"V)h!L$id^[5/1F2d2k%A!JS=S$19040L-/S,.9X8K$gDN3gs8^6Hk%RR[0bXnca6iEA6T.b4B)Y?eVZ)S17m0d!J]<26pF^(qVF]J#UrUH"&D)a-RRX_Ees%4Xtk9f'h.Y%t;4#anI!Y4!OS"G#tu<6?iB:Z#ai3^$si*TBknAk=:m=5ss)6LZ"hEoh_su\VF&)>^426K&n`Um_:l-?eUVio4:G`%PgIki:J^@tjB;*@0W=WiTpoHe\UIa74EEC"pYm>&h+L?2d!MI7Q?p_OYGYPa'CKXYmKV6DZR7\W9sFE^p#T';O;GJ$'6t=01s(Md%\OoV;jkFsW;D,Eth+"s">M>@&s$gh'oUW"45BaPaNpICer`f-*KCRbpj3^PGXt_S0^3k`89HmI#\[1aq?E&3/km_u:GMhe.kPD$T%U"(4lS7^]nAOD*UF4;$\6_:2=:Z`4:>7WpGlqILKT5R-.PC'>o=\!DjIdV4n0JM<k,8p(^KsreYKN#@/k'hn\,OO;815^geUX=uM%IE`[)!@+'hi_OC2M-Y-[T0q\BZgK/!BLfpL(KStDbLP20R'UP1<Vgq>CW-,,b`Q(8j*"7HeFD>P>8CR80^F(:s,5)WGF'j$k.)O(%T@HN?#`2/j\Aogu93H2EW*/LZk%@+9k@1jP$*.:lA@_q?D3H0W;UjFS*1kGJE^*]@[of5nm>o<N`QV&iWfskVM.qtb/$L9R>:q2p%!.o-"=B^=1eCk(1f*)L%i;c%'Q/c-U9l$I\=[?0kmF*OXD(lj8=d!B/-,)NQ5Sh8&=<O7?_mWs^CTVIj6&9iELF"YMK$SV#TiJW+%a8V/9%a,hZcZh,sHZ&s2/NT\QDA;-MT,^(K9*WlAc$Jnl'BJD'd9hemSAL:/#8Lqge[1WWG["mHFcb(M&=c_S"t]&fZ<F]Sjk[nI%)GcEe&=TniDNB".jGFr#/S7t"7/!T^S,9I[4FAcuNK\?ZemIjCW5PlUV.%EGK'+W19#Etf];EYK'0",IHmds?:!kF*>8X:)8BJn/%,hE4NRI8H:s,hS+O_p(;J6UL)%9&JUng\8(Wht(8k\+T/E2>J9Br>C&(/SH\SnjO!Jc#Z[c:@Y.j2O]I>aZ;,<$!;f\=\BgVs[TR%adG'4YoRG^C0).KjMp"'>:.2SD&Bmu/)o!_HTb%@dXD1-n\R2$Q)u@8ROL\kMS%e!1j5pN<2r9?J=UD$NWJ,Ud>_7Ibn0)AJfIE6%L\+9A^+F*$r1MhG/_m)7Eb0@]%+mJC:E^ek!`b@n]-P.IFge@%I,Dcc;*E!mEuibVIlmu<]CC,A_hG2P,VSMNmE,pM>tlW6BQg<s%&d8nc;JioSAnn#S"/&"r&<s36!N#3VbG/f+rLb&8lCS09<=:'WAHNO=>,H"KPSK8]r)pTr"ot%ZYAgF+O:6mIJ!UE;`D+ilTNQ"`%a!aM`&SPmg5"W(qH3o[-%=l^8Z@Gu`aMB#\PaW@r@oCR5^YlO2+9nK[dejj<SM^D\*")g(]$E!`OeAsE74&!rY."C,$gJ$[KNGTA%'F0I8SfTQP51lWXMES.R`de6J03/YF_D"e_MM']UmVb8_Kf`37i;%D0O5&Q4(:;A]T1?FiaY(Zf_>Xqb0N;[F1^?#n(gRIP'D(D!%pM!4r#gdSGrN!AuX-2Gh)K&k"6fag*g2/7kj&%ur)?fr=juTWLR>_H@F9i[N4e!X;_.YtF.=/.KKdU@bb"k(4FNRVUlTq,E__<80%QL*A1MeM=n@>T_U@j*>_>u$YK)CfFq=efaehTt$oU1"R4:!f5h:=A)Tp=DPE](Z2r0:CArI1I2Mq=Yg&4P4MU&Q]NQ\Z.Wn7L7fq%Sb-/Dj)9m]WR</@fQDQ$?l-OBce#[TI#?GeNlH78nohk4BR#nnNWo[-aI9L#-YZMVgJd>KZdQ%m5pUg'9cmW!]*n>l"#2P"4lB!"%GVpa.Gi:e(^+qUCE<+-Jihc[lJPV#E\=TUTg\l%,Z)V*M8iYUgh2+`GGV`JaWK-`(PSeXKTl<]o2H\uu[TBu#=&13BM'^T[edXs:%%QT37BPXVL(eBa.bXqYUqVjA'^Kc!CN;gt5kH.OD=J9JSL\R@6U$I86V'eThk@fhA(e<0#@`[dQ4^HK/CPkE*5%5mb/MmI^Hq)91%FCX,LST'`W^3K1rA@GEU``F3Q'\jMsd6oUgCSknKY5mXHHR*\F?\3X0L)\shTW>2A7`.\t4Wl.>=EI@bO$o2AAKdZinY)AT:K=aK%/R\@[Y*a<o@7+4.IGc7_!^:ipUS&q`4kA3H4Qs+/Oq(8PKq#'Se3%/4]h3pfmThiG\p'N!&kUb]afGF&FI_K)37NAgGsRU`,7MRB%`P#1uTMbW5Nkk5f!Shd"JW2&gqTZ't-X2DWE7ri14:lG%==s>\:%k+QpCp1;0B,C3IN'^$n*7/U,$n%<Wq:Z1rAiM3l/SB4>"`>e%"4;Nf[;]n+m^\7@d`Jt1.m^o^c;8GTn#$g^$P"!jH1gt_?#B\h?[X$XA#4c'T2(ieH&4I97SC<'Ub@`K\(7Saq(<6n+oGk-<"l[E%g9inC-Z+RD1-WnbEQ;j,6WLtH.4%BI55!:QpKau]X!F![MRnoWKO;X],g[$Zbo5aH0<;B^k,_gl1I4R#F#=LULeE763M3G^R98bn%7iE&LN^L!a;_RTq@H#pmbC&gmQ4R22#;N1\W3jZ#2CA\sAXKb=*9i0SJdHDB5mpUcFeOOZ_5%te!,4K8U-D0T^/1_6M>82tbuGXG%ZV4kCCi(M1\$Z=-6kU>7q1M?^Wti6I?st71A@ukGgk77o.;P9\p[u=t8\$NV``$-o*3l"lQ^LZ2l$[MR,FMWF9#%#,:t=g,;b=/G%:=r2KA8iN5[UDNgPKqdb-2o677ra9#E3\-TmK*fZ\'>3qVek.J.rDNf*b1Jl^^.M7)rcOY0T`B4)=BR0!4LZJZ@]'q?$9hs!J()h%c(0mg0CPQbInd@7K4_3fmg.,(%'`FlOn$1@p+Wdc$V(2i/=pq7=?&K$NTkOEK:?D[rLm[DjZERX6tWN?X?B.C0&N-+:UBU+BX15%%o`9A<FmZa>eJcR:4^bNV3c?"10TWL(lZH\51_>"nL9h0kB_'jW<hNiVit%>SX?*>+(/Ie;@)p%nUF>"+)C0%=kGRo8HrWeC^.PSI%_V6a:R+n:E83reAi0ctV$9pt`lO86!;=39VDDNTAk.a>#4]M8H9Csb4)Mb1DJNBO/7((saKhj@uhD5-<pfguA//G[lI9q9+ibCW8%;m8h1225J%.fC@#3,E]C(e9/Zi@PQPSKf5EpB[H>&=YFABhiOS+emC01*qMq;SI1[=G+ABcsR50BS]Y(btq^MMS@BVX%oA4H_WbJ%p`,E9[9t:qNmO!"aS&!1Eu%^e5Nbk[/#!-o?P_,qd=+=l.q4l4Onq=T/]L7j+?hB`it>4spkf9F6dBM`+hEf%aF97B.&0T0&LF*n%?R<)[Q@GB5CfLkq\1jgqTdh"LKcU4g?>%ic6n=]d1Nm"UBSML>S!^cB;s+S%PW6*<-K7U9H&/M4C_Cg1P"r1\7?&+i%VYE">"_bQ%/@60MLRa0;Qn"diL?5u9OH^GBR*L+:m,>&&XY5LlLl5s-WK(gNJ;CT.e3$D6-'?F7OCTpTNYTElRnMt/`-t5]66?,O=:Y9\Z!&Bu%VP?V\"sX#;9C=J80c'Q,INeYn]FUks('j><O=pRWgY4AHjH:KPS%<o16,0e$WQt"h+Ls7138kUqgX@$cfO8WkF9^f8b6\VE1tf@-%YGBOKS23A]I,%W.L$><@UFD9A9I^RpI/Z8]-RdiG@MLe(MH4*Z2VOoc_O$ru;=5"._3e9UrgMtMT/sCB8!&B^`i5!#k)9s3QX,n9%iph1V8QesE7;N,PV<^]\_3epNp>dmK;E&k4!E)j`gBO$%f9=(X[/o\XTUVKn(+W08L_kl35d]s-pljc,6#$HGV*@XK'Vm))W,Ji4%G"A'd1,%b'0>g55ib'6YFt/-UIQ3=Jm]PRuN*Ype1">s?/5RNRbGVXAaaBU4!W_A+r&4CbM;RTj72-5!;rQKH-[@=re364[*Qd*+%O'JmuA/:8H;te8aXKTGSC9^Z"&(DWD:.[G^Lho^6,^r2g_D7_`R5dS++&V[6dP'V[F[W3,1,IEY@!^X`@8Wd%52!lu=PF;gX<Gp7%o!!g"8P7V`=dVmab!`A)GQ/]P<3AirBO):=Au[]r"dh1>lq.%Z%msW3n>$?lKNkRHoUd.S>R-YnnR9fP&s74\1S5dUQl*KSLTX:p%ik\mQZ!_do?r0PK90"a>:PVkENqk*;oZOR0QVOe!0IpH*^rS0CQL2QbkkB3,fC@U9'R5Q5dENBQah9l]HW+ds>^Q1;q<":>Qnr-a%iM9c!$=a=)&P<bP!dQgW=()&Fa=@-n-.>__+4NHi@e0p-#[pf.=.%eiY[/H7PDrida0Td3,`^il\tE2h_;e0>&B`bj%r.\[#9?1B%=NVE@[Fa*=`GG,GF4CEhNNLA*mo2lV>@u+[;X09sgFmBMH##8?#M(@6S6t1`l+,#!Y8&asp>e)LH'NJf?"5^jLt$H/J!U@<2LA^t%b^_euXMaCo^[=P<EVJgb+Tc:08-QP1Jei#$<Yat^($n!SSlck-6'a/Cp/V8XpMBQ7626UU:m3$if795QD8%Z]Z2?cAQ,Ip8^Zd)W%UO[3YHmUGde$#ud,--otOe'rh*)[qFWh)($]g:r65Y_'=/N`!OUOn+aX"4T><-el1:#5i>C;&gQ!V1Y5oKE1_RX;-P>jm3n,qeh?%'7h.q3W2q3q*6UR0Z[]fU>11^Y7#ai.J]FOEHTrY9.bR#GD]#+PhI]#RtRHNl'YHj/+s\KQiab4r&+FN/2.7rej[JXF[IoCU*&FP%`gn>tCFT!fQ'rFu()_P_fbYai?!\SP8.Ob0RERf0/25_TTI.H8LT?o+pX]fieT=Gs\52eu^Z(4P_NqhmR8#*>REp9q8bD[CTG%?C%W-;)ZC]N`$::)4@X;7NXGAg;Yj&Z((g:.^53TL5QEF2(hKldK3ZFAu#00M(*YhW_84<7o!?VuNcpt"a7C#a%BKQOY)3dI@*Ca*_q%S_'miLRu&sVd59#(>hh6<*EuKU0c&2<(@>QoL!`C`]`7q14&ImeXM$5N'rR9[X4KHQo-JD$,DlA#>u[c7GMGe2i5Q)MJc*h06k_d%#b0^%5fh>s=`cVD$?H4@2TI:1=od4u!sb3cH%NP"^LtGUVVk___,DMkkVUCfop&1sg']Q1CelM"7WR92*J/<_8lt"5j$9m4`+,WO%.N],=a7@;uMHSRGjm@U*[)p^_n%!e/lig^dW<Z$PXRJ%8`Z&^/n%[Yu\3\4<34>n>o5G"aI9Ia(OLiTVZm9Z`\2Pj-?l2Pe@_P)2%KoN3FmoBE0=Y^^jCpU]p,50ef-_gQ3p>Q_2`<+=nCibf-jXo2bjiDO'.E\jqQ<:&E#+JRVl6#UL<0pjF!YRO%Oql?<nj"Y#;OFpU%8iX^&8(NJLP6LsIr?68I(R,jUb*2nLoX@(Ih@.e$Y;VN&*?hR58OoUm7jkoZ_)_9h,ID/C0jT*n:Y5=Xb[0<Si;JtoDe,@?lK*0.%C<@c68%(6GAmYZaBksVF@Io2e%Wq7?4[(>a]^,E7Ws.p,p])P8&8hPmcD(W<>0WK%eTd2B@D.e>#3LU%f8Mnqa[^X4MjWjN]OQT2%#(Y=lS)N)H>rpBFE\F<91k1(mJI`N*V%>/*EVDq40(3b@bXD(;#VcC6<.jQp*ea?nTsQ9#D8PB)$/13I,SbcZWPZTb8-!;'4Dp)!%m.^(E-A[O7Dm9orGCqaLC)@CM`]Ep#S:s8e;qEJY+stq`Le-?cML"Ub>A,GSFXX1#6M)SkWbqB"g2qm?FhB8UCj27*0Zt=)<JtQ6%KDT\JMtKc5T`EC$rS*&\J`mF+#E)VAn>%po7aXn8;L:tfgD#-DI)eW/M/-o9F'YV\JPs0jWQmZq9h)JLpK:uF#6R"R;P_NbPX,\4%e*+YpH2V\6istQ>cZ-r@]g/R8F<QiuM[M_l"PSc+d,#0%F%YO?Lgnqo`>N:c\rsi^FA1i*gSm(H2Td9>l%k#b+NBKW>a<[P`>U:.%i<j&B<dO5[,,O7/Nj[ZW+=MtD7nYss9Lcpt;uTC42;!0"<XL6P%eW9q"%_2(Ld`l%+Ta%nMk+l2@07o>@Z!u<AM"e%J:TBI?0rh)%0FdUi!-6eu$*m/fLY[oDRC$*<K<Gbch*1;c'Rij5U]Ra@Ti`PV6XX=BJ[L.V?(,ZUpFntFERMF+GT+rS)PpYsP5mM(@%tBIIOaL+%#U3OM[\ljOp-o+eO+\&Z1lMFZ'sem#jF)]U88+3j3n1ICSAb?mEF7i@OMQ@T-*n`Fj02?u6Lh+RQa7s.Z6&Uk@AG_04n4O;WZ^0$%VUNpV;"EnIf%mOE"A3tP+(--d"R=HXJTrGFS=KbjY];-_3E)K*[Nus:"T]dOU0bVUYuKL7lun4TrOLn]>pZe5_.-OS1G!B"I-Z5Q%k4<$KI'Iq()i2P_U`gH^4kE!Pl+=?40&(^X=S[^qn@?5PXMT4O91G;]M[JT.D)-V.#&:?"O#Is+frBJr_,kDH=Hsr79O&qA?:#U>%9qH#Bnnq$M/BICR%];BeD4K@Y\S7McUo>@JVFa50@(hNqZq7WK!$Lj&n5[)*(e!EEM\l8b\/FXV411`>[$9U0*Ns&B*q!,Q(GWY&%k"/9b?J:V8lgnY;:/@Y?aNiLS*[D$%YVGp1MWk^eVnEB>?T5sVG$gWk[\XRC>U/;3AU>toL2DJ!ojn1AGcq?am<5d[.d:%k<ic+4%$f2&AdC01MI+2CN=[FaU2M$c)@mUS3hi),(;8fQG0jI@TBP/]/]?eN-ITm;BB:o8WBWfV_U2?Em$"k18V*H^Ln&.io/6jgpha9T;%Q;G0C!p;g3L<(_9#-q<Cl:mmG"ZSR9E]9p!K4D[Rd/90-QQG%](8d1Bg,aE2/;CZ6LG4)87C/EUZ+4'hbf!S`dC6p[(XkjHc5.!?%qn9`dpGC]LRIo_[><c.]$5VVa:L7=Ygt2amX"_6rDa''?'$Q\cE-RduVXJX_7@T?jdX'hm7b`Z:h^/QTY!&1_'$V/XO1B/#FD4Z;%mK[b]5M.q5rC_9P@W!&sR"'E\m97ZEY`)5:+(4#gm@o4*X?uIh5W':D,J15KEm5nt,%'5D1%n4<:;<6h?#VP]-*K0hCk:GZm++fX%=3=R"i*F#*BVEl'&.tkpe66*eI3<qLk*Z7#-[Dhc#jRurD(Y;_>1Q[#)?@+hC'/OU-DW\b//YC)(gdF2WQ0o^^BnpkJ6<Z=jW-"Z%g7TZW*1)\9?#sk*$#NcYA>d3)2lj%9H,c#rc$qpLr;@PW""j4hRhf3oV6,!&2m1Csc"-PTY)T["h]6UY?Fdda9X:u4(&+4agU.!B%Aqu<f3]`22*^eClQZDFh%H#U/?<i&;D.Ue=qjF:mlh?KX]JjI$$8Or=.Tb.TGh=JM%pR9hONG%kUIN[\FD!tpNZFI)a51iOB'EbW%35gj3\<`s/bO#@dYG,'$H$bJI)CmXHBmN1?.R.*eY<^l#aqW-u@BclYC@_N6fJ\CtnuF"%Rj?nuS](/R:1a6t06.*144DdB[uUC[%nSn<sE%JJC)%PHHgf_:f=IH*"nk/@VP?MUDZ:i)l7C(b6.BQlWY=Y8lOFQc&-eJa]:q!f(IgM:VKgS-t^%TA?^ccUWq07*h%(5!"%XRDMDn6H:>pDj@hq:*Zk"F0+kXPG3ZeR<]1UYn^8&RP":j&D$qgmFM%pt5oFa6p3Y5[Oa9s*Mf#n/7e/7KWA2osp(=T",Laa$]6U%h&WrgTF,KpSmH*=ICO9H1j$)@B/]H'^I$1rHP1%Tfl?9n2&"nPicZEd7.%Qb&"4Bh[I6_LOC%V]O!*fOQ+6"m0cH![iPh:m]DK$G%3eCT*\R*T*cF3HtBZnUqc>6I@K`GLjIW<eE/$chSFfpV,=<;]/)WIp[$PN?qZ(1Oc=O,K@@pi3uSS&q<iHT85DTV:u/TGmmA/`]G%1Z!4[UrS@Q0!i17Gg&7H-[VXY$hkf_`cl]:Wf#QOlAT6Z\McBsLVr:&QV;NleY-kYD;Yam&K&nC;mfaX5FL%d2Vc'V1=B8c:::h,%fdl/FUL-AW;\%2HZ7NHj"P0E&)U4;^$,Uk3JH9a][VgE'rAIg()j3OW(.Y^@H4R<cfA[_BS`=b&%EO$/#<2'G[Sm5G#h*SEJ&5FF%B3K]X&T'5MDO_;_QOMDFN.l[*Fh$i(+c+?9o>f:M"Z)<*IaDaMSFI)Hi(TB]YW]jY_b/2:UZ2942?f%4_o'MMHfFe0[Pa>bB>khB%m*.dOR2>I))e[7oDHh:[bj4lfDCdU%qrjGPD[!3D9S0^0@?o^BJ3$8JZ!1SUJcis@cl=Tq_.JEm7Ush\j1/Be[nEW7\"$0I:^:Nt%icgs<#)sJ4KC2am@4"h[fO9J>DA,HK+ECu5Yq3]Fh/9Ht*RZ*+G&R.6o@68W1s%o$.+*9lIH.#%kjIjZD&-H1'*g=gY_d?b;Xi\#%h$p7/3m(<2M9r-.I==g-Z[#5AT$V@i#B+H&Qh&MJ8$,'U?3t;<9qB6(qOR"UW_Y7M@GViF#`^f(:Up]OE*_gjaX;d%A%p!g]@%kT%9UN2".W,;'*^o!nFo.LdaTF[$4b5RhRjB;`9q`@mEJKiX]451s\sT^mWQ_fplbs6"[`od@P1Uo1I;rnHc]nj\XX=0-3tB$k3fW5T%>n1=EC-sobWFN7eZARE9/#%5U<"),HQe_9lhp#/08<6(%3]g3R3F#%k!>i_Yh[R9QN2PUQ7hhbRhq\nL*:pZ<.L6JrABU':B(\%5%L<$T2N5fMC.?K-@X&S5EapORlL8e'),au\hTlj4dk-%inI]#3E8p])L/Ek<LWR/J#q(E[_?X"c3=.f/cd<8toCXI%5)Mi;+alNid%#2SkU\+<DZ6-+IS'B@2@+>_7,.[MF9";7+eF]g@J`'@g-eHh/Bj1&.S2.i;^C2C$?SOQE6@?#-n<mt.m9Mt%5cmYnK>N.Q#FV7A`%m.#E5k.J>c,Ab#]K_a1D\:c'A2*(;6Q!P^'\DQ[$*f/2Gg(9)V)A"LLk?,/]-$VU?Z5KP0erIK\DdtL@QaWc[$149>)gfZHZG]`e%?+][_7@dmi!.D%@=SB.mQiep3Zlm4?o7\8-1uq[56ne/-M3VC^olN1TH(-Oc+Rm$:+<ab:)JeIuU+pdFLW3Z6C1us_4!r?;,L$AL%Q+9F.o29cO1r^MQ1CbCLemU#=bf#tQh?dm+O6<I#VfK>\pIIio3T3G^Scmo6UbV&gd'q^38qVU;+$C*X_*>1o1)^8SkEKHdVr5n2%-MO]\n28*k?,M(g5&<d"j.FT<,3JMs9aHjbO$QS-K1G57>!P$:Q*Cc!IBF5TQ$ro'!iYkE4lj'QIH@*Y`VL@CM)J3SmB-UhQ!OYq%n2KlS5dR&44uV1)1orP?`X?[s#q/#`F^1m;VY3I?BbRW"YcEl@!gM'r)@nd`bs4Gd%p1kfPSQO3SHq#T[HTXM"mZY`2Z^nG]hW`$%:kQr4T@sJ`bSMgoiU8]]3;m0--#.9[kih!VUhUkQVa/Epj,-OdI)@s05]KGuSH:j\,h5Ea3S>fJT]UBrHCd9oUMertFI^&$$<3iL%DQo4?!Ho>oLO\jSGFO0?Ub'*$@T(ta<7$Wbkljm+QXs1.Ej>DWAtU4:]f!aXD`.V"WcVs`7%4s4'2Tg<F<D=O67\bAW&FFt(81EJ%=Sb$^fgr)#/VNa`B;:?7Wq<?lPd*r#[K8<arFfn$d'1O3$fgd]"DV'?WmV:SgU-(b(Y(bTqo5[%$blE7'^36dZiZJj(5<8)B^0<!%?D@'8MA712?3Cu-fF"b6GJQ5fh%CZX(+hY^'kh^A9#NUg<TsP:7l+0T;Sjba"`<,qPj_L.E?ihFlRK7Vkfm'"3f\`jo]rkJ-Er6p%cG(615rYe:gKjhKTT'#uD#t&\1'Ch-3&Abo#!_7T`n2<f!qaXjG\On32?I`%[4MY4oIoO;[TYDj\HV2\#CA)RbaX1?Pko<Bafo=[%.,=V'_*3d;gT:l*Q*#eQD*ZQPlh3KS)/(I6jr\(7d,^1nVV^[X(81Z.VKme/,bUr6bUcPY.t5oooK])#"],1fZ:ZEKaS[e2[/eQH%IMM(IV/e9o3Xf,VJ9hG)X>ol0/n;ha>mBTPL&Nqli=E`Xf*t-aTm>&uB`Kt>XP.%?M$lj>Y=pD"$@=Y8FNGp3I27Ie#Uk?]22-0g%.!p4KJNDCW@3)iS$ALJ>1d+tFb0sGS.F@"TA!tb]4g$_s;%/XsgfO/8@>S%@UYouR,#<in)uY:QHRI\4!)V:9Flm1N[VjX-_i(F5%O3I38^[]$EGe2baHU;Ja=RO9\DL#uUi1s3#D0cPjV)FmQC%UqR,^d>/NS-3_psKs<Htlr:3Z&O3O`55ab4<9pF4Q7+H.-h3o])&=%hr^gsK-jc:VJ`k*'gqfP[8'gd?&i@afQ4lDohIF>c4d=LBOkT-nhf5S#CR'YVPheUgcXM,e(*J7Hu</t<7o/pQKoGr+:ND`0brC4%1i-nP_Tf$tYmo%>QKA?Ha1"1Ug0+fWp9aX00p[:#1qV"jVop'lW=7X:<m&"apW_OKa=TAW>Fpl33W"p/DgDb5m/FOXMk2m"I^VAa%[<qjdlb.l9iT@'!Sa00ho;/p9N4QVmMqSfOq.U@d*Z3dTg5So$c.d-RUq+%ibV>^(Cu)[t[jDc9mT>t-Q`bS9F;l=<Ve\bXO0qH/%k1Q,,4C.#T;PZ-=AgS/3?G%Eh,c-A)];5S1;Sfgo;4aZ%Q@&tifTMLHHt,hb-G;9rl-VVET?8'[`dqAOp3b%6bMOM1g^rCBN?WTT%aNgNP21efsD?;E$$(/b>GRd^9UbCJ7&>Nr<K"pYW[X>_gV0<e1bB>>EKpdtFi'qg+,KbV#)hE:[E+*_I5X"8-m6J)D(]-fe`bQAU%;5UZ'-jXZUT$uBpo_rD*W(J]JS'cJi",2$G*2n2jW':Zbs/-a]%("17B9^*T_0W*tEX(Dj.l*c'K0csHMPC,&5eR7:rJqa[!A-sO%hJWY!:%top5Z.0g"XjC2#35aWAm.@lj:7h#/@ZECMCB<+TgrDj$Y,(j2?qoZ;49;Ba:u+7BE<[>\)Dk`;aK24\m&C]gQclFP'5R-%V.R]`Ci7?j>!p!I?9jsW4^P=q<[KH_CGX)T1>l(47W>nP$o?r2I)]ek'u8q*D>NE&b:SnMBiWAeX2npPf`2GNnM)c;JZQcjRR&P]%2K`en9RLH@!!70'J4f+c+5IoeAQ.7k@.Tc(/b-;,CuSd$4TV;oM59e-O%T6R>/nKC@_RQ"I^t_&0,rb\9r?u(:r]ZOH9M*,Q!l+A%QrW9\eK-tAdMci3ZSDa-31m1:_,g^IW[F,2-j_CPc)!Wl$D&`PTg+@.e!^X_B;&9;dgHhgaY&mS5F&5?Vg7rUm1I`iL$&j@kX0j@%]B!#gWUr`5m]/gZ\6FR9Lon`mksIJU7f#H;:%Er4M_YU]jd2sP8t!)W,B"R'_<i=<M6[4eHH,]k^S4jN:0ndDS+o1:0*cIQH2,UO%HK93\[=o,ICW5r$gK5<c/K:>3;dq9_0W4q9BtU82e?b6&"%[Lj]ifJ6H,DHegVCGN;b>c$%C5=YpucWX/#S*M2;Y0;(7a8k[PuLS%NJeZf<kbBb(SQ4bNmGa:HdZaW9sp?R#&+iij"a)dXnlA(bQ^JcMR'")+/4.$)_X:1NtIUu/EusEV)8X5;.YMkH*p$mVF]k6ID5uh%Z:/*aPo.sXRNAn_l.`c&/A/?44-+^pa5b[0I:TRIH.R4ZX0[i9(1]6peXhiH4#/s;Z:0qbPR[Rgc!A&j8?m%9gMZC*JZakDrgDJ*%</+`-NN)ONKggCT@*Sdc]j+r'CDVBUJsYfZ'n6Ko08Pi]9&R63DV>YUm1ROf5@+p.kZd4O/?LIX=Z&B)9htsK-G@AMX[S23oM&QN%gW_;9lK3V)Q&D-.$a&O;5M>FkPX\FKq6jn!>=,ei9UQ&5FRE)<@6hF>V$/b-.)EI/&ZL>!S$.c'k,]3k_16DPk$JQK=qfqVR"%\V%])t*Z@L5BsnT/>cQnllG[QI[D8>cAgZd;OiSLiI!58e:8`ZN:,X`</e34<X=s+j3Vd6>j\BjGMSBWh-d]mVn\c,-HC>4Q,ENK2!!%*kR"&W2:a*k'>>"mM!M_]\XVWACiX-&'rCIf(D.^kBH4D*2tCOdPC:rmTeukL\o9I9Qt\'I$COW>IfqHO7q4:=\Q(pd_\2CYQYW,%YKS&Pib_+pP80HTY_m_3**Xm[A3%4$W9g#I/"'i#D;OKLicd!#6<0=q6Z(!UV.IcF9h$qp&#)M\MS-018rEKq,c^pR'K'nb_9FB&%X]>5b'*P+>gO8uc.%qJ)OS]t$i%;Fg!%d=1q[EOucYtjl)tX"J>XU.b:s[dO;GooF_G:-:U:'<l]VMs]_>rIfTBZEQb1r$gWFqU-%ApeMWXG:T[rsl@N'7=E450b_J!PWTF=j'bA;I#^Nq"7$@P(n^`eLe7piiZ@\p`[%u))h9uQ$tYU8s9VV71bakp/adqFiJ9UG.h(B%<Cki,jTe/?PiT`oarArJDHWiH3t!$$b!*DV-t1ajLnODH(@'2N=8bD?a*ePE?hIkMA5%n_>'ZA!fX?YHi6JuEZ\(=p;m958R"s*g%Nsp5-A';]1IM#7("0a)9#3K4#DnbT$?%1<5Y$qLg+Bh99i!@C!AOj7!,IY+ujnTP%rT!^:?hJrT84g?l$JoN`'4iJ9^:Yd&2>sPX%GQ.hL/\/O][D&19@%:TsFup.`Zm0$)A+l/qQ,U%j2a0[!X=TYpS#jfF2ZQj%<Aa$MY.Ym>_?(spg[_>.fKNDb\,V;o>DgG:?qr$5%[Bn^N*t%mdS"'KVN)#Vgiai_gZE>C^XZ='^2'.b*i)KQf1!]`h2(k02EB^[+Z*K[K`_l1"G549XeFNIo[ch2D?n5gY9U/nC2rS\E%9ZD*"Y-dU##<Tl[m)ggj[Q>7Q2QlReA>LQ<g*UG"?KU*Yd4?d`9nH:C99B@I)k/D4L'l%?M^Al,(a7uUGW=@L7@sZ6RP8j^H)-Z)%#sqYhkB"E;`tiM8rT2J[7k@hlX$p6pp$Eja0<Dj]EE]E$B8`T&N"YI%W>9?2"dT<-_A73BI8NPLFLX>'R4?)g&L0hr,F4Th?&NP1%o*G&b$a=ga"_k>Y?cWQXWcTD.X-&t!I5ok$7.i'TXmCI<Y)Xtg1HhKqBiHdS2qH$Bglg5Q2[Wq,qhgD^FI\=p+P*PUqo;PJ$18c:%mC>hu9B.!m?=#p3A(>MLriobcd'b+3Df56%aBBYG%A2JfYAC:OHn`Upj1pm[Zf"YtANH^()hPp"9HTNDKdF.V`LhL^k$Nu6Rp1="%@:$%7+MLq:`L;8rhp4cSqa/COJ(P^'g7iB[#)TlD<,Kt7=1f^3'Q..FL22-C[eN0k;qgCDmritDq:;Oa2N/C9Abc_Plt's!]#;b1%K\TJ1J>n-9?]M48FpC`6r0^11ljfJsIo&^>jVY$@AQFmthQ>#mICn";)!2UKX)u%`R;R5F(Ep27Ot)i(ZP,]Ia5kn2R-suLOp6%;%Um*q\PCf?@EpE*pGLA-G7hn`ORB"3oL:_LOjh#Bg@.+G-bFZ*\an!?c`4r(cpBp6.gXZSiRbSYmD8)PN<S<N[pC[u!Nm5%RNGp@4%$1<B%?5Q_U=*5*-86`qiAest/Ei.!5%pkW$KkKEQnG\Z<JhqM\:XHrAibt?\gO4Y`8cLH6U"]ngSY02u^#9LId-X"_-U03X-YMXd%T:fDGPQ0PLh<kqubGPM.IYMb7$+aE?"V3U\\,-<annGq$T:t"fJo5nOmZ5]@m;AiMs.(rfgJ!j=++!*rjT0#X[d>T-[Nhge*.&VT%aIqWlh>0.)fcGB2/@p3&g%$3Km3qN%13'6g-3Yco%c>%4AL.p2V.<B#K'4"iWN96/jnU<sN-k8dW>+r<e^:Sh1UCm\$79-?K@NZ]%+7%C'.,.AnZ=*jM6MgDGS"%g';Lk!A2gl$0R\"n3?-G<^l,tJl/:o=@0C+DU%QZACdOSDOHQ3"$Wh1j&9.AL%U22@$95:;:]WKV_%TPT!o=*0Z4P.#\#hU3"Mp#(7HH#I>$rSBG=h$Nnn_esf:rfpH/;]dPjXb^\8bcdNk3u/f$)D_'.$5*q1f^]>#V)cdO9D\\T^$/^#%9@#5<"IoRm.#:VfhdGn@7)aW>&pm$4\jTD[GOP:PGO/\5RcLX!bW08[in?MS(YjsA-)i5V<2Ia`B2CeXbp@iOYr9fRmlVt9STm'f%O@.V^YI-u[.IL;tP[pfcppqe+RT86QhgTG#??V[N)37DEN(`gtanqP@-P5g.e`WZqg(.W;[QLd[/?fpT.uT5jo(WDr>i8>Y_t*SW%Y.a8k8^OK&-*mD4YM=#(CA;oc5"gOR^iSOY8n]\MNLj>+R`G/FaE"M3qqZYhA_>^W"C_IN6*PN^"Ca_rA/\#smY]j@I]@i2^0Z8\%U;koJ"cT.[+]ffqe!RlpRIAaf3rQ_H4p_[)2HKO75-,8hg3&%]H"]*Kb>lhm%3mTL_YG]=rs[/"r-;kpkjIa&8RT%+XrCM*2_N(D%l^K7sGOuYT@^))Qe_+_PT's<[\[J#jTe07")/8hig.k&;G8U4po_IiJF^Jr)Fc9kfe/G2qjg*`OS@:.CrDfXs_7od9Y32u5DcPDO%6eooZ9V8M0SU9qcoW]QJ$a"g/HYltRrd/G?oOKnu.&OR$[<<GXYC8*'LML`ieko4U7[]e`>L+\sHY^RhcCiCkR3?mV0\+Is^kg4Y%r$Y7XA$XUG@5h(PVHZr'QcPGi-U/er-+s2O&s8#HQ/AS_h;CKJQC\cHko@-FT9F1h/L'fJ[U,X<O'QkK;@W)b)(\sX'1B;WNl[=%%_V5<jVrq#?'r@TmXTHbk&!!8j>E'_eOaUc_5asSS6Y[Kfd_94;Nm^Z\dZK]m7J7P@<tB%kW%/DAL7OR00:$lB_+SX64=B[AP7W,-%`fhlX*K<-dmgYa(*n:"/BB"9UB',@tQPLs-)1K1RpuoT=I&A$cg3f'1_e]IIElUX2%,BK/D$PV]3^$#ZFWF@NlGl71Z>1o"Y!!%O%FS&TDlD^4JSh[Od:9$Vs#+rQp[e8S?_i9(OhamQ^]U.,kVJ[mZE,M#_c\NODO1"/gNHRX2gjHWs$.['paW@GD_i:(H3at;.i,$5D%jhoabG@M<PQ4F57fXRn!*V//Y]n^.2I(8lnR:\XQaa^:%`-'4XlaH+POd,IdaVS/#/@3%A]#..7?b9inKJSbIq(YP/_;(hrs%-f#%hR[2S3*5A/hFQ7[[[eShF@NspU6,dCcbo@m44"kVM!pGI7<BlhMc;eH4[@^'@\$:Wo6G!$aFdZf:2(QFL8\]P2;^YV1aB$t7DQ?t%p0i4+jjO\aVo,nt-HBkB84)S1@JFrK)r5?g:0)`l[fL8*P7L#LV%UZakO&gIB2i6L@F%9h)/EsD9WHusiQX'oDOVOUQR;No.PWKk%L?9b)45NCd8CPXNIJJ;K)6&MGZnbNdI\05%C3ZIGd`p-te?'C.cV;.?:fMbia@K<Q](f)h1K"sYak\<b;sJZ<oWXFC*[&1H?.fr5%SiT^hL+<YpC;Y"%@HaiU*J`SjWGq8%@ae#)U[qu%1>H9XIEY[#qE=>_+r,""`ho".Vu=aj0)S,:E8Xl@8-U"l's@3t`-A8#/ITIN%h!0?,C,a".<ZN3BB\OCB4g/bMNfD_?laURp.;*-R4OFi^-Xn)K1@1=?VQUgX^6d>X-LUVo#B/PEGf3e0"._Pf2_lD4KBHD$]K5N.%b_UOe`]2TVcpRD:*-LG!1F-l&V]WIns*=-1^A<6El/Shf5Hf"\fRJ>6c)&0U5DT4'bI@LX4h5Y2n`lC9a+%CKHb5NAT5Hhhhjs#8%4aXa55!!c\`9NLGX.TR/(f,V7OR./Z$GL.R8Tm2kFRoNfYIk"Bb:EN-Ri##pPMMh<k+1l]]NkhJ.h1']ZZdpb8qpVpnl5U%nPrf!%gV=60DfL-#2buVe1*FL&bcQ*&%rKF+MZ]-u*i'BIC0iX4Cr6+W4S;lPG,$E;G?aX`('eC&SQOY3%EPa]f'Zdjcr+S$E^%%CqR/!/%mENET]:5_(p.B6e4ScXddUIY(rhmA4D3[:'p`A>+4&=T]]lE)SRbt!?b]O*W-_#s:E;%_#[Imb<N;Gnrmt/#]=0=E/B3r`50:,`5%IbkXbWMJBEWb60n$`Ch2p':$T%R4u<3@97L>.Wqd&?WA^DrNiY3p4mql>T`Z7SO*#@l=$:n]i]YpI@8cebpf)VUb.ZI#%C`82&(B%7@1ZRnqOe&f3(oKV.W0A>Rboobr>:4ch1$$&\1q?H8RnQpiKU5>#4GC)Q)76GsgF,BOn(cEi#-AkqM3AQ>GW,o's"Epq[B./Qb+&%3ajpP'8LG:$0,[IEIEpAfC\XcAD)'!X6l<m+g2K`l'b!r]@GBSVAm6V3K7jdiL,bUaJNa12NJic*h#gTjF"?/jDhNjRSQ4F4.?^`%P&omAmnk&`S$"V`4k4A[VHg^thWs7UFA9;fGh^>^ZK[ful"[,5-dJT)C0f%TS5(tJe'okBEa%.<9t>@bT@/t0l'`C]3mKt?CqAb"%n$KFcRRlD<J()N:)f:@SghaPK;L31?eSMfGC2?-nh<5ar-_%:3CsQ(el'cYW#/?B]:,ZAkJ_&:H@qX7JjjFU])&YT,Y,N#62c38?%:"M/<9KATF8\HoYc_bIp'^M=0r^b^a:!/ikH8]'X%[`Ym-Hi9eYgd(;L1d;_P'7[BpT"hn^A@A.a:cDG7+!/DCi5IDVn.$c]Dq?%%Y4G(\4GT?>eb!%9mo`?E]t.(u9c3k9?.YT(b"W`NC1UI0[4EjIkHTSD@.gFiT[9+'lC,K*;g$o!incLK;g=\$L91G*\"!nRnugq"%`CMPJ)2=O4))?Z1VG,klC=mh2Ea,#dJbt_'_I-Z@\Joi5MB9?upq2:'Ii8%.h'hFu)kXY[q6d</T"1n^Qc=gK7LdAeT",g+I.GA)%gbmt%:jM8B]SIaoF4^5aM2@h7S*>;-EL^\0]&!f2?[8r!El-,kmEX5P/?Z':CeoNQE^ba:\s6qZ$PV^oI(SF.cLI&=kGni&`].a^%BCr!ojt+fTe%[+;>fn_$fZGo`dlI6S]oh#hM!WE/nqimmV`D&S;=re)n,82Zkka"joqmio2SIR9O/I7AlLC7f\lQ0i6Z8^Ca2P2Q%lt/E3:1o`[>+n90Y7p%q)fF@?;2t-Aio23o9ig.C>b#D8/RM>5mj9ITdblChY(8VXeV=lZH[]OmN"\W2lM/@1fWMZHHTV8qSF*+E%fTa<#"SZFj6`npTMq'W5$6/P,e)8TFTD^V2)qAKUVYGc%e%I3E@/+h^iX5fYg[TA@+"s-)9VpJ_6iK6fj6fr`3ob)jqqMTCcejkF%T30M*;7cIF&sigthkTZ0db=#'/X>;=pE:!n0p0;bE&VccAZ$@4gs)&#L>cYrh"_gTof)<Y(krJQgl7`t38t<im4[Qq@JK="GE]e+%2jM%OWP!35Asg"cmQ(t"o"ps1Pr=oGg@.M*!_8g%`k2/Y2>?K4LKrIab8`t9h9!drHN(Oo)5g5tO-:j?nnBLHBC`uE7A\8:p>8I.%5\I/kW[b>$d:p?3Y#Bd21t^_BMPK@DT<F$5FfLZHK^It!\dcQBKe=f)'e@k(Pk/M%A'.E=.]`<]4Ib'DF,C[Dm;3d-I'ksH)sXjB%MHfoqlP)>EPVKPNd-Kc0%npFnF6RC]@`DS@b]-W6F\Q>6C%Tbe3Ni>;q:`]ih])FS[p'[fn$R:P\2j)#O(aZNld%c'hUF7EF-$9+%4D[134iatfl]`r<ehG!^>l24^mcGIeZ-)m%Z#a//Rl55c=TcQ_>j7B`&Y==hEX1"SQoV;aj+-IV@!V.aq54!nU=i:kJ,`,#Dj'bl%\rq!75%!(BC\@L_rN"Q$ZbLDPYP5L&rThXNkSWLCDpIjrmoD;XpJi^3YW_fjqk?(mmc*#[!RKOa>^>8r,^L>J9,G&*=4?Z)j;k])%MfX5^8U0WjIl$[\:9;-9`r92arVPpW_j3p$P?sPW[F2N^WJSOf&)Ed0U!i3fCb&.C\C,,,>4V%?`eC;>[$c39i"HL#WG257Do5ms%V+VUXHte(M:>XR.5-cj-Ma=n'?`FEfW8>5&rbAHTAmSPcH=Q-uqmJ>oSO#hl&"g72HK3k?S$6O&<Nu4B@C=O=[B?<[VQF2)AGc0p%6gH[\H(bnjjQ4D>n#."kM>=r7C!G^.f!+@["*a-?[q[r/7>\3WrdKWTPA8NJWo#K(i:L@Mo4*Dho8D.-7q&D0'$U@FfDH.SJ"O_`%:;rBGYc?[EQEI2]oqPNh/)A#pZb0B\l"F(431%YaK/4_m6#5(NlbTUKZdK$tXVroED-2D,T`.n6V7U?K1VL]e)g4iSEdD[9;^7k0%o3(Xi3'3_\lB6;Q7u8T10*=s`>rCCo]en\D=1u<$FL?D^gR'_XMYHuD`l-Vu9t/-%qtAKuOnPnO:Mt6(?f.51]W=MJ3I-#=oo0H$%Xl8e)e`IN`=mJc?eLiqQ6XS=^E!bpUHtUDlE+NO]-P&89ebMdS\#=`lmHIVAjUJh]_,p)KRpk/B#Li7+7g]I4;`?;ei3e,;!d>+W%\9E2,:>B^$m&J7R6[h_Jg`XH!7,s-]*<*$5a4T/DRn`4W&akI*pAJ7o*%@"D8$,uo!FHAOk?t)*X's110,iTjdSBJ,K@*`[Qk<>d%mlN_6f5sdPrCqdUT-0E*KMr#;V#jPfo)*IQU-#WR3Bo*kC,^dq6`:Y)),*t=6hUaTe(Bc#T[>SSoT>d6HmJkO<_F5u4$:N@H4BRZ%KIjpA3Iji!Z?m?p.h@oHXJXNmpFO+_3Io$,ab-o"]B0*:IY#0imB'"kTKU]YU6B"gJ6d3r#N!ok1^gO'im3-RSK5!9]B0*Ri$2%e%U0bf/*\e&LX\9-^25tinAC'rIi^`f*pZ00$KL6gBX%)&sc(f[C%.hX`jYL\q1%j&l;80k1o!BJ"dr.F!*+H?(I[%&'0"'q-b1C1C%VZ/(%^m.f!4`)GtgXaYG]%mhGnQioG?>drG3[;E*f.`3@T&SR&p0GGLnWRj76OeOsYKLY7akub1r2O,u]:fGDldtrMW/9C(P@g9'%h,%tWq@,Wpd[lX^ak;71X+"YUT);m/]'f&f^I^2k_SIs&LcO*f?^l]*q-CbOkF(td5D==[#/BHT2/YG@?,(81J5#gB+(sDP]E`nu%GPt"TYFO&$+9&<i"+0SEn+uj\hs.7kc0n_oriY/:Q5l'Qf(iUd@5h"Wk?U=7X7>uHLo6nMht7qfO,a+@hr%T7-@(ZU]?)#i*oAq%%Yj#0&/j!*>hXqhXKaY6K7.9s][aHrV`,,amlSnT86.8Irj1O^0VFpH[?^Gs#nugm.=8`>8%#sbZhfQ0PL:un3GbY7[743B4YKdru%l8S.`YJ0<]GSr4)4h_6o*gZS$^T"ld2tT^nNplL4pc,arEI)qV%umdh5p)T[>sGKgnQ!?h%92B%lSmHHCX#HjnQio<jh,lhDq''6%FVkU9eZ\:RI+Z&[UV+W+q(QW6eSi+ppdVsMU[:4Y$&@K&s/I10-&qI0?^7".;PSeBpD\5Z^[!i2Tn^0s-@4:I;c_W%ShFu1e^)RC%+9,W]_+nZ:DY;*>qDHP'r2SZ8n*tP5]jWDZqK7(EDt8,NlEC%mjHsQ&BtWaj3#URW_c2EM#k.U!Nb^N/68QWnIY2##CU[cJjua*!%eSf&K,fdUk?,+3nHeYJ=oj,>KYPLu8YC&7\JZnm7/JHa?GPsul4ZN/IIVfJ1T!aj4H.T7NYhlF0rm#l2drhT]ql\i7oLH5l4o)^=%K6M.3m5"+AIZ8_p6L;MSg(E37)nqXqNHb=*-cAUmk@F&X<EQ9n#liE!k`<Gq,e]XdfLW"NHTAaY1(:e5oLsY4r4H8@m1.ph]^!dJ%e2@(3/,3f+(98T15DF=7)tjYH]QQ"A<IQl#V[9jIVujlmrh0Y@#b,%CZ$7sHIeh4D?G'.,Eh@1Gf\_a=>amhP@K5<Wq>$<)1\:.o%GLL>A[e/V?Xl[6KXY]9)7="ULMc7qtbh`-+3-T6,dIN.=f@e<Ga+'^dScAW\n]$ufO5J5qO#OefaZmPtpi,otgNt%2loZoDHS=!c%5CFN#]CXA/Nt4JB5.S4OpYb;*Ru;$Pr8p_'C%:**o\]OQ*\:UlkM+GVX$?@A+"s/;hiCRXS_2]M>Fl@#ICufZHt3'<;RpmniUZ_A%?T*N1o3YSnpTLY\Qok31k2!T3qYf6H$ereR?nJm/3EZ1En$V*9ah<&;c276!;RYM]/*HX;5$gGEj35&\mn!(2Rq[0Dqi.FF`P!);%,]c$6/\(=-J$]18_sNZ(o)5-!l,^;kc7Zg.j6,_![;-^;o4s\q?.tT7+O*!"B<H`6e?#b-0R<Tdaf4b+=2/AAk5N)=B;o1bK=ANm%B2?i<HS@7*Wjo9[IK%(CS%$_VI=1?Y;P(Ul/TGg0C8R=VcK?.Es&IlaC$irt[9MhWp-65oV?G17b-]s]pIA.(LX4`N>q\BRQ4l15%H<ioPl[tY9P+Pl;]b_tRrkAC1l.+mfB31GBjPBD")q"L^L#'Fjoq*U]h7L+e]tLmSVO+G6NKpC_^$i_II<&W:)I;6*\mYfO^=M]B%c+b'.LLjn.p"]J]g;<]g>N(Rn.i8)T[['9qS?Fl[5CY>=j_(437rQu9T*pso^7Qb\Iu6uhS>W[b)WTpPH_9=K:JUQSG)`!G:S,tZ%:p?H:Mu$MOZ)`6:f9IZ\WuB3C^8kVESi=EuqQY*:rtM*:Gk(1TS&H1fJq%*6rG_GH`n\;:Q$4"0DEN?UIdPG<J%l?I0.a2,7PCs8%^%Q#Uj+mU98oXUk3Ve:_>8rpb+4bc-LY$V;)dOPVK)X=[2,\iG.-B[bmhEFJG8@G2$h)lkpWh_>4s]Um%m?I')6TUC)JIs+>1V$'%`Up')lRlGWnq_aCLpZ&f=JEdU_fOt(m8Nh<m5/SSe,:TJ5(>#W:R3I,ktAO7j]4[^)PX6tm>"Io=\;?#G`m0\6qPMlV?Id^-Zo=-%?g"96B^s6q$WP:Q]'o@?p"eJ[Ze$77s0JtVkLSEunb3-0.psH"I2G1hA,:MY\A!-+,`5=g+?lYN52<Zd'X+E!+.V&qq<E7qiS*=E%;kIqiJ,^W6WC$#&DjArQqPnE-c.DL>NT`"Zl)t3m?bMV@ccj!Jqtn$,@C5m8^J)Bp)b4*1UhIMi[7EN9f"@o1C[8>t5K3P!@L1c!%n:`3MkEatomBp'jjQF^ho^dT_K&.9VNF%*TgcUYf&$)<ufhqS@hpfd=gh,[QMl2FTg3p'R0K7:BMm'<j#bIX)M+!am@gJ&ZnrJbj%=F5HVIFXNRj3rq\8ZAoC5F[-UcqgA78^$ZS_CtA,8-hj<r"(dtfA8^Im&r#VMed)emQN5(WW)]>%<gU1A9p/mZ2Yg4+YcUk82e3S%D'%h6T%:L!RqZn?rH.T'e`@n1Y3<uKAq'D\lbS!4F&qHuSs[cOZu*&%?]6Y8/DHm?;JQ'CXf&`VpW:nQe?O@r@oD()+6M\EAaZ'A%m8<@0>gVr'lA%dXYPD<WAT"&`S7pX;'RmM#YGP!aTh\7ckA!2*]!"I4lC\!KMo5JaAE?6i9M%sX0<;3NIgFAkq+.(Tc6>qKkK9D2%._i<CfZ"QK)gBT^R6Nh.iR7;^m>H<WAR;2JhX:'m'49A.o;?JSjS<alpC/p4h:t!;McS0==:1@4?<s:+];m$;[^P2Xg3KHu7;FJm%DCc%W]/qi`g^EK0R;E5saC+ICc_'[1r\H&odk7qXXTpfbIBBCC7ouG8(W",>Q,O,t8`*V/CH'D']&jZ!p<r)5(ekWn]6nScips"j%=*9hRlTA.IqYY[3G4F7TL2C!q#&U0d[AEbCTsA[3+4X]/o_?FQ]4AO\IG3"tcpQaN*TR%^c_LJHmh/c>BoHq@\Ec\uXV!O;pY`Ye%eJ/=$OaHqMFPFFV?DDS.2JI2WoTRk;:V8anB`4E:5!TbFhHH10I-ZItGcV4m*ND^Z\nTJsbJ2Je3tj2p\Xq8"AKe_^qEmNKPXULI%I6VMPcR5%B"Ehihm_(Q=m![G?Wth^b[p/8#\bc'R/\T#rV'1!U#CH,fX.@r'9/!poXNM9#$,$/r*jL!Bf#c%nVLSEYK!`_-\\7)D%k'i<gl^JRr]DGT0](#.;UR,^F88_H]hQU/&>%7eYHJP\[VNmSIG]DFh](L^;j[nF/Q83.i_,oYCmi%G":'JbFW.;DRN;gO_nM<d>%rUH8?n.M"*nD_/_6GrEZk?:lYm>Ft2I.cI8JlT\=Q2@-c<dn-sfLk>28VX6q`f!#VX*am>`B1/SoiJg?s$#\o&'XVFVA&.e5?ejj%#GJ(]eO%m5YS&Gai/DrQg@-,2GhCf:"qnH9o(#r<qAjll,74>Bj_u8Sc_?*rG)!9?Lorts4RY*bSerf]0X*EfLZVHjXYESC?I5et%"Q3%?Y*rH(<ORg*A``Mb8)WaHs-gSE+e%o>kc2c/l.EiKlJm)94&E6Yec4(-G]M7F?ZYh=dQ$gRfR40@h=:?/:9&;^Cb-2>7f9JS%L7/s[O.dWm51[E:_ME-t+@onHf#M=:Ni1#'Bal4n1tIr1@RUsTHDhL-kih$%oC$."`![)Z@pN8J;-K_^VlK5op5p.=SUVH\3U<\e%p19m6d\*@nTaAre[nU+548*,2M`c2qp#SP6,5Ui`-ZO=XnTe109",jWj'j\Q?0r3IQ;oQA?]NS[c:Y9>)XD'n.O7LKQ&W-3=lnb#%\)>k>5?DaGYOSTWrZ1e,b*.eorfuK&&,Pdr];=0]p8AZ)C+]_M?d4>!q_^EUH!q_Bp%V_]q-'Ma9UohKHfs9,>">cgo="lecCM^U%5+aoDS:<`3[,"rY4*Q2ES9Bs-7u-,\lTH3]+BM+((`rR/f[ej;gR\;RL%ibDkauM[cdTGDZe#Q\BmX`;s8*<)qOW.a3O`s=pW_L1%q6tjuSQ[U3qSTAE`VAT]\]'JN^Cmt;[s6s'#Q4nXqWc7@.eoV7I`C.%W:,M7n$i.Mr3P0pP7<JC(k8/&.!M!0FaItQEYC=AH0K.T%T$L]%:Od]id"Gc6H[,-LP1i^?^7UUnTka0,bMr0?R-75EdkAH(O1A>)<c.J;l[+2Sj6:5kq:!U?[t?d@I$ln`cC*UNA"CV'`(`F#%qT$#*?Tj4+L!(in>[2Sq@=RCVf/$4R0&B.mm*+tdam$?W+90lNF)p]m_Pp2h63!0L#k(gOI.gBTd"^;Qrp<W^I1Tbt(e;cA*o+?(%<-7Cg##LpVT!OQTGL(kKk?X6rRkWo;^\dpr2V*KA[!,!bO+lI>e?Q&G1dimj+1NF$77^[=ePY)ufu'@ZQVC0GqX\r;;i\$tEA98A%hqP__a^,R:H+(2V`N+&]U;[r%/UA*"9(Z`mgEfk^T+-elPWB:\Tm5PmUSmkalLi9%o^Ol/>^QIBaS/nGU3QM3nu'b,G=d"H^;tWr%j5.qdi:aL$$[P=`SA;Z3pj4!QIf&B/l3tk6("^V:_*8mrqKuf-f(Zp6')Lj#SVWQVp&=lA<4S[4Z%95o_+Cu`d@d'.h_XSbq;B7!%C:_SEo?l=-s1,mdq;uRg=FSYqkN"tgK#ShE8b)J(UAG7f#g&;4kED_m(RC?+2@iR$f5B@mBn%>S3T9,PmH6,pp$nMZl14Pi'==75%IfBJ''bdFP<TOR+0:noj>Gd#a'QI>XV8"O[[SNOF^J[DP$=/1iYNf=_1``;W-'m)*]-g<QdGh-3THD!+Okpn6c+SF7lVd5uRlN>>%0;aG$Ioo0YDldRsrM/IM-a-j9YC6?B:?h2kc\@P;,unERLp,XHOcdY$gq0K,>e3=#\2(dIHCMq;O$!&K6Q.SeaSPb-F9[W[p[m]V%kmS7a?%cU[l&3Zo7j^FnXm&UuPe=AkfZp-Cd%i*Z:PEHYi<?i+Z1d=>Rl;DT3PJJ]4nmpQANPs@q![e:'0TW)Xe*9)%"a2iZABUj%CqWuU5Q/38ek/A0R$)%&p3?Q%ao]OAf$E)X2j.aa@mpk,dtOE4"VTl*f&,;0VDli<F2?J;]QJs5=m,YQ]M3PS\&loY$/)uIkuD@h%=5W*KW%YmUo\4MhR%#V[lWhBA^meDlpuBu9(O1#g]`,gm]`+,[g/%E:4P:RFS+d#R&!i1BQ>\sDLpgIiDZ)+<$+5M\:X7W1jF^\"%SXDGsCF@70)a4.V5-+0HNU@%4!a6(hlC[hClSCn/br&jTFs$-ODpc#Njt1F9QE^$@n+U3FgNgL-:]Fq5G5qDVEO,*%,2aDB%C,2d%1H?DZq.R=(@M:nOhJs1H-\5+<Sm5I`?[Hhi_V>(1r6DceIpMsJ\"9.clS$Ptem0S*gj[8t>CXWG_OG^oMs^CZ6agpBeC`u5;:m,,%bC#=&`*5&_D4PpO[ufiVbN#qk-^lu.0%l1i*F-7RJ'nd!)LM3%V2ro+,P1_&O&icaC:?N"-dF6rf+uS+>Gq=a/2s31,3J$YWo1u6%pP07cn&(tEb<%SZXfX,GXnkuir;>jNf#?*Sj8Z5`EGNJbJRnA54WMEfp*04LT.cMT8r<E![Bo"n)_Z+_R@f#uT-%O%\SX+_-@>`'%I<Y@Vq&b)l]m/XAiiLHV[0!l6E5@Q_AHV*kZaH^c'mHfVB/`NX_MlK`c#/p8L!BP4h([LiS!j;!]4%u]7Ql%hh6:\phrU7g0#H:(%0>lK)7gHXfqtKhLIJEGWp>!lGRH84n_XP\!pNp]Q4$.rZr84-IHeSd4G/!sG?(#!4p:,V<<fsQQD"#'pRFTW,Ui1>B`ol`"?mh&G%bqUpLp8e4X2a=L<Hus(<oq,X`EqL:"R;[S'VkpT^(uu@Tc^fFSrl*['B^P?F_YT=7o]rB2oP4cB:<fnp2uE'IdgACCIm<C7iVM)_%\(f4%<uIEoDeEW9?GAlU\fRi^5$shLh[/`_B92</293VDq<C7)\F/4a(OEl##=ED_>gDL/#HQ2&G+Ph-I"-+1s6AaABA'utq\*jc%qYc,Uo&Ss=2u^N0^V92bj/ZAE4am%pg3P[O%fI3UX1o2uIEp1&0];)/f*UkojZ`H/c:"UrnueBOh9gsO4)C440(ec[apr'loQNNR%-K:uK+4UGQneM\`9BQ/4nq:>r+R\u/_6mi\:'EV#c@"]<9m*+G_6KWTGh_@9kOB(do,[hJ1B(_GM&pTo1#A=i%OZSP&pht^4WR;i%BT5`0VPh=g*cljKC(slIoI-Igl'\+Q-[J<n';"IQE2&,XNX=&(F?%Z(1I(DtSdm,oeC^Dc9M^EW4e-mYrgB>f-[Nu\C.bOoehp-4%[[_.Ke%1;(>(=t#9^<U/Aq#W<R+=-R*6&r`9TSFm[1oSG_fp?"[-gn[QN*5F#f4fCFLcEaAj3c7qTtdrfjCa$ZaoWD#i'`OY(p*S%l%9))T=d12A&'O]kf:ff6(?"GRGc*(qa04LAHPJe3:KJ?T3fQ7?Ll`2:nl]0FgQK-D%NY#5IXC=n&ml6Q5NWgEpiIA=rJfICcZC:%d!H7kG>d1*,PI7e92W/c/.5h[r5L6L`8[EIfGnjd7G5i2cYq_b(>0uODpR]"W8PXDr6D9L-,`/%MuDi-?TTS+c?i/S^9\GYiuo2O%?Xd%)**(o[@RRX%]_m2F'"0FL'.(RMG/FC,nMKUM<]4ZH*+J/,GaRa\JQ;eg!4h,`,9CHkHNuSQ"lcZ..Z)DgQ/4K0?_fV&R0U(o%45,62P9i01M'cu(.Z&@6-5>M#_5'TE*k_D/HCsm@(1)IZVI`kO<TSk(*u-Nc<[N]Dp(WUudf7&EOk?-Bc9n?V3RQm'rWu)(o8A\9%f'dKo@o]!O\c6P6_Zst\f)86e*djBcO6M">-L5/'5:8I97sc"m'DJc0?RP8ORsU>m]o'V;r?_SnJ?=Yr<K*"!W`&]GkC^l[A+NFl%E1NEc7cN7u8U)@.[^jkcbjMU<q6=qX9:%C=$jMUZH,>TTq:/^d3JeUMeZmLY1<eBhj5T"8A3;t=H#gD`NdeVT&p%]WIXLK&07MO+%#-^P!E:Ii/q_1_QiSc#'.=\emWX6@=45"HGmd&2m%6DiG^&)+Vi/R'`JVUoLk4%!iP:+"M:S0JH_W>lf_5o"u\(](\RbP11E_bTF%JqBX7F6B`F-3MSoA<hS'@-?_'68))FT2'a-1\8U&h)b5jV:d.UF(mEfOY(dcik,ZR33V*5jQl0J'Ap0:[I`FbhWR(;[kbi7kOd.@%S$YN;p+2uI+LppN$$A72JDJM2=beg)?1JIKL,IO'VqoL3g?"ja*iJeS[9_',mW$ra]'`.M\]7:HMfC1hhr@[!\S[[SML1jLo<#Wp%;r$E'R;^pCSDkTf>THbtjdb<OkKJ>>0'<rC3;"Rg,K9sYNt/`qq,-.(UIPRFS30DkE:i@eNl-em*uqT,GsT]7\&.XZNN_ej)foV?%?6PARINEm3&(3DgG<UEN]!:qC48UhmCcEBts-nN0E]/l6fdKSF0.ES6mq*?<?gHU[q<7gAH`N(2)dd7?h^i-hs1.u?qraljY?Uo(%41di+Zb%/PDQV3eb^,mgQsENN"`I?@p")Xd6%,O'I%tGj2A=:uq`jA<C\5e/ou$`r?oG7%d!q[)brFk8VuNfH\ZL>U=$ck!2@O3d%cG"N<be>G[O(Q6_%qa.#MWZWKRJV!Ar#"]@bnp/]q;e.`JL\DfCjfJiH*jpVF6i.Ih4;O<jX4D"dAHEnTDP7pI[JZ8hY?_-4-)UD%IG7n-=l9)PIWoH)hU\#6,B]8X&I5Z\]sG+.l]YXXl)Rk>fmdVV'k',t]1qm&d.YlDrn!_>7pGFH*W0#BM9X'K\%_jff']I1c!o0p%s7O,P;J=4M6!I@T4.e]ar&I%PnR,4s)9n41rmBT=fD"P@VLiKUd_R?#Suer2U=)F$kVHtMMJ&8oIJm=Gp=@hk5<j#P5!7JD^VBHl%2Ql>,fD"tW#k.1uJ,V[)IZ2uOfEXlDo$B#bpS[aM5>K"RD8cmjnblj2J*Y:=k.fUN0/K@!l.5-hkfnYRE9"NtSCLT@VrmU6)^js5%-gR-HC\>Hb>^cYKm2Q#=*d='Oq:erQ!]Nd<6S`1P'FgmS3\!KeB%31D2`8e7qYG[(s-hges4lB/?h\n(]1h=hIALiRC$Q"<S;uEI%TA&rcmq8rZKuM_XJ'T)O9@:qW36;LOcr3.48Z[CMMCco87X@Ld#AGVO-t?/.BeRQMB_HfdQb=M5Pc`#jYZG@D-J/N1EL-;*ooB0N%E$Hd-J!W;)e$><NC!tD-`4[E&iZi#;o!fJ>Wpu+ObHZ1M6Is+tbO"Fq(c+VTo"9p58Bl6j)+I1g56OiLjQ_L[.apAN))B?uPl@IZ%SRn[J8CShCe'hcf._*ih=OIS`32LmT%Fkk+AH;.uM6Z90;3##G8_2(K-mU5-Q$JK7'U?A1LhF20"H2kN0q'&%!_0k$aWM>:\IpI;%B8$kOC]hQbgJqA'$\B50/&Iqq(.Bk*&[>"X@LP;8G7em_$%3T&6#YNX^"GX7'hZi89Ye?Tr@_Bej&ghjprYX#J2&Mk_#R_epLA.9%i+G^+%(-(F((Wl8q1KK;P80-Kk4][\K/#F*kkb#LBbuse#$7!lKEF*:Q>6DV&iJ(5EDK;&O^@;'5am:G[?aO-!+Ao'P?o<l\Hc\/%[7![d.:!_-0O6VhY5#.)\nY,S\gT+]bg`#W3AsZuSPZYq045frC2u2\Vk/ErM):#O!<Ef6"U%u6YSS*qecp_V!4lo#AVnUW'<och%(,.7b3Va>[J9?sRaa:$g:V\OIW<If"+@%-DJ07K+p-R<?gHZ;]5Z`rN]g3Q^!nNdj!p53A=.XqbOK-ELC8p2!Qn'MX2"GAs8-BV<%A17Sf)ULXA&Hi+8jD)hD&]UDmFf)Qs7A3af=[g+e8C_7a+tl%ZMmTBi:I'Fu5QO0:;E;d#QFDDf+Fm]kfh:qT'<och(9l#0AW^$s%XFjJHVLC'Z!DBg#96*fnJ4)X'_<VS_?4u@F)^kb3aOQNg3)2U;lV*Lm7?FPVY4)U2!3)EgQNR<r#]!C@1I<W8J/D>FKk_h<!WpHn%PeDUuprH-gBbKpW9Z]"(R:qkXd#4&Dp.P[CBJLEX'u-3S__a]DOf1-#R9-a4&8M;2UB.]4d9K3WCbC7#)T/[Mnc^mNl2N;4`6)3D%ldr=WD]a@P[.eX"4p@]2o/,a1%\goS[b-`Co*gJ)";>(F'ktTS5D!kiCi+]b)T1%P%o;eqT/qc49A!]@"O&YIq@QDC_+(@8'E&3V%<Nr_07VW?-90[5=:d9(6m@CK#FpsaN8G"-ok^mYR,:<7!9WE'?%N)0"4>$N9O[8rq5r=qF(7RTu?6IXV@%n#eJW6&\7kgpZR7^k_%`pgA-__qkp;[:_($<q=8KmA5;5D$-m`.BmVX<56R$>4((OW),9dZ9bTcqab"`gT2Lj>c9&@f9]MLNNWkU'=<`,FDHh$oK_:@sCWB%6!LN$UpAoE"ECY!\A-ufDpuTneMb(g*.<aNSslrWLqZ<'02b^t+ed=MR<h]2<05QYU]K9D^dOU/Un#CB/:.h8k[g7!C:qT$;3B.T%Soe`@9Cfrdc=3Ae('=c!:e_"B-X@>W9!o#rV/r:W?'-OfQ?pt>p):lJ8>epm(mYp$*9]sqdM?!M94otT3f=#kV-6m;TdO+`os263%8EW66\h[.F-qE59G7@IF_BjaBb+N\^H5gcgi!DlfUJUTpn<='L)KSd@5nO8fI=W6jotX\_O(&l]>E0U]Y6Ygh4gfC2#in6XTX(Ir%EttAWjpPcTi(qTP72gNiKi'K1_MW::N.'[%=AAeI'q)Z<.=PWs4&RXDAnB@=clE:pOgIKKgG\gMm<&nt3?DY&Ha93fal;*2\^`]C%KR8BdE?lda,OK]d.H>+0GJ[mdIT!:GR8P'h9rXgiWCN(8V-;*4;Cr*Z@\f=g@H("\;:mD*./'Q<#C9<`'_gSuB2loVK+Jc=+ZlrR%`l*J#Cj+FYP>-3UTl,J`HZ@Dj.?&pVfZU&",+AZtg#BLXjIU>'03X^:(2\rZ,T[)V[fV7n2mNKRd&fR<Zs/+D8sh`#?j2uLJ[<R)%JKi#_cj"I@"76F0CU!._Ls`qA=1"7S/E:X9Skt_A/EfD9Ym@p0/=(I;=CC#q+JW/Z,/fDl#1-;1>Jst[QG!JWVQV+F#D4X>*K6Xq%#@hJW%L2VY"u<c40LED^D?)g'fl\uL@(C'7@d<f@V)008PGL*fJYsHnPSU^lG7fb"dKoA@\cLUZ5dQ\Eig->DcDRiZ=cJ(/Z5Q6(%\CES0j]:E_^;3'&[i.bm=5u.lp@Vosj%t<eY!Is&GjH^"[+NEWnR7>qh,E''$llIlO4K1N3*q_k>*4k/s2rb1VHR-6j.u%-mPs[G%V)qG5#(nAS/_q#uV0`=.c+dlT%eLc_%73bG4Ma$O31nKsJ(0ljr?GZeooJGY$m]qqItW(>hZ.ufZ)`AQJ.I=aV3mEpd")Hr``ONk%N-;;.6HQ%76f&3.YgAkU\V[*i\,fuBjLr2WZsUYg)aPlIhFquo6B.hI1l'dJQ:eHOH%dOKZ$%bV#S(A/@-28E?ZKnX.!n6^PZh(%%&K6<_J9`4/i[cMab#B/aI7Tk2!L:OM1s'?\>+YBo3c,;53f(6+<,[f>&AM.-7@IdYN"N!e0ZTWD&cla!p6Dr#fi?OQW[:>ZUOu7.%Q5m,6H%<7ad#M%%Q3AJ*!611.)/!Q>ekf92V0V$Vn"=O2o9pA5M;Kbf@?_Nu$m8AsJ;uL\-N)K6,Rp8ldaVcKIp!fCB9K4W"^0p\%)$Zoj,a%ZoU<Gu8$5P<HPkSEjQVl4`RGsl;#@Ws]mp'K:@Z3RCJm$BPP-A:,Zef2j(-5*L4bb]Z$Y5OF,_dB#aj4)E.uOCR$ur1@%]-&aB_B'rZEDI-T!.k%V12B3NpofP-emiYs*n#DrPSMD%au<@kGr(KO[>Q7#AfQ>so*`X'KM^]s6u%u)VbjO3S;'#`'[##9MBW1<%!5X[:J<i9i-8O(]jXpZEaeY]Es"a0MXV)q?EZEbaJ.<E;o)r"OaTQkI8Vab?"%nIbOMo3g/gS@H!Y#EK=T`EUIne-A-QP3&!0[mO%[#A2V%Qq*!OT?RIcP&X(-PNIY-66f5#,O7421QfG%%q#=Lku6l8aDoOk8i1(12^BAOMT0IWdlf_<A5_j:Oj7QGGLWEPg7(_&-<"h%kZ@q%_LG;(0(VhbhoPr+!qd=9Bl4]nhVsGZ>\A'H7W<suQQ5jVWA%&s5V0UJ0TCC4l3oWe![Q6FJ34PR24b/O<`j`\ap?Ho*kohG%SiO%"`#+%d"`paO.1r4".!KC`7cqNDl]k?,9dE=Bnm#QH'Eg8.R%"A8'[MHJN@_hDH^7f:i-.eT/;V"$(I4Vp!?H)F9a%C$3p'*a%LGrWgjE?i7KR3gIKRh-#+<]!`6B#PDW>(Y*gsYbalOH7?&ZAV^bF)0>p1n-gq[?5Pgs@g;\DAA"+=!fb`nW[)Uj+'dDI`dfXXr@L%?P$rPJHcs%hLq=':_RsG7#4d9]hucBUrcP'ePqk>-1t](F,*@KV>.Re.EN-sOFsi\Z1`ei#Wj2OJ1gBcRA,kO;!)*.+c:)`"(Mg<%W#!F!5^N^<MC>j:#%<4ZD.&eug;0Ricl`Nh2Dr#PJ/g)L,K`],a.8`>;?a+o6%=ATWb@KKk$2k\TRAh6.q$MfU2$NdKrm;tr4eCD%g0N`/,#P^/]1;E+9m?<9P9.sod@cifTs@mEB1f8f2s()*RoGP1N6*X38Z<.g*i+Knm!(E2b&"5r(Bi:".*9WYXQuXUJ8%p@#rpb)%Z)(ACnsR_]NYk$adVU[#OnpM%,*UJiLq3="l@^TkG]Ouui.s6]3neCu@s@[r[i\P9X-F+ID1jNPC&;sV#igS&B\V3TT]Mp80X3Kb%pu%@!AS_;nHt[b@r#5FA2`gbeb1LO4o>]DV:h-7(':M;U=67oUM=[iRpEN;a\;P$sP3VZa]kf1_YY>B?jd),;AL'Ymos[aB$*AS4%U))F=Nnp['@B=f4V%mN_`_$!&@B03GU?7n(.s0cD=AY9ID3q.IlDKrD(5h+1;EEiE>bnr96Ct;K9$M&_pX1TbCp5b<&fObA6m71\%;_J6qGu;aU2'(*d)=\:$M>\p.ECSY>aUG^*9M@9t%S5h&b;,gEKW:3TS*$b&j2;-LMF+@68Q;QYXCE*$Ts'nj'f@:)8p8\KTsQF%%WG7;>4%!d<,kWSa/'kTlFBr[Fr[?M]))6&6WlS+eKp9G`1Xe<[.AiHPZ#)_%V-HAbRY:s?I7``pKjeCX$gI'n6I]YN6+%f2$<iF"%]hGs?er`jGo?sSDLoG):Y:e"-U[pIqhP`24,mBN-e*,Ob-ke5+[WG62lgT:bjb7J`RX"G6V\[=0lO^)<W@4<08R8OI4!A@@S!TQ/%><1f$.B5tV*O+&[QE%j"7]NgpD?a\+Kt6Hj3M!S#eAjjU=S9157+8TClA1:?.^Lgc4C)$XA>BDE1SI9'OiA_d1$bZE:]O#j7Z@Z$%>+Y@Q\ml-keS:fK<30*+T_^)mnI!G18K<KdS`.t5>*Q0a"0GiTM#'GR.9.k)TpWJd9+,=)ad#g4ZPq/T6?Q/U=c,2Ih1jpY)R=3`%.P6CceT&_]2B>AKRP`RN;Y?J0TV_up8^j:HN@6=h!`9,#9qK:+U,uUJhPu1WA<kUl(BlmVV?[I;kp_J(/!W%g4#93^&ZCnu<+ehb%H7haFD(U:,=Gto")5VLG8u'0r,A@^Y"MWN%2^^,<R\Ftob)BD>@`CtTfSM'`kpa`;L5/X9JuF=cfrU.gCmLJcX.l)Z\X@;d4HB()%-qs88:`Uh'@RNU\!4fiVD\;]bHJ]aLlRU3`=_Th<e]_/%-:t$Z6E0g>#LP\^"jN_@`[P%.]lu)r@^)L-#Z<r.;;_(JLCW%0Z,rp=%)/#lT0n;rgI7Rm[ju,>`Kl@d2TN-+k.T<&mmC1X^Tj?'g1@pD/dQokC<JjW+EO-F:&ejDY[ASX*P*,FS9M_#GSN?f]e-(pL07\VB%e0r"'W.fC<NM-sm;,QIN^(VBO>#!T*ZrjK'i]D0rjT-q3ZF+^UR&98T<XpA'JA6!(%)'W*I5iu]f2adc:LI_3"f5D&QDGBbZOi-*%pl=qeKc1I'nNRU:HC;JhNX&$fl[j]H+E(Z/G9W@u<g30#>l:;U6MkEWYOj""6m#M>"RR2$-\5G*Q=quq)BoqANsf-/jPG)q=]0nr%;?Ma<D?T>H&(I*q^kb'V%,d/\!uW)d\u`psj!]nG-noL^,V0/l(9n^<e)TS8l$I4QE.a$"L@f'PcLlFU-A):BQ2m@F*X7A*">DOJ%@_fe;mm&KuX=ic-\G/G3`NQ`frkUZ0J"1bU[u?PK9ZWW^".R7)7=gk";KLb#J.[J].FtE4`,=5:J?_7WTKkARP!!Rb'BSh_.Cj>-%T`"(+Z13GtbC#6g43H)@8.D.WNCa6:=B\;d%Q41\Wi0qc'0=F@_8=bHTQ9]SS@pXU'GPE6+gsio%U?G/)61HLH?;)tTq+(IN9Qj'%dKYR]$4<->HB$S`Jpu7?Q)8Z09GNM.S@5*;7NB_uPkF$@FU!L3M?mo"0rA4K/58"4R"?<WNTZ%<E8C[_Cq>j*hdP(EMCPI+21j3,%)FGG&IFE<M1tL.e;,HJZ9q=L-DZcql?5=7IKBr78D/mPK:G4.aTeOliKMFQWB7p?)=el./F<-NB/2_a@l_p+7\Oh+4U<5-^**4/M%.OgOHbqbAL'QN]$;:(\J6/.t3o(mqo3`[V%#ip5aOsOB:Qs^)V0Fp#YJ!3aW];J/G.r,-C?rV_l)AS-Qk,JO`p8tD"ANbo-0(ViK%36h>+ofgOYM0lNeS-5jOMgiS-gmDg@ht8^#+"?T$BT4.A3M&2*@B.a\:n[U,Bob^?<*%ABLcV-o^d:c;C,M@q3MNVI+l8RjOD^X`%U0/V)RM5k'dK80,]0R%iplR]>.YIqUq>bVb#qb;R-DW`A#JB,F;4Fjr=fHTs*CrL"W<r56Zm?P4K]3@VdHS>`(8tdkh#k/A^p`Zt%\_0^=O&U>F>ureG!!3<XaIEPkk.`6TQ_VciF*hD$[ZWs[Ys.:c-tT>'$SCF+eR$CK'1b'e.apedPVC\#$4I*7qF^4O\t[qo<M6p&%V"\Uke_eo,AeBpNGA3(+6Y.ZE^#')qKJ\^1Wg+G6L`+4,C?ZRJ?53H#7d@;Y:(qjD/_o;'\2#sD@WX;CC;Ct>c&>0D^bta^DcfSL%Y4qbgf]Y7'dgappA+&@0/4)H1)@"D_139I[Bm@U)@4m"*\l)^f6gZZhYRKm'HS%dO,sK8fGl\?;bWo4S!k!QC`"e^B8jbn=*RDO"%:l/.\EIjc$!$+-fLmbCRkNj.n;4(usW/o<uZ2-k>",V;o&YY[S.+CqJ&BHG26?gA$ZTp+l`r\AP%'m#4AQIqRI\e#KF*9f>#m<:#%d'4q9=FduULMGfspH7',(92#Goq43_&Y4m/)6j2or[80dV0!+lpE8R;B4f''(0*]e6i&j56\uIShuFlWTU#+M?r8cookk?VjXTo"%;GL4G,7Fmr:c'LFl5T$!$A"S,\u`q!m`:bTC8Ns/BXdcuV'%J4s,X=>X7oM1=@ia9kju3ed;Kr#)m7e>@ne(%&6]:^OYUng/V+#)%Q6J.4Nq.\Df!PTo*f2*>YY@Y)B-[dMOqE;=RXl-I;G0\8Nc`8C<9g,nXlZY2l$3,3*:rTR,mK1T.3S4/`'f3GUhoLM+(ZfuA+(h\%MiNAr8><UNTNp._1+E9T&f;&Al4GdL6;?tekFndW#>n@0EEmG\o63eB]=5]-"@=sOaP8L-OeF,f(aa1^PP6'DM"=qEBldUJP/=GF%-4]#b!c_Ja'nn>Q>Ujeu5aX;M\(?[YlI2S$,tt;qnHcc]V*L&B.*3VNY(.,HTdJf>R.:as;oZ2H)BU+92pP@<[;Lqc9[h\.8>\Y[%U!mos^_k1X+]'7-otba7m%;5+''83j8L9Pa5_r7b\a^s>+o?5<(WiJ$FYAgoRp96ud/mVsP<\%4V55C:e-;T+8k:]*2%f.obh1bm%i5IDk#k:L/0?R0GNetU\(t6Km(WT3ChDB1]!&'AS+)u[k.00PY@$!A^@a'<rbX8d_Gt,hs.i'd>K'*(-'8X]$.gd%FVg*%](9aC[%_#=N@*MoXrANYmK?]I]u[!2X4?D/VTAZgOqk+O-^Z,QT-/KSISd+^MZ%?'D\0j6^-ljZ=V5'6W1!uNV]%"\7/W=Pl$C%:Dm&2H/8%`H*/(1*oFsda<>jlr-KI`QQg(T-\1AEcXs9<+uBZjRG`VbT%clTKW>r?UB[]Y6e@@H+CVid'J!-"C">e'g_*;4;;-f]$N>+CgLQ=%9EKAgi`SG?N6N4R!sj"a+>YCp=G3-=LDno@M'79Q7o#r..@MG1n75.j(+"6rQQAOJ7Rj_/hP3am\J%c9#i^$PV4?n@"*o)!"dfjW%R>%@ah+`n$*Pa5UANYue*hA[1*9ag&J)OL%6O39RP<4J-\pNBZeNqT$)Oh[%%DBC)ru4GL;)3!"@]g!V@jr[Q)3tQVb[I)Fjl7Eg%nL4bEm:d1UAl"pfQ$b-:e<D6s*(qa2b[t0>AO:u6I/l=BKU-Ra'p?J%_@%GYTamcpAH7l)jrIVhquI@d0;(I%!n?Rn'B$kN9.AD)%MCCtr5#P:G]:afi5bJ)]R56!5r)^j""Et@P^-jY`!4m+qfGfCs#aDil(bZ[d&]BAuUn!*5J@l7k!YYViZV]-\B;Y+tAt^j;YrV[p%c.RRiI+cl%]`I;jQ"'7dWK*Hse*mO!-Ng#"6lH9XdBn-2^'#\B5d4cO:l#\'df;458"aE<P>WW\0>U2iO2R2a3W_Q`!'799Pjhuo%Z#9"UHjLS2JRHN'O:WNK?9fHO"DThM$/E&[-($+TOk;Cc":uu360:js$3+![&(fZ0r"=aV$W_jF'$-%sM$f,_F+Fuj>i8#m8`0`m%]3l(%+V6F;7GV?`q@6mKl7sF8]0F^"r>1'P%=QkJE89'uh?d(#2uTW4$hd="5])<6%&BY4mj*,a2TgSYa'=];+V(:KBOd&fbf1s*%8e,0ZQ#[t'.<C.FJbf@gHjMC`^+*[Li^rVPCm5%<P.C?15Ua?s2Vn_h>Z;?giSZ#L.K3#")&!)XFMK"T-e(P;Wh^kFUHWrnUVk;Y%k^$&FB_rTVFI./a6js-\6^Z4FJu-0LX@W!\Su#UV(A\q]\uI2ZelQK@en>P>LM$sVrdo%XeXE?tdaIJJk*.3lB8/sZ!"tJ#8WQ4S%DS8NEoF65M.`h5kE3qk?b_+bpRZ0)t\\6J5F:?\T9(AZtfCQ;7K_i-T:l.nl[Plep%>/\%@ES7$(Jb?*l*r%(h57JM"0#&\<&7o%%7E)?`-0iYjb>Qo*BT'GOMLpl6lRJ88_1ZGL9=HEa\Q8r"bXl*sj5nD1=e=!*#F4VE>Lt6EW3lALd3B6/DWmtsaFZV4d-W?YUYe%1%2eM?G]UWg[$hZ5qPh$uL\s$iS8QXO/9%7rtQ;\Q!=NG[odlie$"f&+gE]]mI8l&Ij8Ml>>SIrfO*N!J65V:pRh"rjac,ieX-lCME%.!$gO6(47tDIMPpAY4.p3h\L/omIqm<ESU*Q(fWRP-T\5:'@E:16a,IU0AU_Hs(:?FPeW)gT^T%SPD*;h[;lg:a^i%QV8!eWQBRU%]<#EP.k`$$Cc50(#,X&n[(=c!dV?Rt[\q]OUZc=V$:]g1"7m"R/ZiU1H:=7S$]e82+?9ItOG6rC@VImZ*9spdejBrUKY$=P5CbKO%?>67^T^_7JN;9HrI;BmaN,bZ&T;-MdV+R$MQ]@1!?FPsfT'D@kkgKuh^HP9dNT51lVV]e.fp35t0QrJBNJo+2"10EIb;#g!88mgZ%JEiOK9_B\]8f%+"$HDh@+\FdGo5YTqg'g9KRM-"8`j.:X^$ghbS48W2:,&ad:hEQ1MC<V@`BXK+S4fkD9GD8\_kC6Z;Z!Q0K!%Z(%aMU,o#YOj5#2q+2<4ijm*a8is19&5]mX7Nd%t-&?L^Ah$?rRtbj@"s<^kWK1`mphn1F])pZBeM.2RQ0a\!@3=X^td@hb-p9;6B_*%cV$sqmE$Qk_K5m*R3]M=R*[.66/q]sJdL%2=;JqTMdXCr?05X,G[ucl.%XmIRb68T0ns1+ZC<n]56PCC1lRI[.-``$C>YY:ThlU^%D1h.f=\J9/lkZ>a:g+FD`5KANLKJAb>k@p9fY3/s"PncJ=L5nmIo<up02X,!#'C;'>REn3VCH\O2edK#I:pu[kTRt>h)c-7I5%,B%\*B&_@\:%!R'N+J9?NU\+UUZS4FIJb>V\_[VCM53fLo@>QC/Xp7Fcr?';_KQpD15ial:m:p)V5;6N"jRF;Wh1RZpBpV((Lb$%e$:%WSaJW$XUja@ZGNEZs,.M4gK_VId1qqgWUmP1IlF-J*BCuLLr@.S_4s:f^0W47suNQ)i(ljA&;WP%%=W`FgS4sHPhjQ%iumhi&QrO%C,/IF+&hSWp<\c2!meh:@gWD95,Q5F-PO4)hiS3H">qtB4>K3aV(QnSP?H=t`b!]BF==_\oY=*>qG*oc&Vj9A.'pd31AS'WO"\5s%Jc.q5c?YIAO$-*2,D%\3cHd1rl7sH!"Lb,4g-mk#>H3raAisO_[MG_!4n9i%KmrU8O(0Z(mVN=/LaQRM#EmLP6^;sC$75TM`ggOQ%V8Y-l7!\lDId1qq)pk?i5kE?uao+.BYk=UQO"onJ9msc?9)=P-G%7E+e$I_n&^`:UNg=f=".(Em&_M[JIUYMC>9l+(:njE\6/7Me%M3eQ0%]`48&:UIO=S#RYI$^7&k`MBC=>->kTF_etl4T"d"KimF=qpT7+Pq[I71.N!&&/J6ksJ:-QjQ7lX9)T=I\h6/bu#\\0'O\Y%=YZTs&?<X!_OjX<3U.5!ME`Nl"8te/Wo?+_:^)f5.f,?<qII^j)#/A]g@GT\*`t*P5DV>F^!]%<TcTU5KV,j2a6)lP1l))?J$Rq!%]jV3&^1hiA#?&<VB_rPY#")tKZjj2`C,%l$P"cqk@*TC:X2`-k4W"3jmjA<<>XY!Zd?t[V#@Fb_A:aeI`JakR9Fq?+Mqhhud?t[N%-SCc'6?1KT6\RK6S3NkV:*T02c6Sl>r6eb9+NOc8dg1TMU0(,%V(VD6HBUr?Wo<S;X`2?=$n0Y-?cL;;>!mTT-;8fC:*g_UM:%D;%m%bKj/=\:\bT=BK_K&UU.cKuJ^^FPo23\PAf$(/s+CV)nnZh%83egS@Vg\a3^MqE)hG*sR"oVSJqp<B`j.kKk>W69[h7T7p*"<@P%k"$B.:b;t>"&Ns`<@ae;rI_7fVN"Muf[:fa"UklA$HgCeJKc1CKt?69/#fVCB`l,GXj4<G%_;]GFX-1]"H"a)KA:8XOY8`Y8f]6M%ggOE.1fTkjA_.:XTIXKe(SL1u.T#3dX2pVIFJTJ;jE]m;=jlEqWD?AFXBSN[Ostu>27X78SV/^!a*D(:o%>$<<<2QNL%@E7qtSeD%@!pB,9#I&:WJ6Hb!&oE_hcNu-!NAOB@&G@EYtb-@D;p')5Yja[p'2a_HT%CEe](J$EFA[0;[,U3d'O7cUM;mP8.QOu4p<2):_(YS%L;ugbFU)l9+<T*aRc-dJfK&b*m%I5Y9^2hH\HIdbR(CX=G#OFnJ<=oN@)*QK@2["6-UIP.%M7]R3lmO*klD_.?a;6dMMuh'$S#C:%71lCHo\jDeWqoB=58*uk."t.(ZAe<bY72"b2f0*u3Pp's#%DkhL>RJ6bXW=eN8rD.h,D<WCIR&Z(E;3hE&26Ig!Y8eC/Tu\2UHV>%/Z`]T3,-4%0IX.;A4_8Z+tj;hd]L9/l>ii,7-/f,'_Cg`Tc(7>Fa8u$K\;$&^V;UW:g3MA%,-W`]JaF+h4ieFen,U&M#Ni?dGHTo%`^9JKAWE+F;)@?Fl*@6CD?Rq0QRc"*lXt[9;5B:&>F['04";7SBgn#tW""D7P1*].=kX'HE<uV'JhWL)okiU*C.<3'&03[(LGL-*%3?4/**f`cWZ1j+'RSiG%dM0qS;NM*#6"L<o^M*gZ=A*RK"JN?46mDuD&*gA:4e,B;d7/VKRLjM,Q%_4TV&CqG69mI@V9P#_.d^3$%pPN4ZKU^@;<e?!)$8&2[U*lWTJW@'K'KGutdoL5@m.M-X7D1fXnqr#9oiPf5D()>,97(8^eHhn$V0jLK=?ZWm'kaG@/\+eK/[<R$%nR(4kAd10oN,s?Do`c+K"JN?;cIuQZSOE1H06"$&K,Xg1'YmSHI=%Zuh.LF'Tm617Fde4gdRPA-'G]g)OqG9o46iXsh3\jg=YD9u%I0kb!(o!8O'9(H];poeZL?g*0QV]-]>]I's7.Zb*'l'_(mVtT38Ft"(/3M5A.\JoOY;M.F-!eQ\;2,9GgHb@34t'4SBl]m+PX61d%>2'=6ju&u:4R'S"*U_K+C'Da/qH?55m?o/r*"1S#@8ATjc2sa$VEd*T<)ONh%eW-lR2Xjp9Gaoh)Zi$;Tqi0qa&mm8Nes3ha"LL6%V3`]34/i8/jlM@r/M>QtAC*JZ^\^Uu=s)i<Kfuu?^XpLp^L;M-bZ+I`1tshkl6GC="jDiJ:ee+UH)6<pmsAgRPkrci#H@rmP#.d,%=*!@YOWY@-"Y!.f!ikp0*2Tu,NI1l/9Ib1@H-d`Fob3GXR="!\L]Jcd!pH!bC+M\G;LY*%fI?&BLI1="T]JiS+:/Z`$6^uEHjFg:%TQ6\mHKdhrAX6D*a!09LH^;3k5#FLbmsGBqJ3X>@3p))6MboW00^^coMsSVDoPC#&KKZ`-5hi0<E*8DH6q/^#m"O`S]r];kWW6Ku%SWo=8#NX]3#:9R_At`m-K/gdV"E@,bV**Tr3\l%PE>%K6ae*8!`jsX,hM]&ja1Yc>$#`Aa7S^^4!,p(\7mJoc1eJYjdo!E",m?Z\%I*:*%1lrFQ>!KPZP77pe4:*6G%2Mc]Aka`il_cTTjCnKao">_(kVFrDUf%15F$`ShW(P4!RgM5nrMX'+O_6*'%TPD@#_<HgZj$o:%3O8qVYk:qS6V]NX8J3;Xh`5-GJIVg)bR$-=Tdo<cD@;=$SA].^"o:(on[+LiTS&tqk<DlnTVS@doX'f1-i9?W4uq*i[@T;RcQIjb%g;'-OcQIjbg)t57bn_1o-:JKue#P,!6GXkWD)K>#$pj^p*<O="0WdTkl>$1?3X4+s)Wb-&"=_SS1A#Atgr#Nn(^Lg@9;BH&/>U>2%66M#EXgC:pTOVo8!bsH_$7BXq-iIE+Om(<,hH#Ci."d30%hCh3P$StAM8q_F[LE5$2F*AS``7h8R2'OkN$dB/q_#2uEhF`j1]i<^%#RFTo\-eA,VNkNC$6cN#b"<o*e]CDFZ))'XYUDZs&`Q8f&0!o#<Z>,Vb%4>@%2;itYr<62cu/4Y0n?&/"GA]&5U2"__8=cFnr&t[%[:^D^%77Ig8lBRMKQ0d^+PoBQ+P-f!65opGC?$d3\]bC=Jsr6'Y@Yj1U\F/hJH-6<!e],2#[06u$B_coQ!`8Q;,CtW;ADm=5nFf2%NAh,*L`:k1C]FK=AR#Bh<c\;QVemA;+AgLg2GrBA!.[K3!eTi'd"ifEYb7R?I^.VkQu#U`r!JC7bj51hEq-KOlhhgbF>"d#*^EaD%=!<H4<j2Uh4-V'ukGP@1K#$^M!'p]@L^em-Q%Q+KBkpoJ`N<N1Ek`2YE\Y6.5Z^i/JN!QkL`:n2C]jcAD-VcCf5Uk/&?CMAIUcAA%;ik20G_5u=B`eC0%6W!n+]X?&<Ls'A-AW>A60kpE*8=]JKIo5G'SYC/n0$<e!^[h+aD0`b7(LMK2?K`0Vqs[8OA:g*C'$[G0Sk^=%TTt/1&8>o`q8KI4p<6erfE_Y70"ca#GK'cZ2\8*-)hC:k"9DYB>_OTXE<9uB-Z@/O)[Ha=>U+/0!$lD(+LH\))DS#p&[n^'`[:3L%or%/R-#qclBMF5!)M@$`&JX=qj?]1oAr:J06FW]:=knuD(b4,;gbdlD(JYs%DAmob4=qoB6b60;e!RfX&%#e2'i*Dm:(GB?K/O8_%$J9Bj(,.BQ[fM$-#!Q_N``7h8R2'N@k<m(0cI2i0#]V(CLlEN"bJ@27Zo+s*Ngo/gK(G[d/a$gKo)_3&0Sk^=TN)q4_9-=aTFKP/%K$Tsb-,_pe[=NkT"op\=U^@mGVNXAfe$';6LB=oSVZk9P,]+YH["/Hc[;cqU>\4-Y_>-psSb'4=)FE3b$t:FeaDu57,&L%)^YV]V%)Sl/F^ln;rJ8p.5!>r`Z5gZNiX'in]/jT0t6bt.qdh4tgjE*$tkT2u:JlKR<HFc']2[soU4qt6^4=srG+ORlQTR.3V.cW!HZ-3P5%JFfJm46L;Y22&I?(rQUiOQGCM7,")1%`_<8)Su5G^m=T!J9c^=&K&GU5gZNjWt=AR:7r'KLQ^!9dh6+2jOujaBEJ7*(fH%n>Lgh=%\S9\#lpD(`ltHLl!_F=:#]8LN<c))q.$n)Q7W:O*I-3UDTS=":!e],2!jWeNKh,Fsb2KjE?6_EO$J9Bj(,.BQ1]i<^#RFVAE>>3Q%`sK*RqbZi$HWib[K3T?$#]0R7'18c2@B2FL4?"id9Ld*K[>$UJH.iq-df9u3jtLn[+')qac:8[**>J+,aBYWq:PKK!-&F)8Lfr%1%/%&42A']bh;:\(KE%H]SkF/I@+NFh>Q=D'"`2`.af+&+cc`Z=,2R&k3"r9Vg(<X7rmmK5c2u0%o,NNsP\b$fVH;7SCL&=EET\g$X%0IYOQiB`J=!$06Jbm@G&b$h\EBijk3.lbmk"UBX&'bo+Q-O<.UrE!$S6E-SEonGeII4),H6=)0%ct`e;/DB284NOc/TOSk<3Pjua%3ODhkbB^i;/EjQp"];l8h6u[0KebU_fR>?Lq7B22Yu"We$#?r1h[1.k>JV$YmCFbI&lo!S/-@aW=C!G4e-\cT(\ZJg$t:_@#cTWf%$MD4WJEW]e+SJt^TsXHN:AFlIlUG<b(@$8E=V+e'$F=oP$@mdE!$06Jbm@G&b+Z4p?.o+W?pVOB/;W$)HY&U7'e#)oU='Ad4f]TM%X^HQ+XOTXd.p1/:"]lPJl`'qU=ReYo1/N%De[9F"XUs3o^"3T$oNK(^TO#,a3`#>SUbA//>(Ni9LbbK_P0eMR=K@.g<cF_`$=$]?%b>eNfXE^CH)5oR3l<63T<j7L/^D/<`[t4c\]4r(DAl/`[3KnnBA98/7nQNc?;cp)Sr)U%ph[6M?B\-5bOKd_qL1R%?"KQ>"YZ`3U%Wq'?0JR0id&5t.1.O<<PYn2WOqJ!,J.$d?K80BeU:gpIAnlik\?7Tu'd4SMZ6&lZ[*Qp^m$!,[#U%rUqRG'K;nDD`9_e-i>s$gC`%7HhKPied>_&7MKY#ISW,`2j?$Q*UFEm'6R[LLHr?7/m^ZC:OZ^Ei]7S3<iqfXL_/Ul);DofRH82YlBGmZQLaL3^X1Xe)Z/8\O(&^%"iFNsIma4fIm^o[_Ot.8Ka0V=!-Bao2()L3.u2X^ikL%.`.%m&3=rR`S0<R<C%=RW>TkujJmkeJ^EJ*n^Ob7OY\9B(n0#aYJ<"36%joh`#jj71^rAW42qerDl$_hgH1P?<$9aFqc$E7/E$u9GS%JaN6%JAijK6CN8!!t.U3gP>c'<J@%6YZeohaARE^PUea'^`1^KFg4>%#[6BuWEC#GCM!MTq.'G!oHo:R=p;&1+CPF=a"gJ4K%78LBW])L)sW(S2q4<#;7kBsnfd<U+_[DsUh3mdXHi`CjH'6ue=.rsg3$Bq%,cl6`@2Z"(_<P2aXB#o4%J1hC)sGOtTO$^hq2f`f&@B^t;R7tmf#mt2o#L_Kk`#t.G.@s1KG>"S/-@aW=C!G4edCcYTg%+Y6bQV6%[;2<V+0nWTK%@J!C=WR+>1nBmrn)]f]t)"Q>uq1p_MSR:Q@YJ<XKIi+C'F.b5Tf"#J_h@Pg3([P6L6Q)TQ[K"RWZHN<qbF45PEu"%Dd4-^gMp5<OCJGZa"gJ4K%77ae:3t-]eP[Z9*o`,*;dkN[#GnlGmqgf!81=Y/d]Ym3YTi8i&a@&cTtN>3TWGkC=25kf-^mlB'SGa%AjRVP(5f]1@B"bhAtgp>EH;""Qs<F2i9K&1O%aSBp"#Lb0'\EDm`I/'*g#ZkkVnJraIJ%R>os+W,NVI.c6nJ>@uA4NS7bYRi^o.S%.6Jk4SH0DeF]r`p"9+TgC]e?KVaE.X?9[D&GTeCF<!o;[9o+W+<B4i?o6:Op1Yq.tL4oS+F!m7?,?05E0f90tbpS?Z("fbsk0;(^%S.@9k!!3lhaNOrJ&YU]=+l"!R(FOc>PFKYGLroTi!4hur^f^+!B0>A\EJ"`.b+O@ogdhZ."EN9a8Tu&:<58bq;3USG6F8uK6F<M#%g;^W]VV[<kc8=eP%7?jRFSZG6)"((M+]'7-otba7C`hQ/"h%3E3FbnR6?Di(&Y=UUFQNpd3MRpDMX?U#cJUL&'q,[I#V$#)ng;:W%J=<"9)q-JqMsiWh`%8V/NQhhrVud"%\H6NkVu\trqrEbnpl&KK-3b$[J3ddBW3HUc8Vc'7MWL>aBijJ^I_iBB#>tb%ge1PSSZ/&Z%XWrIS3eiV1PY0>b5is7"ICKg,D3JgE7Oj!m02:61R.>:^88V+Je2p4D*A=/h;?ks3:VT2QNKGdJURgeE>@qWAeCG@,aZ*!Nl.TEN%ASe*YK0H`M\kN?Aq/UERld#L)XnSFtI]TWhG#%LUh"pTfc@3)b[F0R'0*rG`ZE[_u[7PobH`UE1"u?RXJr*aBp%<gCG!EY^9)d5p%_:SGH&#OqlU=-kcp3^_hWij&4Z+#)LZ_d]/eeLq\I#'+t<ioU]/@+3g`ar2,b8hkp06fN.)LFb(EmOH*B1iP5X,Y(u2#\uI/cs&-%<f_.-MKH.OW?t;r,19G\pVK7(5NtG&7N0]*)[t/Z?(-OnMc.f`jD0$;Un9&*N4(W\!idQDTKjUQO\-YD8+mp9&pf_V9]N9p6ndih%f3l,rJ=$u\1COXG(9=U%J`5cHZlUQ94W%>"10%r/g`Hl,\"KpI$\CE4[?uo1Z3!I/l>+)/BC%r\lO"!Y`7);MqAsu!gsF`A8P!bV%8E#Z1E#\,?$@nKW%l4Ur0dg"--UYerj6Ai;68JE6V-nN/*^)nVM5bKOQOt\u1(OHMqtfOL$Qi<j4N\Y<=1&n,D5Rgb<Qiu>b%>i\%<39p[>"(^D]Uf*e+abAde;f@PRTI&*W5Re]IdbLW`k#=RF8X\R"<Au)$d*MXqP_l!e1R22>f*=l9mY^I$ZInMNV]M^OCbF2R:'Q=%SpSkG;J!Nm9b?.M:g'qEKk=:4r2uleRXf^!8Y(!-haM8`X>@%@XRE`'n9>#P(:M0MgD4tmeF?mNfSrs43)Sr?^p:*^mi=INmp=A#%B@HFQ(YZf9RqYHX+iUe1f[%>):m`GX68Qaurf"rQUAab0nAg;I)%Q:%Nb?8ig$lJpL/Fol'g8SGi=oVOUK<O$)`1Me=gQu2k[n["%2\;h?a-0W?:rh[e0IZlib_omAdrFVI6,5jW(K8$#F?D9!:Q.eY@OqV-,-fCbqY`51=HB\AWgNMQA%IRO1QO4>$c&Zf27e?PS5WZ8%/^;4H#rI61rjU.,1eG/p-8a#&d?0k,l.,8KbE$;Rj4WoMc%^5fM^^?(1hX^YQ4o?g:f@):AY/"jBVR#[9[pl(D)aZ&A,F8$70_c,%j>-sR6=JLjUj&^M&#33+9,Al*V>K=)-bVL!Ei@*kd.U[4^!'COfQGRLb.skUL2,#(eZUkY=iu#NBh#M2aWSma-:ec;E&51A*1PB@%QDcdommF!mOa3>"?s+IN9:&M:h?ruATtTF?mG1ln6q<:/I\T)@Z6(HGX3-3CD"h+Bd`*(FNR_K##YDHkeJ-Z,OM"D1kSJR:69i'>%0Wga6[8p0"?P<%56;]F@[k>oR]eu@\<mt/S\CAedeXEJH8q3R9d<a>G/UfjW$fS"d[;?5F:Z7^R3ZOnJ2V7#45(n]G]pRC9$HlCk%=`.+k_kJRW7^8?JY)9F4s"[X7(6MBi0O)"=c)=N,&d3MW1.Bpg,:Tj7L[!72-%*h_!6(D^^Zk*Z:?(uKs,fCT3.OH%"5u)_0%.%#%[r-s[n'm;u)t92a>srJ'-c<_^b"S5F@?EV2P*kE(<*tO"ZuF#2e"Guh'F$Ck-.i$))Ti^K!fCGfk"sWtQ8C')W+X#@TcJ]Krt_EU%i8e<a-Oo`IDJE7:F_Jbq`H4iQAZnY\eRfRIl24k@V<t'#QgX]%Y,O&P07H9[ZA]I'Y>#3Kb+6,%1:MG5</uf6GEJAY!bkH\Or/m'%h.@_*e>5i?!Mup8K.+O(ZteFGS0]IA3KOlL$Tjn,FCs:m4/KSd>ua/eVg=42,5jh@@&\2'Ycq-:Rdm+E7<Ri6eLcV[ou3#]9;Bk$%r_g.;@MV<P>3;ZQT;,^6gZ^C`c1J(amkdc>gU;]GqQq8j)625HZWiG4@_-;Yg7\[QmVEXf.P-V?d];,2f%M&iiBr_r#hGgN9lkYl%%^@):\U=I9^M[qM:#gDbgB5oT^M[r`%[i9`)+Va6'E)gWRRK!Cn<jJ`6kcJDLWlJ34rViE(c/DuKk?Pur3e:P6pkm3(mu<p;ld;W%5?]f)OF3P+R/(``jZ(?P>CnCt5\K-2@Xl-SaPoo[KlOIM;k$3+;k%fUj"RQ0@a-<"pbSd*[:X5jY2;4D*Cl0O-ar&lD6/Rg3=A+i%-C'G4U&Mu"ObVL0Wr`XQ-r]mc-8suNL3/L4Odk'bf5/K+g[WcOcI>=mMc"lHT@t.<n54U;5PHP12O#Zg&Q;n:o\uT)JlCFoWpP%G%4.b.qR+d_1=6*4pG#tFmWCGS]>$880]en$YKEi3[;5Wj;VRA1P)kgJ7<\)A%]GKbq&Ic&fcY^^DgQ@rZU8/SQXkiORc#&]2RDb@Z%S&,"K>8[#'1oec-D5]&d8'G^F&Eu@<UGo4o4/9j&g@;7&_Q4NL]qgVSYqNMnXDT.?['F-kBqO:cj-W.h.MR?dg_M0K1aq(<b19?=%V>8M2g-/iI*D^NBDeb3TSL/j%bZ=Fp.'!-<%eXJCOtP`bP3O%<N&$)OA7d?=AMGGYG<E8R:Mn-NgRg7/dJ+6H,d6VY=L>Ad&CFD*%T>Oht0)oQXCh;$&MfeI/`tR4t`-+8Jr@&C!AW(,.=ZuH:d)qe/VN&p7\iOUrRDPRN[HSs:i-924G\T=3gA^$09p-?n:[Ch&9sb>r%e"#UM=A<qCIP`RQE*QQP[Xjg+pP4I:1dA:4MD^$+e141?bt]//B2VsL0^XSj0M52?RScKGckCi,Gs\_D.A&,,"2hF2k5*NHK$lp-%XD@uk\<hu%WLU89BkBk3Zk:a/0["j*eaY0IU!D0FZR!C'U&/^"CP'>'@)+9uED/)c:TBY(Lr2,I1fYk+4gItoJYN++hH#O)a9Q5P%Sf]d;@*nJD]sPKWPhlPsBESjB7AQsu8^G+#+FVCA?9cU?\pZ'u]4iK\fpm-t^";o\KJAW[[/F&,dmQD&i!m:F/<>-TR[="ED?SFe%Vcp8Z)B(nA4O<$6+&&bq?i!_`pK_YJkkWF($k_Dt5`eTa<$Nf[JmR.:ZLX^L2dt(%16eHfA^E;dd[*3:NSr_!J[bWuIL1jCJ=%s3%^mC-\[9-/eNX^9!"X*Oh$Q"M`OA\,mQt>b";QBRuS7W'C$tHltaF=LfcT53[0-LAW\:p+6M&3.A&S@aajm`_.8*5N?&`,g2"+%1,%r/\LC`17b%6'AD-0HfW_Vr'1Yi>j1*!8qiN(aSdJF<oa0,4Ur3o%u`B:`_S?3C9Q`5a6uQ]`m:Z+uLZ<Npe+\JkG<M#ekooT=O]U%KGZsPWIU!f+iXT5jK-%I`/?F!#Dk`lh^Art6(H#O5QqRr5#=XY!Uh-CK1R,Y$64Zd+Mh^YI3Tm^&?7u\a.,t9&SdIM_Ae$*l$J9$%=ME##6Ksht.&pfD>,]I2XBM]g]dl6:+1m;kg\RUuN8AVH9!pD\lmiD];<(i.PpTChH;\K!_\VgC&.M0!Ss]T"nqn_<HDN&\q@4)Y%C,5cX],*<Mn41Ui[BTGLhR3l^/T'UZSanRg2#+D:?G-U(BTnJ50H=i&VVa(N2eJM)Ism""a3da>HE+>2h372.SAbJoC'lTcD+5d<%&geY4R%?Y9M??F=)$Le/=JCH.apdP2ppY+Bf3$q?#G7rP"1ieK#VguI!bhC=@`#c*+$Xpa\54[i`Nb^i-O2.*OEe7<U6P<*@u-3o%[XaK\Z\i3mW3HB4Cp8mP,C<c1IM2C\/4bj65TmK;Ke]GOm!B?dL2l6$T#%UoQ_rGmPGcq3Z;42IYJfn:ZUZ<t>>RpP=\o0F[tk27%"Cbu:W-bsV.U[ptW(VF&f,YaDY5?E0rs?0;Tbi&CNdJBbg`;LAaQYVm@!LItrOSk'dP.&KP`9_pIY2,Xn$+YsYI6OU#nV)1&@B.g%&EDH6l\%j%hd`#!psF7.#*;e6T]8b&M#^O9CQH*&V<@$o`E;]+mHcnX"=dg+q-lV6H#18+4*L07]6qVZ[L4g@:^$n]k(K1Z:mLZ,%+*UNF?EPKUKJY,i>D*:e=9RU`M^sZ.c(*@RE==!b77%GkY99AX0?V3DBbiF_8M?kgOQ.*KEjUQO&B$;#POeKgpHS7hpGa[M@9i`)%$W7KuW9LlJ"uT+fpVr^g[@u&f(r@->PT`jF-M>2sP\crp\mu=L_N5Oc==$NN6m4mB@60;_do8Qn3B^.j`71:m`&S%o*9+pojYMos%1,4<T;?<1GU#mW!MHLI(W_2JLE%dr"0aLb,HY6dO"Z0)*"r5fFc+JS(gMd7$/E-gijYIBG1,4>VIK:I16Hr(u(%ZB-4u%Dgr,ah,%>V^lcqGU(EpigV_!FeQgP`sK!jILu,-3RdiTd[*U\H5&:'6Pab4ha/.j81L^]S9bZ%68(\`8_N,3cb'k!uO0b)$0D-dP.&KP1:4!%5Rr*rO(L+cjIBWZ81%^IXe>f*cC@Ik@eIN,j3PZ+@q#F0V#iDn6B*:iLfsKHf]n$?Ahif7S7+\hjCcgW.Nmlt)=YLD&,\6_9Y<>3%-4n<QTOU`qYlkdra09kuVM!.ph0NAjr^8n%2oDpt4Y%rE#M7W915E,@=]#ff4ua71oFS]B>*P.t15cXZ"n]esSaHjVYk0'GN6'E[%MNXB/=seqmWj`.XIH1Ciba3V>(!G,dq?h<e+":8OTP[P766PDj8sWV@?6"J&"E?QRA3>&2NfqSPlSfhF\U7i>92pC#3p*XB2F5$;%np&$CgsFsEj.bEb3]CZNrO\G6)?]YpEg/+Z;$QY@LZ0sf7FO6H?>n\Ydl7OCS-C906-hD36lRdViB%jO-X&q=[BQ=uXJ/jse03RM%_*J[ohIi7V.aO1n5Z0%]N]EfQ,1IlLT8rpa"m-OBdQq<EP7\?Ga+u@[8J2O8*=/$09To=$Tr(L](o%Q\ZE:`O*iFkh=^hk>!\o3j%#6HsKJ=7.F-L"rB3*Q+<Wp=pWNfJo2;1U's9QKf3?@#H%1C&9GE2YWnYDgiH!Fgg+PiL^-jP>n&-3OrnV.`IK@ZWbUNeP''a6qd2%EUVE(Y<5PXa4e"W%dK$#m`;uO(EQHp'`Fo6\M7%Ih8O1ts)/`#8'/KEWCjWZg,G20$qg_;jp6kNm2JASbp$gq&l<Y(9.C\R7[hK`%'it*'*$HX5OAlR[@nrtZ#ZXILHfMksIA:,BoU#YMJn.`3p'i1lJUl;s+Z4&FTMi4:b/L8:68Jnm0G=NoF<I5d%]HW<<Cq\$#FA:%%.BRi6.64.ag<*&`JU#<$MLl)22e'Wj4?2HG#>++qbER>DM?fI_4Z2.[%o+80<D)iIPq*EanPGG>fRs&g4h*='BjsT`_U\N3H>o`/%Hc&FJg:6?*N)'$'Ujq":5^fFJ,mu)9qQ*XQnqm\85k*!^*(:Y<:i,u[kJ8T1Ke`BG67o$H)`.+m*9)6_neldd9FN&C'L9^/:h()P%P1De+<3:0"XQ%&V&3Mc!hFV$u*ZXH1^m*::4:a'fHXWA<%NOJRE:OlnAkWUUd"-_-3MFG:e0Oue*h8TW=E?NM"tl3,DUBnf6i8f#%quF">&'FG3"7ja/!>>M@ZVo;T@$s1\NeP''`ua$.keS9bqps+[^!YobR<W\&<!Pk,Bl&A+-b[.Cru4GL;6k,GVAK+65*lAf1NOlG%+eE9XZmH*X3Q!/.ML>T!Ma%m$N/7Q\Plg0:'5A^X<RSG`-h\!s/dHu@k"H%ITE>4s8HNYPDui%:hn\F7cbqVL@K:rh"E_io2%cN3%l!YpedCs7V'U@/h3Wta:$)[D%jAL>08P#XMl#`7e8._Rr?R8g7*ii(h`)!0Z.A`Ys644G.3F8C)V[5)+5o^Cm)3:oRdBRGWdcg=%%QBVu(A1ZG&BlpNXH=MrHH,F$gNL>75aPE4tlML8E;'/4sb38*f/or"&1?_=`<DINTd9Rpr.DJ=OK\:FBR?XKP6@=)G<s&[Y,iMH]%iN,!c"HZS2+>Y@oLiXr,QS\pPC*_!I*Cl5k\3d<AMSP!4<WPj)a`B+H:3!%FM3HKgk,$;D-_):!KE)'V"a#\029.k;f>WOdJ-DE;%s)FAQ.HLaj!]566Us!fBN/L),"X,NM:UH&"(``WMBu(W7$QY[YJ\L=o[\C@jqN]bnFF1(Q6CD,Ue:O!g8RW,.IXqhG[]?SS$=eK(%b(58l:"4r`BJl;KKa22&,ZM>t03UWkWbQ_*oE5TdN[fqOE#!J):RRkB*3tPT4)grdNo,%"UN.(`f6Oj[(umS1%6O7;)"6kZJ(`Nr%k;(&G[J`gD0j]5$@rM,"B1n`lg<1<XAX.kuHd*LJA/pfhs6$Rr*'r-CbrV<PgYN[^HPsj@"4OlJd9adoS+pK64[O)H=#1_25Jk@b%#Yb/Tn\cNu9#q,t4&>e!9.K%T/"Xnnduql+N]:+`b-:APL[`QsK<?q-'7:9tW@U?'l'rB!3tPlUJKW\W"Kh'A.bJnu-X]#hA[!1t%3I[UfLnd4VI;Csu9o&/:D7?elgQ/+@5D!DBdG<\%BbG<ts4<\ZjmPVj92]+&qF(Xqe>fkYE!*pAbpIG'6e##H&X;8a2b3_g9Z(oY%ea2W\s4jtUGIUR<>b#?]A?O<68G*Q/jUt$s1`HX`e<gtqH*)PL3fQkF]u@GEou*R@"[V3tR4-t0prl'%@A.%PIn$2!(f`Ro[OKB4%1cf%V>O'Le'gAL?9/TF/X]aHK;/8D$*bWNT,DTDceVN`ISjJ]PCq`V:F7l\6Uaf^UEeUHq3JWaZEn)(Gs3H-b_6Ggi4G!_kRDotr%Uk+Z%K%Nb+:EZ4qV"ajWE58Q41eg9<3]DGN'ef5N"4b"'"Uo2uC"-h)e!Z2bkZ`),#KK7d91q[j+L9T!R=0pf/3HU,K8@rY[8IHC%U_lo0=-1[9h%$4.3igs6;AFDb#;\faTPd#K9;*c^eE(kY-N%'boqGERoIm'X#)QZG3E/RbYD=k[dYc+u4I%Tm)]DjS4\c:F.308p%flEJJ_BiKsRs8;+p*sFF-lCMe-o3:T7@(O7D3:d'#8:pHR#26a\O1!FEd\=]5r7?s>p^>H$;*b1orZ[]9rL)&36i`hI%^]44A&-e%2=3gb?TuS(4j_]>=_\"bMRtVt00A;W>%sb+AKGNJR3HA)Hc/fec8Mr,HUsfaZEcZ^TpiK844I*P@M92N;aQY/Q>-;hRQdUkKUV]r%l4mkkCU57lge<&<4kZO*<+M.KGLKkb2nPKYTN)$X1O1V]1>?I$,,_#oWZ_u.XN@7dbTp-M;TIA<S>dF)N%>'&BU#\IPq:'fbCEK\%R?AtSX!q\'9mB(>KT<\.P]OM?SEUoj<:cA8OJ@.ZKl,@*<*VjMnQO2<7O/>DKeD%A-h.q;-p\30ig3'ds52\"m:_q.f0)F76f/HZ%%Eosh`HPca"DF#B_mT[SL,#>k".Idt-'5D9^:j-.=>KKO@SN-CP/]71)X'AUq>Iil7RY7^,jo<?PdQ;.F>BX"l.g!o$_E1PDbXfZ%+r#D^@Rhkg0IUfo.M.I2H?&mc6K:D7PIX^jCL5Vl"3lXL8SZG=Z[g&9r-Bo^,pt>)8`5:G#)+?En2!ugj7?,gm2,"=GtkIFP6ZlE%4bB$+\1t8F6.UKoYi9;%5F*fJEpDV]LoI0)OIl5C*u&S7#K@qlHuf2bf/]&aJKdY.;)60IEJD83-d%G7P/O3>I!fYpZ6Kr;PjW<.%VucJb7Whg/(V6EYBX0(4SI>fn`_^<1NEVd5LAoII"N?@XF;h6HARp3,B8p]kBL!BKa()!bEp&`@;6#E4^lF+p5'f@<)):GEIOiYg%FLLt[n6?O#-SK/tT%QGn)bL.PGp#[0X_cp+ni-b3#sLs%/?/YF@5VgtV(RbIKl0Q6Uq6rh.hk-!I]+/-h.%8WjS9p0n6!bp<RI?+%Y3<biF&]9gP^<ut91t6c4D5=11prA:)iFkro1":jOG.QE,1V\\piJ:*Pm<<'E3#YC_NQAYM[b)FnG6#b._=4hd9mgoi/')r;^_u5%a.gk_O#"u\_sbJ[+.eLk(hZ@`bbtTDk)+"^ltbj,6ft]l7lEY0H=T0-e6e@0J0.qrKp<%^5c>PQAROYrF_hlY,[j/N1AYJ)4jS#'%iPR'TnI^p?33.kjkof.tET<!Jk%"JMFr13SG/s<CM&Zie-+-$`$5?!1[<;k[U=^YF%KKBkkHjY65KTr)$7:^\*T=uj\aMhuo?nae%e=Sq%0,&Da]1J7QfgI_U!`JmKr1(V`^o%9&FifctY<Eu_?NcGXU:p4gC@ZhlP.>Fh*T<QIkdYLLHof*OeZ"`\G41d%h>(Wqkl3]R%Uh9t&33P*^I5/0\(]SYQk0>>FlF7t6KoE)/n`"DDM"3[N`,<Z^`9scuU"K;W?CQ*KjFD'^=')WHIfG'eHQ^YtqM-J_+&.tk>XDmk%cgc`dPCF;^RpR<!oAgnps2)$cG'lKeFHW7[]Qaci3%HYPW?5'Sac\"E*6g,#LfIP9[I\O;V>5uLe;GTEL_gf_T\!H*+7mY!qaZ\S%c<MjUEcsM]Ru3J0QEN;jrosOLi;@)3#1$rYalU_fO4SCVFjuYu!VRMOVRoJJDs/1e!GVr'rACe3Gn.o2H\+ql(,>N+0Ghm,)#goP%*PZ@I0fo3c0o'C_rTC+qRHci+pQGalr%lqlmYum0>Y\-U,3kn^>I'3t0!74*B5^.dp3,'Jm-UG71[j?`&0:/gZ*/G\lN\E`_g")c%5KLY_N>tW-2bEN=T?+k3A:,B.K@kGn:;Q_BanbSG&UsTGiX'kgS30#25:.8XmT)Xjf6]A/7&B2MK7Ve9R"l)4&a.%NFK)Z4k-Ak(%kTL&5;SD49[2WR75JH:,q5Xb!KCb/k)*FOjVpZUGE>]&9aSgG2!43n](7-cq\lN6l.^f!%p4GcRJG-lLLee>P>j[uj+njMGFKC(F%HZ]7p4br3ArF_4C:_-K(4(q52;9A$[,+DWKb:+_EkS3?qTJbSNF;,Ib=<o@JTa.mq!8&=)gC+_dq!EjsitI^=RbZ_@#TL(3*^.\E%j65FjcYpaWn2S<M8A?7+oS]rJs.8+qbW"aiNVpOCr1;BAT=0[+?T8Q,VrlG9-hllC,P@sq0:\+?cI%\En82snG2@68PO9Xt@:mrl%GF20!\f`f)M1s*fV.mb)FF7p.\8qY\#u2);1;tM=.]qB-c-^2:p5^6@rm;2Oi:bcM$I<>\l+)f$K32Nolm9%A`'ec07"`87K_B?p%&=MQ!pG`-+<<(/s*(Arf]1,i)B(P>O@_"\2U#SX%k_&K1m3t0CoUka7GGNl.*RrO%Na%o=>6iu@CWA$QEdUVQPC/Cn43Qg^#tZ[/%07FkFd@M@aU%KKe+</>,H2aL$b)`Mcb1j+Ks!k>ASeL[?ln#L2\GA5Xr9SfWi=J5%Gju3TE)N8LW#q3+4RO<^nAE!5c0K[g\SVSY%o>47!F6/DmH(k69>=V!ZI7`2\r$LT64.uPQ)t_PFY@74XjIT`NNi*ljc-.4qf[i&TFZZ:,l5S7&\`71c@!@XL'Ch)uhJVM#])B#G%*E1jgNGa6jVXSDrDio7!W-eQDMhq2*Lb4^rK-V0g3el$(2-+IQCW95!n1DHo^+N2uFW$?LB2B$Yje?%I15]a<WT\1`ZG*ePni?Hs%#U1OFi>>5VNR3XL=IOqCGcb>VGq9uD;&R_WN%l8oOcJW23WSY[4J)E7"$mYI/Vd`/Lm%_@]>>+9)-(330p"?G-+H5GE\**-pX;dY%#Oh"Dihh^&R4JB<MsYUS*?5nYk&&U*V>g-=o`)"8W>5E$`V`Amau]s4.CJ]R()4&dD&p..?jZkcL@dFPdBU?E$*#6PRR(Cng=HoX%NTV8Mko[Y@T/b5[86Y]pHg3eRB.NVVASZaGCW.3+*"ncp^l*l=PnSfU+tXh#O_RU#TOOk_ngacFXQrAK5?fjmjndI-kt_X$.gX`4%64/d7/a@-X'g7#pT[e/qc.hUlpt)*5oNt/T@t;elH*cbUU@rScm>'3*pdK$@FirRT61)Qa'g)1dU@tS36@B=PI.:tlciTC>/JFeL%4>_;bY?N8H$u>LgP04Wu"Lb*o.7"?"[rnVG#[('&!=A[iYBH/*,FE8S#F>':JE+Yp-U2]$:R"olE^J9#0EU5`+NQ_RmocFs7`L%*%(K@A/mZ*oGR-T[p*+(1P"-[!M-a-'JQVeSS[$F)3Aj_5X;=Rkt>]0GMVD9TLf8kn).`d+t>$KTS@eWG<C%Wi!(n_DFlQsi6@*%o[%%*h-G?'L%Z"k@Y$`b@[@C5:as%B6bHp24!BVtKo)CMtboK7ElSWP5mLH@Pt$k@LT<?]3S`AV?XbRQ`V8_;%'sgHZ6:Q$obkV][$f%K2NH\QD@)]452J6FC&<qaF4k02i*n4/Uoms[ME>JI/U'2,+NdthX6buII6i8s+NH*3X,1f-MV*0dhq'4&LIHfI(FFQff/Eb1hH^d%l1jmD3H%\XrU?"8qK`$O%K,H,^\dFX?[X7#ronXAr7/!-I#**UjH,XfWE0#_crVaEVuQbThu*"g^\u\9J,S21J,JR"55sn-hgP6C%^\XFLqsiq&^P<O'nkYnWr9&S-n_\igIc((qGMdY[22OQoGmrT3Su^O]3*:\0nfL!de%*9+Q0Fr?>+b]JqT"(fJ,,]EqM1+dI/MHS%s7O-\O+3.]qG/2&"]%UqNHGtAVl`>R]>;R8$*_4')),+#>b#uqW^*@(M[iR!i-Bj7(p^;m&;V(oN.DF%I#>LDn<"<O'CU/s`]N]5%dXi*HM+UhrRPY&s]F3I/"ITp,Ei0P-b\hJ-?"$?Bm:s*UCdcPX^R!Fs*)Jnd\.#0V<[B1WmQ14TnI)9lW,ScXjT1Uo["V_)S6bHl%FND<NFWWp%J-I*c"LLR-,h+M86L2?j[;3_nri.9sg:FXALo2D\ESif#A@^d">n'3o0q>)MMc&L7'Tbu'!GA2m2AYc,h<'TVh??s8%EFbL.5bL<6od@oi1IK)(fpl)Y]%S;`@4DCp,a@'5Y+nRnCler*W\KaG2uOuCMs2^A&lbZZ$5(u6R&>Fcn,d/I9uA_!"QXVA;^A`9%:Hhi/HQ29Baf7"ud;fFF%F?eE3g.>[61,7/pb7BU+`q#1+HFKcPm*$+CU"Le72C.HC@4I$Y'Z3.C?<(?$Q=:[SHBL;:2"?h=Z\*D%VtK9TXD==#IG?^AaMl_A*/V9<8s]dN!>]C("&WX>$"5$uZ.Y=*NY`H;FXGCWaPRuT^';arQCM\+J$d>0.GUAkB5-j,c\p[[Pg=`.%0E$@Q^DZJ9gX#opRi]:hL!A&;L0J@;2o@XBg?7W,S5;Ka%mslZ"]$FO*5_MB7F*rQ!5`VGMgD0TN(nh+@9;%TLM[P7F4;O5LO2_?%d9<Y'i';9u5ac1:a[U#=KGkVF6dg,R:M;g\>(]:_EWf$t>mQV'VamserJ<SV+;R1[h<)KSgH:b@cU+V>pT][OCBDW\PbLISQ?kj.%_U<RZ"\BZrf>cENk'$_RN70"_*O(QAJYa`^C[2ZF$VIA2bdh=qHTa4Q)<Xh61D-"+F^oDK+N%;d6d"MFA:687fNmm1)!pt$.2sk.%b27#@l(QLr_kH&W6P:hFgD0?'.E*9lEJIqtj@^1sPonYs=qIJ*!r]k3GdR;#nb@<XrmoDS=$Ip1fti7sZ6L#1Rd.lOgpm5@p8"&r%["e<l!T=G"@<)j>)O)-RGf[A\fW#R.D%Pt?=cuVm'_9L=?.Y7%o\@\n\BZMoRS5@@[269P8-0I<#;H=2QBDml#[JCdRHE$0Bg^FD%!5ITH9!GK&GgE1$D5M<+Lkh$A1*ts;V#aWd"g+8nc?(2Po33hY8B(]l191FEB01.(3nD^0,?O87@aS51B(h,#?"4PIPCMVo"^RoX%ZMio^Kau=%gJ(gElq=PW)H)373?WELLF;0Rd&uGI?VAbI@%A&.#[Jk@Tj:mE3f+PiYQ<"Km;gd\)_,nelft.Ea?jo+NYna3X<10i%[QY%N_;I_+6fJ74DAC`QU/8iY!u,9H'NJ%)+%sZ07V[miaT@e@<<Q*t6J*j:[@lNV@\dP8SmX2gh#,rS^LV+KP3&GIL?2\Hf\;\1%JPs%-'ktr^"_j"N2+]R!aJ"I09T*<geMUtb)rArX_,#$Le'`&-ARZ<P$YVN#X"@Q%8P9`4=SW>METUeZ3$<;__\H`((7ciSJd[eU%nl-)DO#1HP9Q?X$<P/E;ZDsA'U?EeDiBPi'j[eRe9lUmOKM))laNg$oPId58Q4HhAqCN=$\^*:84:&AOORl1HmF8"r;A*lUPZ^1$%!.q7K(F4f"T@DSalLITE88QnGhEi[-!;ckMF!t5D%5.%_$LOmg\Q&/sP+KLh%,&]&k*;f6RV[p]:t[<\qDfpQLW&FAW/r#T!QpJ9%$3=b)A8r?3+rEgNm9g2I_"s0L-Jn9Gq=a7+L.E@s^6-VZo[]HN[]";$Wt7jrf?bL68HH$Sfd7]rR>Jl6X6nYNlUH7QW%I%%>sqdI%_*gHgL0g8D4'&e<)-L;',0S_%9A*h`-,esOYbF*4TWV@+Lg/Yn(0"dC_a'BC^r"MNC'CP<o-J.e6-OenX#I,=jme5B^mLkR2:rZC%f9/mH#e/V@-R2(3Fls@-CU^':@"s5g"4eSlL0dbiQ?&g]ZS'8[#I\]jb[BEQ;k1`*XlE,MXp5?XE-Qk$LOVaqGqt(9Vu?[a]K`Yi%+jqnX1FC%6<\Qr]Q;)qE+^OCRH@!W)<jY>"KhWdt)3:>]p.ij[,a409NO.GmdV`+uma,@X0.,J4>UQdi\[m#=d]THX"6L7[$YlB8%HBqAA7(W(5[;1KSjKA-J>nIg,X]l`VC7ICs/6UW&:N<6>>2#+<Cc)N=`%pWZTkf5tA3R@V%3XSP"CN!"2rQ.G=odi?7p/>OP"-qG%e@cK)a9@^f9%ONl>,:KD-/Fk"i=kud=ibYo&k'.uElfb4;!'h>J1<kk1&8eMZrJPMo/W[]XLeb_O(qPmH3/7^03o,(FJ=s9C,ZlX%_aUR)hXu?G\7uaZ^TN0dKPVo@l;4W!CQWdU"dMeD4ZcPr)@0(l1;j;;/(6+[29@g]d7[b^nuaI7+W/@g;ca#7cO]+nXqdI?;IRoK%[S2p?,8'XV87Ktg',C_:EA"C\Z7fq9]A;I8XkD=!E?\^3"DuY.KS:6u?ORR$,o!dlqRlfZ(_@Lj-P`MA@)7gheW*%#%sFBN.^5`M%b$s;F+q;)6/?gtCe93)UOupk3!ghWbPHZ2in7>BK0_(-0IP$qCUI'cDc)mK/(N$sE;%JX-cQNB#\LQ)X$8L./irR7W/JW:gZn'Ua%!L1?$b@0G0;_/YCD69a5Y'@U2V_&-R9sa=E.&OhX\o&%iX%TSA$[dar:1]Jh(O1li:b>uIVN5/5AIV)YKf69AO]\Z%6mGuT;A)BX%Bm"d#2Tj^/[tc+P(mXBQ!&i[oMlE!UAVs%(`H6-eBH'PlPbM^W@%j<PY9dB^ln!T@[%rW9UZe]<`RShN?.a4AD+EU$>'0?cDN2QF%/s2r',ueH^8K$#e(.H3QhYrj^>)#nk\fmN>6rOuRK;#r5Kks:J9iT``TuKq"Mkc`S"KP5=9jM["TdheKR8g2_l0$#B44K7Tj'jAK%0'(SI^7ZCX6\d1!7Yf/OTYmm__G?i5o<fKq,&Fc_N-Kl*;$+&4"nE+$`iD1$>I>rP*<a-VGmrsY`CbjSV?sW>d<pID5<1E:2smSN%(Kg#s'1ck"d<7^=n5p;g%HWM[FcJD;&dG[([/"dC$;&hjEdMIY=:S$=7_Jmm_kORh?*:jKA@R;O0#EMKBNG)^V0LJtg/C/>*/j_]%JfR2//I_O(Y"RW/KUL820(+sUX'Oe243Q8^]CiD/mi]=9)U4d^?h,GbKC^%8Jr@h'dfW^_ZC']LmCj*uf.]d^b7mr_gaJ.oe;pVV%;pB*tB=EU*O4EL=PE&5%_:`WR2m16>0"5M-b\f%h+r<;eRb4,b2I(;6MPMGglN>(^hNY&bp#uKN/]rXlT7GFOZ^jI7\CWYFpQ2A!%'\Q<RfN'D:rhnW3bB,Y+[G9[1,sQn.[q:]gh!'Im]s.>$TW@j!=PBg9*3cf1Jl'Es1<Rgh5/BpJ*+'4>5fD[!\^Oh]6(nOJ1BNe=%<(\*.&m,p*qH![UejI;r8(kFX"_omgG.]UT%W^&.UO;IMl4kuEq?ARfJAMj"jna7]Gb@</(Y^ZT;Ne2-4&p0aLmR1IUH>=\.YJ*B%bDDl>DGYAon7JVl'rl^6OcrJFS)Yqjd@]/M,u%;(5Qsecp7gq@'LXOi)1H<\`(M)rTl[D(;$/.kD3nFSKEA;"dac,Y_,:-!mF9SS%1QaH:h,qW[LN180k<IFPMQigm0$&/sNeD!`ja_HEU%YPCKNUQq5r1(LFYat(/%.^m?&<^_F7@a"2#,WnS!r.;BHjH_\usN3Fn33(%@TTQX%2i3F818Wf%DY[ml@(';4.ndh@&joW\MK,-ERT85W2+5mH^:]j>i&Dj;Df*n$)=:>od_GDY#0dmmrh'b&jHDd?t\Jhc6*@3%2fu-8e=";WeZbg1CsdF9Hi^4Al09H@6oqb?FdHee!7\>XFY^/pS^E:/^kqP$8Cu_BrPBL6&2@RE$/gqN6:6.Y6#,p]c^LtKVCI1m%#8&Lm&X8-_cXcaM5,,7.ZiCrS[fN=56lE5dgk9E/M3..>bZDDGB<$7@,7i#JaF?HJOgY?JdnkmeRiP'`$8@n_Ja>eaV4;9j-CWd@%*gq]bEAYL:&E8DZMCdWD$\TCeT?9Oi;'X&]a4p"p@NagL%7NS:\,ikGc#KX!`soLg@Cg7BC2Cdt<Hu?2bL)aspa8F>)GMA%hm.nE%Fo%.nJC::LiR+7N<U;NoQ]`GB>.B(H$>O!8<XY&SYS30<E`8mQ(s]=3dT[fPksFB0YBUq=L'KL;9Mt"N(A@k<MMXM[JE$.`I$7DM%Pp=DX$/q^$REcSYKDMN3nsl%!!BCm3n>8lUT)&4R3s;*V3sI333bC0jbU>D]8C:l[B-bAHPtNA-GUBBHY"dDI*S,<SJ.@7fPJ9(t%Jr>sc@Fh3@8N"l8#EG;?T]DgT#mOVam+3)q"*,:I7YELR`)>"i.8u$W5.'XX\jKY8,D;eg9I=m1#o33`ijMP#RE]'*\h^]Tbec=9%1nNIne8ri14:k>j(6ZLAQ3.1!1"p[sTg#u*@Im=fU'soTD^aW![::&.Ktr]\0jgq]%Qcc:%'rcuUp`!rKt<Z%^SPBnG-rs`RSEPq%S*9XDo'tT17"=B@8pCT7]cPVk<jf?LlL$EG8oLqP/(^PooCE'ok/bom^,0iJe-I9j>\dHmRU%SN5_*Gp`fu^q^ikl(+:gaoW8jmi%69j^meb45C$$;a#!BJn+Kf&TDq!W_Qo/k223^u+0obTHmUG$:?D$Vd7[-oN#>A&oeLuS8:H-)_gG*n!lg-B4P,(6CQ.OPO%(q?<.%frF&*,XSJuLdKD>#n:>8g/YrK6@48_oELihf7b!8%2SAH(KsL4iZe=jbGPe%p\eL!m;`EX8_5rmFerAZ5)4p/nk+gWd"$k!V<ntM%f9I+JN2FVa8p`jIV;37gBWT$tJrKGcc;f<09AK2eH'j"5c!]F%`O6u;][7=ik(-J@5trB-Vd_b2V:TD;FDZe\^M2)"Pp?boACOtG%8HM7@U;DdV>g4U$F)[S@\#dJm4LN_\Wj'?0)Cu#NfoM]_A%!_C:d#rP>IRs>n=Z<[XG*2a>`hK<FDQ+_O-!&m;o^47k"gmI&]\L]%IHMfG"f7Z*g?H,ipF@GoY9TIh9foRYeF>dc<Mk#h%c1_%q4aDnEnYN[N!)oe?qNl%=!dR/i>P-S@aW)g7/InIWN*b<Omr]i64Lc>%O6R+?8pbB`e6Xr4PV+ImVhKCmPEW.T,Vd*NlP8tq9rBgY1^b-/dJ(erFK!@d7JpWP3E#')A+T/N7pj9J?[p//^JkZ\NOsh);0jH3%LU(ga8[)e]+;1M0(n5#d6O_FJcsRIP1JSIKYY'iiW.tfM36jcPPU`UQd&MYC.$$-Qd]<T:/SJnSRg%`0]$<]g#h6c@,/oS5[qi)6%ZNKk)2dX8&EI+QN?L5NVEI%`T[s#aT%2d9Cl$D?t7qID-c#:i\4hNt@RsBd/*`*)29q`W*2rI$.YR(Wb)dmr:g.G7^^aE;#Z7rtC%pfCC',tr5BEO#Qc\a1oH\f9;=oEO,kje:Ldk-UI/4_.j16>U(V@qZMI%atNU7PG5!]-%L1]0KL2I*@%=_XpqlT\IJ%R,24AY]3pJ%n:Q`N$ZT[D*bO<sP&+QQ=M!KIP$rYZHu\S!^`56_<+Vj@VDiJ2lP69%Wi>5<;hG;;'tG^QRqf\>:AC]@"h3g$_K[mhe5522(7:s>%,`0th\2[`%H5kO7H7)1S/-$39Oruo84IUS,6$`oDpLO$3lh>2\=-+I->:b9AK(RWi@PfI<gfQR4o9W+3*dC&WMl$[B@>Tm-R\KN7%cmRl;N4q[(Y3pL5NRC0CM<Gb!BueXKG&_)X*k'`aZ506k1Xk=uUdm`Yk*0G=*b[6q1Y[NR5c`EL&.-c(84#)X[05_7cjnL95RGlV%f89at8<=lg@(Cp^E-b$eK(LaNC>jRLdX0!Th]ZfBF[P_cI>EOsUkeOc7"5@(!N`/n99A!q<._[N,tJQEW_?]'$duqQH?,)Mkmc-/%T1=ta80OC875U-XTX/kGkm^`7Jh*3eLs!X&/Og6Rff^mY0mXCFdJ&e)#L@&^NeMo;1&GQ3ri30IDNtl<7TG/1jmucNk4>9k:c/%t%oD'_lneMrlq0XU'2D'ehoD'/&]@eVZT5T<sQte&FHkVh)V"S*;kF3&b,BNQ5T+=q4L+u`fN[TiBe&0^L#2F)L/U0Rhe9^E&Gd]$3%794QrJST$u0d=4'@!papcSlDXjPf!bcc='XlBT[SO?6ol9(MfIi)CO(q0XUi2R4B*al`bjU7#PZcZ_W9TC2b3T+=06bhO]DHl-fY%IV\b,R&`UsH9NF:.Eou2M7QHePlm2okp'O^;J]h2DEb#)Y=27acKE*W4OHN\G[$VqZaoZ&2AI;/HjAm2Hj=9ZI$7!TYC+'@Yb7_n%HctTAn4>KYnM?dJoi>0!@HZn"Jop("5j4(\=l.]_[;7IEalcl)DrW"5Dk]K^d*YEK+/%2%%a=)t+Nrs&d#lXuJ^!:]aI(4MBUR2%%EE"k[BKdNXX0tMkkaNXTZHnNVr]FPD]Ud[I&SjDO73`+e=ECs&=@+,(`]/f#oN_kq')J1UVK["+=5Ct49mj1H5:#kAT\2S-VGUhV%/>3UCZW52WZ\1N4RP@e#Q%Zl.98[H?P0euAj3dL?9BZKXWbqiLPS1K2Zn*"beAH9q(>`d4I4-ThdJpg!]P2P-P(Z#>?ji:.KKbpB%cn,`s$%8"5AR#Oi4I5+2Z\1MuJo6uWP0c-"%F_J5^'!)Hjon@DhsiQskhEju,kUKOGsWV9?pS@ed"f0?CAO9/oO1I!r%k)Y$eHq-%DA\T'Q8:9SO"2IJLLs,a5qJ]?ZGn[//>E`f?S-4n1AX6\D-F(H1\s@0-('*P1\sX`Amgge^5H5BV=-DJ^Z0jW*[pPZ'r/F5)(6uS%AEE5(0DY2C.;ODWQs2Hb(6[)G2,2J,ge/hJVkol@fm;ZBYL)+P]_2KT\hBN*)ETk[F9ji%a:8==_#e;X*LuFBm5clSJ?%b9iBk=&%#(UH'jb7(S^r1S0l4.WT?Et0CR`NssW.qGY2gm!4#/(8gBMl5pU6=4>WN\TQH@)JoQR$Ce(M4knS"V!#mqF/[iEF7K[UIks,U/nK%4n#,*TbAHq!oGO%%1oSlD&ipZ196>5;HVbOR@WJ35ZMaL.QFpmA_[V42Gf%ZG.WQCM="3sF!O_F#d0]*CJ'ou*Djfm_):1L"!NY4%[N;rU^*O*Z*:1[0pnPZ',N)KjQ8P<Z&_u%Ij,eSB)0$%c;h.cS<0Wo95YCgO=b$>-``/no+QLJmC*3eu'&b(g1JI\p,75\1@nqk)%5,J+/aM"E2Z:3b?MVt"J;;LVo^3G'RD'04_4T$\aoO\fgdD6ObC&0T?'2kfYJC*P4QjsW<8f_A+p_+]J8^B,GP"]"/:tt&XUO&a?%*)TJ4#U=>#bno;;lDD:gHF<(-</.R_1,Sb="q+!R_<su)")Xa'Hd/56'L+ckKl?/,j],Al<'D6a"F@p>r:pCA1mBG"3R!d+&.1ZH%mrfp)=fHF`cQ8AcK*8#D.fn/UhlL"<SEEqUG.7_bqcFG@nI=SM,u/#.@<>L^&0X]D,-bDj52m/MaQ;7fQ8YeLEQa8qQ%kq*A:^/=%6(*]5Xu)0>RcTHJRk-(X,sp]T^hc2m.3]#9jl]bZi)lSQ<01bS:`nC[0-$Wl@k-8]pef,MF:Sl*.!_3\Q($C,)DFQS\u&<SPo8[b%:P,Q<Z4A5Q%LRX?Mu@7YicQ>tknIp$RMf$3Fqq@o!Gg;T!+-T\Ba(-:XP(PDH6MG5oL+P+7.STmbjU.QjUGdHmed97mjHWO3ZI%m%_QPRqY`RPb6lKM_k+,tu0-Dj]!F94+="=^<Ar]QYC=c?HU:1Qq>32uU%h"J"#2$XBJ@!gO[;1lp"sMt9:o`[D;EHDEgns@:F7@i1%G$r]ZPAC7+<L/6=L'?ptQH[\Y7BH?=4L@qfb3FW[ZY&M[,Rf/*;K=n+[fN`hY3LR!3Z;SR-&A$#TJi5b>dm*("U@aZbXHjgO7tts%e;O\%\\*TGU-u:.M]%Y/BRWNk=(:^%OcS&RlDX3j#e,McJs2`p?H,[&[@VdTF*i)e%fm17BEpr/&K5O=$0`%b!$PgCoMu#g31t(0%A#qJ[@$,Mn>/Yu*ob;Y=WfGY0nX4J#Xda_qhumG)LQm)`8qJho+tLG[L*6c-P2I)ld`OjHiMY6f?jtJ^cX(?`65iirBbdUm$`Knp%;9T?,1-dj4%9Un#&+(9mLI>cifm$qSScR2#%$L4rA"msVRacl@m?#j=[2jWV4O:iQU.\M?.Un'sO[.#)D1Cc17R[*E&=fB5Xh_^n%PdLpZqoZ.)9@k%5$<Z[t_J^t83*.,=<52o)M^W*[3t,6E)(K+(Gdj]Ia8h&apkiW@i;T=LB:$P3J?\A@)Qi6^k:Xh,0lKIi8kf1u%7?a>Q%(6_Q*iUX/\$Cu6'od'5=:rj=Oj5MLaUN,Ga2N;$G3ma76q36cFVgjjOa8WWhBD`%GF6-JoY'NeH1P*DFW^OQU9*f8(cWg3%=euW^ae&m"e5#Mt!DH%kqu-Y*Qip[s)@VQpimYJ19R:]jk)4pCH4949)B,sm$"W%k6c-.H.UFG*e0N3X._;FN:1!mR=_tpX-;sr"%>';,Q&V+Ig#D/O,Uh3BQAf.>oA1NIi]qI07HQQY3*Mc:hnTEb*!5\t/2D/&R=Q?2-!tJj17`/$Kk+H'cS=Ll<]<2,hfVM0(X%h&r%<EOGm&[>`LTRO=e\aNluNQmW>^F#BVLrAZUHD5cH9GO%jZs#sl:$>uD<M1i@C*]l,lWDZs"u[9.5>![+8pfS-jjrslq[GT_m=?\\%4f;;K`@m*+LP[EH"n0\,64ep9D::G"gg4,SdoAHoo?0a01c%kn\s1aP^G3*2bU-k5i[4$N.WeH[_5@sR:o`t+^r>,oR_+:>oq;bn%?MbbY"Yd;(Ek%,dcA(HtoB%+uC2!nsL`XHiM4IhJm8EGZJG-BI/J5gK243!*O3ZFoT#1kSY+I=iENBKT"4dPg`Y-8gmH^:>`*1<$%+Bo&s863E`3ULU0#Z5W3,iV[X,cf\:\:kl*)TT(Ra].U5D3r!k>n[sYHc@g*IJDK"RJNu0gkf+)MKpYj@R&qn%\?X@JlUH#7C;;^%^D'M(?B(s#iFE[>q=L9\MCkZ_)O>^/`]'faJnmi$BNM(m<&*a)I'HcseQJFJ::#RqPUn2HJsdi\[If3DBH1Q!o\.[\0<e(6b7or`%FaD?6a=Vd,1B6RsbhB4oD!7:H$#%A[Lqf-(*%_UaJ34-\MipZ1.8+=YbNDYN")q2o7WGlS/`>T'NL$R@7hGtEgGLmRB+OO$!NJ$D%/#1B(V&@F'BX\]NG^YS>ReZBQ#U$/Ai!-]h9pKnm$`ZY>[MRRPKe2U(?9PP#Pl%V8`FLuZ8^r6UA:UWgUDrK^8Vp?E_\h2>8>\G:%"Y"f1^.VVE`P;ZIq@PFt>G]iN(d`bh"]/mWW^%[V$u8U<?ph4YXnMJ8Xu%YR6,s_5*3DtSS>g;UfIW=:-W31s`7Z?@G]1YoGV\_$%heOuN&noQA-\%qn`=Q]2-%F;,,`!r>PAdjZL1n[fa'!^UrV-F-H3\qH4TY>-I@(1qQdrTS9q'&\po_iD$s>"K!Qn](6)SM#!6&?"%)AmQ'.(PHqaV0@.oCQE"jB;Vb@onH(^6E$K[\HSFSjSUn+V]B5<-[jT)*^KU3fk-%<?Gd>$dIepDRG]kEtU_?S:rR.s111_8n,l-%?kF?8<s!Qqf6%W2[?u*.UPNZ;(E8gnV!SF7"#RnJ%9XHP($&\i<Hng<T$hWp1F`]G@R6H^fnGd4O9qmi6lRplmf56r`u1U0lcG<M%B'0j`]m:V`a!/gDZPbT4MZmDqC_04Q;_cEH[=GfWRl_e$&5^L2Qd;mgh,'4jmMjXj612(5gbS)X^Y6mr'S>*V0Y2"Gb+M\WCNadL%A5G$o083MOcm`$K7Z0H^-QNbjUA;sL5I"FfS)=`)l_[jN8l,n5\V6dN'YB&_ZkF(X[hr`ocR:&M_-P3/@D4PJ5snD`Am=qqCg%4^%Tpo$eS<715d+C:P'4gqZV+7uBL!54I#T.0tf'5L#]:OA&S[-f<@Ra$-jD]a^B5;2OS#Cco<F&CfK?Vif5gEfN+]akX,Kjp-MkgQ&%aDOPW_QtX]`AJ9!/XE8!82_f<1YulY"OjNoSFY1Y?_QbB#+b>+,ZA@-?_S0rQOA[Ba>++WU.fBHBM.plai;RYmbL4V.=<<E1rSf5%>rUF-ckE.[8'ku"?QG`rP*E<28TP7a:V7l[%WS(6q?:L1%T2bKe[eP]^rk;^Z6DSVeH>_U^m*0l3GqRc,)ieJBrfW(Sh/RF<)#;[%mL^=\1m70]a$.'MVNArXdHf?.ZbA#K'i:;69!%!L,YcUe/?)7Rcn,HkR9hNt^t[I"J!k?'q(:^"QQE]_D1@f8c&L&)<,YenG>!'h%6l?`=<(FpXnL2pb8Cr_3X&OlB<,\`Gp0oJZ0%JoGbFV?nWBTC*RmUKm]C$b=*G09&O]\ZUjt5*ggd!2J9WH!1D8i5LXA?/4D6]*T%/";'Iok@2;CpB#+GPN$?E/B6<Z&\^]<JhKqNj@rp,0iTXUE4d*((R3N*MrL'^Z9]pc_k,j*Td:\kQ`A=]1'#PZg#&SaE9TnOK:jV%an<eVmAF1oe3/2=ErCS`Y$[hQ$,:(F,'"^=)G7^)3hA'nq3('26F&]tOmAD5n2n)$oua"rG0:Z35,"cVaGe2_Uet;HZcVlsH75+^%B7PV)A4E98El:&?>fWUA&+Ufnp@\8RHCE86eea^OeZfgn?Jt57VM%gJ+4(eh(FWb+lq@g$lhH$14I\`qE8@'hZ[dC:eU"sJ3elrH%oLu@HXcd?d,"/O07(6,cEmu_6W1jc9:[Yn0WSYT2H&?BBO%o^.-[^4iZSo]oFMTLj,1Wr!gC]s7luTL'!CWr?N2"9)LfDDlaN8A3%,1SuYeZ3:YWoFNuGJf8:5G0UY02SH*^Lf@T7B5qZV?a)\_`OsR[n-27$5oF.@e>%(o63`r+"[58MM4Et:J#oJV)esBem#.m&$ek$%M$UR\WBLl)C8P3tl;2K6BVS+6fGcBec_W[OCS\#e[Mu_U8#30*".E2-m[8$n%Wh32QW/IC!:O%I09[<Chbs5pU+#oCBik(G5<jZ=%2X0Z:R]ccA\WF]D?B:e8,;c]=pb@A5f[?.<!ntm+\p"kD>_i4BXe<SE$`$hti?sJkX*e"DD?ocN2NL"Y2?K=bYd]_?b3BU?p.Ps6%7oZ/CJAGFkBR46ZBEo>NSH:[EQ30\W1fGTV]cc@5#<6._.+1jt$UH0ZL%UPgc7Q,/\?hP_K:WH9]iacPJ0kT$L1E6l'VfhGeRB>a%E!CPX4`90.XndSS'@@Gu^1k0H(al91c/LBoO_OX:*:aGZdNs`g[k$s$lc5*Z![J:L^R^4L$rb=G>J2?:%RF:Si]@NqRKj.f$MN_[%9DEN=XnDVr1=n4d1S1EW84!AmP*CL#cHq-2`2.Xd9.HH/pl[Z>VN\-RR`9,BUg\EU0o2bn!=ldY<.3U3n@0Vgid^fDJ37k9I..1N%8X!>3hE.-6acTOU:*eq)39%InKLe*OJ%]pc6TaI\(m"3)6b1J&Gdej(qeK?We&\_mr`[#5SI*K/CEs&Q^VF.3_$5BCBot6Soo;nm%Y1&_XJY`c8%b1s-YWs/#dO^<]$Z!fK*8)A\.S,L%Zt4J+00nVs[g.+_8B.=$g_!h/6,b?]NKf[l<DU(u.d@CD@_:>/Wssfed=kko%@W/.).Ll\'RqTB:(WAGqAn7D=-gl_$kdGmD:*a64+cM]hO,S#QdGf/<b*!,>eZ&O"f.e?ED9<jM<"5!j.`nl2eo(",9;l8Q-l+d)%]VNMpnE4BD?ARE0p8C^*8`?OIHfg4;)sOB!gupW^apXJ&(8$UCIXH^2hEe,J-4;ZF,n"ghZ@B0SZV5?<9X)d(%hOi9M2)GE#RKK)%!ufA0Une$qW)$[g"fB@Q7k=c/D)W/t;SiVM1ek68Y76JdDN%q1anK7Qhs))qi1`Z!kG%!JageOMJhQA':K=+='ij.t^Z!4VGd0Ml%US7$8*#s4,?s%)5Oi#uURi3HWZ6u<:lrcQKZC]./l36=K5IqQ#BF>&_a-S+3_ZF=e3QH1_0SNsNQ[Q=aG4cm:pSpUC*4q)tcR27:%m%B)WJ`<fN/8NU*W;(J(gUaiZQZ#=rcg@*"-b5F2U<qfikQ=m3?m5sBTq,A94\>`SPWUB_UD-79<d4lDie&KoUlb-L`0l(c8@Q^K%s8*$T0jMhM_.pk-"(Ba913=XNWb-7?@o?O8qW&.f]GJ]EmA8<NmI`YlEUSgHm+UW%PgCJ[rZ+u2Ab+-pX!YuG3oJO'^W>.7T-@*k%)4-&T"bE-[_a^K,$cBtNNW&hW<"aqaMpk36Yq1,si3@;Z^m%!7SQ(BB*D/LQhhfAUEbIB@j/mhDgI&S8Z@@i],'co!I;i;"eH9ZW%oF-eYn:W?)@Y<T1a:eCL!jcD@&=QOk7S67n^p&'n&VlAlGN7//iU*"5Y?/ZuT)K=BLLno69&=GuMJ?F.5cfA)eWKmLbn1%*o7X,c%D&tQ*8UNi1^)N4+h]NsU@(C1%;e]G@mCXT!Q3p?`8]+_cK&+]2cWC@(Uc>HI[bN$1K.krC@GE11-%1ol:M`+fb3``W1c4Jb]0=FD%eIXnFBI8Yo(fFmgZ=(<cGe2#t71Wr:ZTK?=2NaRM>Z]r<^CWMS[Nt[rd]=d*Jh6jGCS^d:#jlMg"\5-QAk)'?-2sKD*i=f(Og`@%%p!b/gh>jRISJ[=*;!5b<NKk1.h;o[I,gldX]3K>/E/d\[U_`RVNm)"h;%_>(dg0*gVE-lZDQm:-pXL#?pktCFpJVMG_0fosr)8Q&%DMW_L2lhS\3[9UmS,:,;7\h;Zb=F8!cWK)ZH#n;^@5CdM\mH]^9JE;gc[&3?poh=;^dPkB?WF30!72dc72:=rmAcDhA\K9<58TQ]%A8,?mh'W&ge6AV.KR5^eqU5fT/\Bn\^`c+Z6I[.<9u.J:f-hl;Z<q'u@b#.p8tPG"[VHsph/rNrP:?q?;tgND)(1(EVTgkE"&'sV%@M?F?-;^9UMc*jFr6Zo&"W=J&c*q,U$t=_=XG9Mu#JIcbZ(7gQROu7.cJHkX@%Q<#XMa8Y(hV9>\&i^-K`4iu1n,$dSJ+NGeat^$%47%&&.)ai\kR(CA3Upc7#*b!j@p#saFs\lp!E1G#dY-)AgLPQ]JjT(E75Fk&G@4/K4]0nM$H-^9PWc9a56j=U;EESM;\W:F.S,V7%cH4;5&W_oT*A:CF4s:&?ai30>'CqFieQkk"Y"2OKSJFCtS-]pV4jBqMPW67;r7*4ZMh%Zp<G5s]af<`p'+n;\5]^&1Rs7Fa?@jWf%J7O3u2a<;16`un[pVNolhF*95AC3j!<f;X3;T]c:hUUG*b^,7L_LW'(FIgAaUM:C8>Jt0Rqf(_]jJlEg\lct`9.C^E7;OnRf^_Wj%X]?fIAkC_(Z%e>cq39DK*N6Fj<,UQD3CKJ?Sa.6C6i<1=JD.S3UOD>oUW#/';UY$A5I;pm>@K/V&!Xu]C2Ye;<UH4PRI*N\ePL*`%7JoR$#!hnQcOMbtbf6tE(IG0f)(%sp$sM^E-SLo#mC4Hl\90"i&QCPLLM\/*%Wpbn28i:OioAQrfIT@>]pWjja<AFD"SS$*k_[D^%iuTPZ+[&29_u(dp5+u+Gf:E1]JMfdMiXFH*"H$bTra`cX!F:L]Csjj^.r^m6VEBUVaRM$nX&`^X]At;LPSZ6]5B;@$pe64+E>;.-%O8.!eEJ:'Wl7*R!e.69e2\3D'ncIE\L[pj6bAj8F,'S.]'Cic]VE<Lq`>(4ER4-LP]MsnfA.2Ki18oB9\uh:o4U04WiaIIGf]^9s%0dh<LZIqoK51@[L<6,S89jS:F]*1R6Wd89=*jno2eIF.YWb^*bjETkC[8kgTOj4cj[+u;MF,E&l7/;F6I##N9U!2^\pfNGp"^5J%%?QcC&YFT.U<"#09&.X52n9>9hCC`+F3RNS*<7YUb5$l^OaR$oLj=*YQ`Q44BURFhcX,u](N5<-L86/oaMMhaUPaTb;h+,fs#&^]t%b>!NBa(,oP=>RTpPsr\nT^6/:OPP*%$rKLkPWBk@15`*]Guk-&%iJBH4bU_U8#VL*bd&dN#+[@J4YFD+!(t]I_kjGI"8pcn0oert%MLs7lA0K74"59XG$^;bAIa+J0R*]@Dj^:sD[14-p0h446+su6i8rU%57!B)L't<dMJ+JdkRUt#3&O?PlYO:B#_(Ki5\Odrt]o)(H%*:5=@0"ftb^YKgUU`B"!Z#l5/+7^6el-0UY0a"%9l/PK_!.#]/)YJ,$?"_h$'-Q[T0QG]2nQXTIA'kBYhX-S\AUt)M]_FOO"m(YL%32Z.P!j=ZCl+e36dHpB<k5m$@Ft[mhH8T!',Fed2EM8f^&L2fA^'`2K*^ABqcj[G\hEFA=j/;Y$B&R]D%2(WmgK1T*+KcTr'4>DL%'.mL"L\4m4$S'n,Ws?4HCK3F_c&rec"&f2V0*uuU8>I3q;menj-&C9XR?Zq3PNH'V;&$B'm]NHL_]?T#"KQcFR307jRM=:2?"H/M%-lsF2=gVkG%ah\k\XaqrdFc]kUDUt9ijkc9*u-sthW4&q*`FPn^-G0VT[GLb6tQ4G<9?X9.'j\+huQU8cR28Ics#;p+$dDs!OZ_j%>;>hIQ;dU()0&N7/aZNF+jFK-b)9#Zdd5qGYgf6^Gdc?[3QTefPe+V!V8%mkU<2;Ri8=g?(r^P'(W<;%qJ^s5lnXtGH!uN#"lM&g%%bRoi"Y4+RY85,4^r]8c-K@U=d:o<9M+M"U:T=0e/lNWPX>9Jt&a'=rpiB2NnOAAqBm&s$#*GRcE\$Nlf5X0d)Zt!J/C6QN0f8Mj%#d=KCG<?fRBITeo3#,!?-\ONjT0=7I5rKP#GJOPRMZE/RB4QF6b6")T[OF=%0c!*%GY6Sb#M`;EUFq0,mo:5F:lCoo.:7^9g(Qj?%="=^Riu22lkX<2JE'd;Y%U*&mpCABH,!m=rVm<_a>OJBtY#\S<bA,O<\T08l4UV%ri("Vs\_Ee^cS#(MAa-4J8fnY9fSXB_.MG9\%5i!MXNd+%]L(FG<qnKB?`T_^^@dqEP,iib-Qr2L$.+1s-hn/ub8O=YZi(j_?7Bd.j4faR]6I0UiMEf:`+_j"6eQmUO%^(#*&KCg@%J@^tl58#Xt!jaJ:1>q-#K7>1qjrBJrYG"m[Y3UEm<ELYGYB7:4!+?gsp,:Ps;*-S&;T<p5-7WiC_a1/M>/8gL)!P!s_m>D>Wi-3W%]E/^5qbT(l=PV=A_BVm0<jVXkg4:X2VT`L<r<uL4<Zetc\QtrRD75eVV4,X[*np\,%#Etp?j(1co5=%3/gmU7"[@"MQ@b9DO2;&,%a^2)FKM+dgQ]"G.OD_\Q?H`7>SFN:YMSm-_<L,8EoY?nl9[t09_Bc>tl/E:&@P#ANBMp6]pAL!@,#9IfkV?NB#1SF]*17*U_rt^$%/4#cY6%WbV!`aTG-YW-"81@`%.$6&:I4[>l(DmhW]k!+cC3J.Xg=:"0HkpC]T^r%.O]6IjW&ugdaVYaiE+7u%VknY$T."2Y3be!#%%V>*8OfbPd@>]ttBYU4`]L1_*29tC0$J4T@+'pd9`erqJ9Z)CXr`R(qDl^c-GXDLdJ-SWJ>X-kYJ*m*_\(Bh8YD++Ve%'dRRljt.%@#YEdqk8I(T;8OM2^$3ILB:;VB;7L;6#].8<`@M*0#c5>"T=&7A,YEq_u95iQ&)V6:IK\.Ja#J6kXpeB2]Urg$055h\B"^@m+<5q%j7[N"(VY%lk1_gQ^@$cnVnGE.aV)l*0U^n+T\;Q&BLT40H4!K@p:=)'=on&/B+oUMC\P$H@m[BQq=*XK%o=u`.-cKN0R@-p4eUBn%eemA#QO-f8<R/$;bqG%gK_Osj<kdORg,56^qFO3*iW0BsRG*>nlL"1le[2Rq'2P`!hE)6]MI5\-W<1>/gf8rphlo)u0<2-/)MLL?%5nt"2%TaY-@Dg]c,X!H>O'54*nO;Lf:e)P;^\@f52=$3F7\5E1^"4ed_2jkUqb&,j;NqOrq?ZDH'ugjG5Lmf-(]L(a,odtgM[FmU%+-#P7ZZZr80A[`Hg'-`%*ghutMIS<k$p`c0q]_@PHrb#LlH@1Cr*3)HLW8C."U8lg6sXt("T6dTJ6cVF&h4Fql`>Y9$+6J#.7FAM%AO-Ys+8jf*4Z,bNe!WrCE,6j8Xd2'Z,D\jiH,hpmeVGC(c=/Xmd`%2A>-qn.n=dqU@gt806Q,_o<X6-7AN$kANL=X^i[H6KYMKGP%=nQj4>#?pK-Paj/4"[^TFY(UWZO1Ij*C.#:?sq4l[0X!>BOE."i;NGLQIpd%UP+e!l^&re<(-+-]4bd.ZiO<(HAH<@Q6L'&=DX0b%mO"U+o)o6&EGW^67c"fiECs:g4IBQ$aongf;"'^+(Ql9%l%?Fn8]40.L?`JR-(_Ls:'d,D,fo]]3u]dNTSptp`t=T0j+0b)V#ICM%.O<cHrp]C:`sb@]V'tB20;/a7\:7<ukutaJJ@DjTg]3I.B6e&d2bl!?Qr:3AZ?8geeVQa$[;^7bLsN&sLrD6WMOfAk#UVEa](F4g%Za37\'$=NIW5Gf1Wes8GKBYaROq@a;W=c]nah!?3nqLUQ,`[lJBT&-iDRJ\APEkmA?$TF94[O5BLF.ceKq[l+VppsnB<dU4:%UPB%-FRGa&[TGpr])g_iC:.7I@XpWTC\:kW-,9^9..`[%r*HpK@;?dbDgL3Jl=uV1]TaJLMnU6.Uq]H1GA!CL)""4;`dBZe?DRT$:OSp%\!LtL-jlpGmLfFp<Oe@g7*\U^5JaFT$j2F>EY!"!8HgeRNM7dTC4S9fKT.Q>'amj#&ibF&(\KTVj^Y*^2B>h0nio&d=f<g-))"TJ%FM4$@D_SI\Z#^oY4:oP5jdfiZ";C6amuu=EUs\dr;pf0aQl[ckQ$+8uSj_%]h;KjKH[FcHAi&QdOke!rW60/g0#2r[/"<OKY->Vs%UO]pAX@\GSCW>FU(#'7C]ph,6ncR@I(rD(5'haD!,sck&@eg_O#2+[/)Fp)PO@c5#kbZ,$.<CLF8/473YUo?C5*R2EAECR#o*Toh%Y#Sim45+h6"N<jZSp<Uso-^JL@t2a!d'Jr0%\;YQ$TJD7gI8=i9D10`O2\K@P.MjE7F^n99WZ7\W5PSd"W9Hs<M5fCd\HdC.o7I'%`6(@8APbXkjqITWRU"Fq1V=ap3d)O*(q#0_lYY:X$Gf-E\#A?SoU,4SAWM_WTm)cgD]I)A-84.]?Fo:kBob0O(^+C$2O\47FQ89;%hB0K%&ZkuQ!V@_tqRb6Vr6j2//8pVHQcs1ZfETtp/X_rNTX!0+8[.ml$1j#CX.#Z]$lUO]BW_n06A4uj5<qrM#F(i7q]tN9:P--&%Z;i@-#uHOEZUh1G=0Z9V8.-pE''QO?[sC'@kZ)>^?s'\km&9oR=<cNm?k))S`JU=pn-0<\3(Ed*@'Gke$aR<ACC8)8Z<'9tnF)0T%Z0-<\_QLrpUZIep+^)S\LRG/snQeim^^=+2Jqn.bhcJlKXnDrdA3_]5Huo<&?:]Kq'>0mXr6VK=N$=(:Y)K6H(<5eEba),GC.`M8%Z"F&PaDqte[?jdZFK-+jA-Iuq;Nt#O1(?s=mK(.:,,bDC;pu\HJJ,:[V!QacqSc0g!Z!TDiONTP/D?bkP2mR@H=m&$a[5cc-*_gr%Ik4$K@.Dl/<]2=P:KGR^(F?qG";h<PG&S@7nTjZ=#G#K%b92MBG4Ia($fW-URVOh]8:b,@-pLhpCD4\bBSS>[Xm"_!j]AJ(,_&i6%2m4C*`;7m;hH=C]1'DH1VP3RDaihCH;FuHJ^SO4DkX1XB"W7r>`6(FbX1>;4KS6[FM)B4+:lMCILXrH<"\CAq+-gf;\DR3md4hi?%f_ZKl:3,<eURTiMQY8d9#(L<B[626RQ`S[^<'C>>o@BA`#oG2jM2/=W1B@Ifs7/R^C,m%e'p.`s<%j1=I-0GATmln;immZ4`aWo>%;q:Js]L:.B9!YKR5sSHa#Oen(G!QB9=7Rq5m@6_M[m,VJ!)+'HO")E.T<r!e[nCb^3^1!7j#8p\A(r*s)*FDQgUZb`R&c!,Y?mkV%M"Q2UP*6E<oOt^J53B0PXcjn(?*SqIa:P'*98G7A?/kWJKgZ[>mL7Wh#W^f1YMLmFs6'LKd#O1?n=NMJm0i]#.bVILCjpGKrB$TS%pu-/jlo3gMpNOCKRrA;tYC?<5DdL*_4FI"iV]UBY7mF37r5l/BqWSg2qsHCMIJ)PH5P^ATpuQ`"jYssLeb@u"k//j%qhtLQh8`n#%qU^5opV6M#n,@5'cc9Dlk.BOMrSRV:]8s`*++O.u5ZS\:rf`uPae/Ou_uBb@d4",~>%AI9_PrivateDataEnd