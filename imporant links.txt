https://www.fullstackfirebase.com/cloud-messaging/notes 




/////////////////
lets encrypr sub domain

sudo certbot --nginx -d sub.domain.com


//////
 


ssl configuration 


Introduction
Let’s Encrypt is a Certificate Authority (CA) that provides an easy way to obtain and install free TLS/SSL certificates, thereby enabling encrypted HTTPS on web servers. It simplifies the process by providing a software client, Certbot, that attempts to automate most (if not all) of the required steps. Currently, the entire process of obtaining and installing a certificate is fully automated on both Apache and Nginx.

In this tutorial, you will use Certbot to obtain a free SSL certificate for Nginx on Ubuntu 18.04 and set up your certificate to renew automatically.

This tutorial will use a separate Nginx server block file instead of the default file. We recommend creating new Nginx server block files for each domain because it helps to avoid common mistakes and maintains the default files as a fallback configuration.

Prerequisites
To follow this tutorial, you will need:

One Ubuntu 18.04 server set up by following this initial server setup for Ubuntu 18.04 tutorial, including a sudo non-root user and a firewall.
A fully registered domain name. This tutorial will use example.com throughout. You can purchase a domain name on Namecheap, get one for free on Freenom, or use the domain registrar of your choice.
Both of the following DNS records set up for your server. You can follow this introduction to DigitalOcean DNS for details on how to add them.

An A record with example.com pointing to your server’s public IP address.
An A record with www.example.com pointing to your server’s public IP address.
Nginx installed by following How To Install Nginx on Ubuntu 18.04. Be sure that you have a server block for your domain. This tutorial will use /etc/nginx/sites-available/example.com as an example.
Step 1 — Installing Certbot
The first step to using Let’s Encrypt to obtain an SSL certificate is to install the Certbot software on your server.

Certbot is in very active development, so the Certbot packages provided by Ubuntu tend to be outdated. However, the Certbot developers maintain a Ubuntu software repository with up-to-date versions, so we’ll use that repository instead.

First, add the repository:

sudo add-apt-repository ppa:certbot/certbot
You’ll need to press ENTER to accept.

Install Certbot’s Nginx package with apt:

sudo apt install python-certbot-nginx
Certbot is now ready to use, but in order for it to configure SSL for Nginx, we need to verify some of Nginx’s configuration.

Step 2 — Confirming Nginx’s Configuration
Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for.

If you followed the server block set up step in the Nginx installation tutorial, you should have a server block for your domain at /etc/nginx/sites-available/example.com with the server_name directive already set appropriately.

To check, open the server block file for your domain using nano or your favorite text editor:

sudo nano /etc/nginx/sites-available/example.com
Find the existing server_name line. It should look like this:

/etc/nginx/sites-available/example.com
...
server_name example.com www.example.com;
...
If it does, exit your editor and move on to the next step.

If it doesn’t, update it to match. Then save the file, quit your editor, and verify the syntax of your configuration edits:

sudo nginx -t
If you get an error, reopen the server block file and check for any typos or missing characters. Once your configuration file’s syntax is correct, reload Nginx to load the new configuration:

sudo systemctl reload nginx
Certbot can now find the correct server block and update it.

Next, let’s update the firewall to allow HTTPS traffic.

Step 3 — Allowing HTTPS Through the Firewall
If you have the ufw firewall enabled, as recommended by the prerequisite guides, you’ll need to adjust the settings to allow for HTTPS traffic. Luckily, Nginx registers a few profiles with ufw upon installation.

You can see the current setting by typing:

sudo ufw status
It will probably look like this, meaning that only HTTP traffic is allowed to the web server:

Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere                  
Nginx HTTP                 ALLOW       Anywhere                  
OpenSSH (v6)               ALLOW       Anywhere (v6)             
Nginx HTTP (v6)            ALLOW       Anywhere (v6)
To additionally let in HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance:

sudo ufw allow 'Nginx Full'
sudo ufw delete allow 'Nginx HTTP'
Your status should now look like this:

sudo ufw status
Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
Nginx Full                 ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
Nginx Full (v6)            ALLOW       Anywhere (v6)
Next, let’s run Certbot and fetch our certificates.

Step 4 — Obtaining an SSL Certificate
Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following:

sudo certbot --nginx -d example.com -d www.example.com
This runs certbot with the --nginx plugin, using -d to specify the names we’d like the certificate to be valid for.

If this is your first time running certbot, you will be prompted to enter an email address and agree to the terms of service. After doing so, certbot will communicate with the Let’s Encrypt server, then run a challenge to verify that you control the domain you’re requesting a certificate for.

If that’s successful, certbot will ask how you’d like to configure your HTTPS settings.

Output
Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
-------------------------------------------------------------------------------
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
-------------------------------------------------------------------------------
Select the appropriate number [1-2] then [enter] (press 'c' to cancel):
Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:

Output
IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/example.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/example.com/privkey.pem
   Your cert will expire on 2018-07-23. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

Your certificates are downloaded, installed, and loaded. Try reloading your website using https:// and notice your browser’s security indicator. It should indicate that the site is properly secured, usually with a green lock icon. If you test your server using the SSL Labs Server Test, it will get an A grade.

Let’s finish by testing the renewal process.

Step 5 — Verifying Certbot Auto-Renewal
Let’s Encrypt’s certificates are only valid for ninety days. This is to encourage users to automate their certificate renewal process. The certbot package we installed takes care of this for us by adding a renew script to /etc/cron.d. This script runs twice a day and will automatically renew any certificate that’s within thirty days of expiration.

To test the renewal process, you can do a dry run with certbot:

sudo certbot renew --dry-run
If you see no errors, you’re all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let’s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.

Conclusion
In this tutorial, you installed the Let’s Encrypt client certbot, downloaded SSL certificates for your domain, configured Nginx to use these certificates, and set up automatic certificate renewal. If you have further questions about using Certbot, their documentation is a good place to start.
//////////////////////////////////////


google search from 


    window.open('https://www.google.com/?#q='+this.leadCreationForm.value.storeName)

//////////////////////////////////



nginx configuration for sockets

location /socket.io/ {
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_pass http://127.0.0.1:3000;
}
////////////////////



http://raksonibs.github.io/blog/34/
///////////////////
http://walidhosseini.com/journal/2014/10/18/passport-local-strategy-auth.html
//////////
sudo sysctl fs.inotify.max_user_watches=524288
sudo sysctl -p --system
///////////


://users.wix.com/signin?originUrl=https:%2F%2Fwww.wix.com%2Fmystunningwebsites%2Fpickyourtemplate%3Futm_medium%3Dpaid_referral%26utm_source%3Daffiliate&overrideLocale=en&postLogin=https:%2F%2Fwww.wix.com%2Fmy-account&postSignUp=http:%2F%2Fwww.wix.com%2Fnew%2Faccount&sendEmail=true&view=showLogin
/////////////////////
https://dzone.com/articles/understanding-output-and-eventemitter-in-angular


///////////////////
http://l-lin.github.io/angular-datatables/#/getting-started
/////////////////////

https://medium.com/@doyinolarewaju/firing-global-events-in-angular-2-4-af3c8ac874ec
////////////////////////////
yo node-express-mongo:endpoint message
command for creating another api
///////////////////////////
https://blog.realworldfullstack.io/real-world-angular-part-7-lazy-coding-load-splitting-4552f5f54ef7
///////////////////////////////
https://github.com/mazdik/ng-crud-table
///////////////////
https://cassandra.apache.org/download/
//////////////////////////////

https://www.toptal.com/designers/htmlarrows/symbols/check-mark/
//////////////////////
https://github.com/kolkov/angular-editor
////////////////////
var oldData = JSON.parse(JSON.stringify(userInfo));
//////////////////////////////
https://codecanyon.net/item/job-portal-mobile-application-with-web-portal/20872795
/////////////////////////////////////////////////
https://hassantariqblog.wordpress.com/2017/03/22/angular2-custom-toaster-notification-service-using-angular2-material-snackbar-component/
/////////////////////////////////////////////
https://mattlewis92.github.io/angular-calendar/#/kitchen-sink
https://github.com/Jamaks/ng-fullcalendar-demo
/////////////////////
https://developers.google.com/calendar/quickstart/






js
//////////////////////
https://medium.freecodecamp.org/48-answers-on-stack-overflow-to-the-most-popular-angular-questions-52f9eb430ab0
/////////////////////////
sudo apt-get update  <------ If need
sudo apt-get install git
next clone the repository in your destination file location
git clone https://github.com/cognitiveinnovations/docIntact.git
////////////////////////////////////
npm install --global yo  <-------------Install yo globally
npm i generator-node-express-mongo  <----------
yo node-express-mongo docintact  <-------------Go to project file and create backend folder, next open the terminal and run this command.
///////////////////////////////
https://malcoded.com/posts/angular-file-explorer-component
//////////////////////////////////

https://ej2.syncfusion.com/angular/demos/?_ga=2.161378045.1342471144.1549362659-1621171274.1549362659#/material/document-editor/default
//////////////////////////
https://www.syncfusion.com/angular-ui-components/file-upload

/////////////////////////
https://github.com/georgipeltekov/ngx-file-drop#readme
////////////////
ng serve --disable-host-check
////////////////////////////
https://stackblitz.com/edit/owl-datetimepicker?file=src%2Fapp%2Fbasic%2Fbasic.component.html
////////////////////////
https://medium.com/@erbalvindersingh/convert-a-base64-url-to-image-file-in-angular-4-5796a19fdc21
////////////////////////
http://www.codeblocq.com/2016/04/Convert-a-base64-string-to-a-file-in-Node/
////////////////////////////
https://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata/5100158
///////////////////////////
https://stackblitz.com/edit/angular-owl-dateformat?file=src%2Fapp%2Fdate-filter.pipe.ts
////////////////////
https://danielykpan.github.io/date-time-picker/#locale-formats
///////////////
https://stackoverflow.com/questions/880512/prevent-text-selection-after-double-click
/////////////////
https://github.com/Hopding/pdf-lib/issues/10
///////////////
https://github.com/szimek/signature_pad/issues/318
////////////////////
validate(password) {
    this.passwordMinLength = false;
    this.passwordupper = false;
    this.passwordLower = false;
    this.passwordNumber = false;
    this.passwordSpecial = false;
    var minMaxLength = /^[\s\S]{8,32}$/,
      upper = /[A-Z]/,
      lower = /[a-z]/,
      number = /[0-9]/,
      special = /[ !"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~]/;

    if (minMaxLength.test(password)) {
      this.passwordMinLength = true;
    }
    if (upper.test(password)) {
      this.passwordupper = true;
    }
    if (lower.test(password) && password != undefined) {
      this.passwordLower = true;
    }
    if (number.test(password)) {
      this.passwordNumber = true;
    }
    if (special.test(password)) {
      this.passwordSpecial = true;
    }
  }
===============================
pattern='(?=.[a-z])(?=.[A-Z])(?=.[0-9])(?=.[$@.#!%?&])[A-Za-z\d$@.#!%?&]{8,14}'
///////////////////////////
https://www.npmjs.com/package/image-size
///////////////////////////

https://stackoverflow.com/questions/37256745/object-fit-get-resulting-dimensions#
/////////////////////
https://www.impressivewebs.com/avoiding-problems-with-javascript-getelementbyid-method-in-internet-explorer-7/

/////////////////////


http://jsfiddle.net/taditdash/Hz4U9/

////////////////////
https://www.mkssoftware.com/docs/man5/regexp.5.asp
///////////////////////////


https://confluence.atlassian.com/bitbucket/configure-your-dvcs-username-for-commits-950301867.html
//////////////////////


https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/

/////////////////////////////


https://stackoverflow.com/questions/54780477/in-ie-11-angular-5-cache-issue

////////////////////////////////

https://www.npmjs.com/package/file-type

///////////////////////////////////////

https://stackoverflow.com/questions/18310635/scaling-socket-io-to-multiple-node-js-processes-using-cluster
/////////////////////////////////////////


https://socket.io/docs/using-multiple-nodes/
https://github.com/ykit9/node-express-sticky-cluster-example


//////////////////////////////////////

https://blog.imaginea.com/7597-2/
///////////////////////



https://github.com/ANURAGVASI/socket.io-multiserver-chatApp


//////////////////////


https://www.mcieslar.com/adding-socket-io-to-multithreaded-node
////////////////


https://tecadmin.net/install-redis-ubuntu/


/////////////////



https://stackoverflow.com/questions/36454461/sticky-session-vs-socket-io-sticky-session-node-js-library-which-is-better


///////////////////////////


https://github.com/elad/node-cluster-socket.io




/////////////////////////////////


sudo apt-get install curl python-software-properties
sudo apt-get install nodejs

//////////////////


https://pdfclown.files.wordpress.com/2015/02/userguide.pdf


////////////////////////


https://github.com/Hopding/pdf-lib/issues/172


/////////////////////////


https://stackoverflow.com/questions/42135058/set-minimum-step-size-in-chart-js

////////////////


https://stackoverflow.com/questions/12906694/fs-createwritestream-does-not-immediately-create-file

//////////////////////

https://www.sitepoint.com/how-to-build-a-web-app-with-graphql-and-react/



////////////////////////

https://stackoverflow.com/questions/38702471/specify-pdf-page-size-using-pdfkit-in-node-js

/////////////////////


https://help.github.com/en/github/creating-cloning-and-archiving-repositories/duplicating-a-repository
//////////////////////

https://stackoverflow.com/questions/2993902/how-do-i-check-the-date-and-time-of-the-latest-git-pull-that-was-executed


///////////////////////


https://medium.com/@jadejayashraj/node-js-cluster-with-mqtt-socket-io-redis-and-sticky-sessions-d5be72ef65f0


/////////////////
https://stackoverflow.com/questions/46941346/how-to-know-the-git-username-and-email-saved-during-configuration


///////////////////


node --max_old_space_size=8192 node_modules/@angular/cli/bin/ng build --prod



///////////////////


pm2 start app.js -i 0

pm2 stop all
pm2 delete all 
pm2 monit 
pm2 log
/////////
pm2 start app.js --name "my-node-app" -i 2 // to create 2 process

pm2 stop my-node-app
pm2 delete my-node-app
pm2 start app.js --name "my-node-app" -i 2 // t


//   on same router url
  imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})] })   1st way
//   on same router url  2nd way
constructor(private router: Router) {
    // override the route reuse strategy
    this.router.routeReuseStrategy.shouldReuseRoute = function() {
        return false;
    };
}   

//   on same router url  2nd way

constructor(route:ActivatedRoute) {
  route.params.subscribe(val => {
    // put the code from `ngOnInit` here
  });
}


//  changethe router position when router changes 
 RouterModule.forRoot(routes, {scrollPositionRestoration: 'enabled'})
 ///
import { Component, OnInit } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';

@Component({
    selector: 'my-app',
    template: '<ng-content></ng-content>',
})
export class MyAppComponent implements OnInit {
    constructor(private router: Router) { }

    ngOnInit() {
        this.router.events.subscribe((evt) => {
            if (!(evt instanceof NavigationEnd)) {
                return;
            }
            window.scrollTo(0, 0)
        });
    }
}

///////////////////////////////
encrtpy object 
https://www.npmjs.com/package/simple-crypto-js
////////////////////////



encrpty data from nodejs to base64 to exclude  \, +, =
//////////////////////////////
function encrypturl(key, data) {
  var cipher = crypto.createCipher('aes-128-cbc', key);
  var crypted = cipher.update(data, 'utf-8', 'base64');
  crypted += cipher.final('base64');
  console.log(crypted)
  return crypted.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, 'cFcFc');
}

function decrypturl(key, data) {
  if(data!=undefined){
    var decode= data.replace('-', '+' ).replace('_', '/').replace('cFcFc', '=') ; 

  var decipher = crypto.createDecipher('aes-128-cbc', key);
  var decrypted = decipher.update(decode, 'base64', 'utf-8');
  decrypted += decipher.final('utf-8');
  return decrypted;
  }
  else return false;
 
}



//////////////////////////////////////////


  <video #videoPlayer [src]="src" id="video-player" width="640" height="480" controls autoplay='fasle' preload="none" controlsList="nodownload">
    <source id="video-key">
    Video player is not supported by your browser.
  </video> 


///////////////////////////////////////////




var ages = [32, 33, 18, 40];

function checkAdult(age) {
  return age >= 18;
}

function myFunction() {
  document.getElementById("demo").innerHTML = ages.every(checkAdult);
}
/////////////////////



var myArr = Array.from("ABCDEFG");



Create an Array from a String:

A,B,C,D,E,F,G


/////////////////////

throw alert when click on refresh button in angular 6


  @HostListener("window:beforeunload", ["$event"]) unloadHandler(event: Event) {
      console.log("Processing beforeunload...");
      // Do more processing...
      event.returnValue = true;

}
//////////////////////////////

Get Private Ip

 private determineLocalIp() {
    window.RTCPeerConnection = this.getRTCPeerConnection();

    const pc = new RTCPeerConnection({ iceServers: [] });
    pc.createDataChannel('');
    pc.createOffer().then(pc.setLocalDescription.bind(pc));

    pc.onicecandidate = (ice) => {
      this.zone.run(() => {
        if (!ice || !ice.candidate || !ice.candidate.candidate) {
          return;
        }

        this.localIp = this.ipRegex.exec(ice.candidate.candidate)[1];
        const encryptdip = this.userService.encryptData(this.localIp);
        localStorage.setItem('ipaddress', encryptdip);

      });
    };
    const ipdata = localStorage.getItem('ipaddress');
    if (!this.IpAddress && !this.ip) {
      this.IpAddress = this.userService.decryptData(ipdata);
    }
  }
/////////////////////////////////

disable backdrop while open models 
either escape and outer click


data-backdrop="static" data-keyboard="false" 

////////////////////////////////////////


In FireFox and Internet Explorer you can listen for the after print event.




<body onafterprint="myFunction()">
window.onafterprint = function(){
   console.log("Printing completed...");
}






(function() {

    var beforePrint = function() {
        console.log('Functionality to run before printing.');
    };

    var afterPrint = function() {
        console.log('Functionality to run after printing');
    };

    if (window.matchMedia) {
        var mediaQueryList = window.matchMedia('print');
        mediaQueryList.addListener(function(mql) {
            if (mql.matches) {
                beforePrint();
            } else {
                afterPrint();
            }
        });
    }

    window.onbeforeprint = beforePrint;
    window.onafterprint = afterPrint;

}());

/////////////////

https://codesandbox.io/s/j0jyz323v
/////////////////
///
enable https in localhost 



First, let’s describe how the certificate is generated. The identity information for the certificate is described in a separate file, certificate.cnf. This allows me to specify the ‘Subject Alternative Names’ parameter for my certificate. This is important because Chrome 58 and later will only check this field for matching the domain name to the certificate, not the common name as was previously used. The certificate.cnf file contents are as follows:

<!---->
[req]
default_bits = 2048
prompt = no
default_md = sha256
x509_extensions = v3_req
distinguished_name = dn
[dn]
C = GB
ST = London
L = London
O = My Organisation
OU = My Organisational Unit
emailAddress = email@domain.com
CN = localhost
[v3_req]
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
<!----->

generate public and private key 

openssl req -new -x509 -newkey rsa:2048 -sha256 -nodes -keyout localhost.key -days 3560 -out localhost.crt -config certificate.cnf

then generated files in paste in  angular project / src


execute these command
ng serve --ssl --ssl-key ./src/localhost.key  --ssl-cert      ./src/localhost.crt"


////////////////
enable https in nodejs local server 
genarate self certificate in nodejs 
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./selfsigned.key -out selfsigned.crt


const express = require('express');
const https = require('https');
const fs = require('fs');
const port = 3000;

var key = fs.readFileSync(__dirname + '/../certs/selfsigned.key');
var cert = fs.readFileSync(__dirname + '/../certs/selfsigned.crt');
var options = {
  key: key,
  cert: cert
};

app = express()
app.get('/', (req, res) => {
   res.send('Now using https..');
});

var server = https.createServer(options, app);

server.listen(port, () => {
  console.log("server starting on port : " + port)
});


////////////////////////////
go to specific history  
location.history.go(1);
 location.history.go(url);
//////////////


cache utilization in nodejs

const redisClient = require('redis').createClient();


    redisClient.get('documents', (err, cacheusers) => {
        if (cacheusers) {
            console.log("{{{{{{{{{{{")
            res.send(cacheusers);
        }
        else{
            console.log("2052222222222222222")
            Document.find({}).exe(function (err, documents) {

                redisClient.set('documents', JSON.stringify(documents))
                return res.status(200).json(documents);

            });
        }
    })

////////////////////////////

check heapsize


const v8 = require('v8');
const totalHeapSize = v8.getHeapStatistics().total_available_size;
let totalHeapSizaInMB = (totalHeapSize / 1024 / 1024).toFixed(2)

console.log("V8 Total Heap Size", totalHeapSizaInMB, "MB");
//////////////////


/////////////////


install mongo compass in ubantu 


1 . sudo apt-get update

2. wget https://downloads.mongodb.com/compass/mongodb-compass_1.15.1_amd64.deb
3. sudo dpkg -i mongodb-compass_1.15.1_amd64.deb


////////////////////////////
use node core modules in angular 



To use crypto NodeJS library with Typescript (Angular >= 2 for example) follow these steps:

npm install @types/node --save-dev to install NodeJS definitions
In tsconfig.ts file add the following:

"files": [
  "./node_modules/@types/node/index.d.ts"
]

Import the library where you want to use it with import * as crypto from 'crypto';
/////////////////////////

end point creation 





yo node-express-mongo:endpoint message

//////////////////////

communicate from dialog to component  before closing
// calling component

const sub = newFolder.componentInstance.onAdd.subscribe(()=>{
      console.log("clicked");
      
    })

// dialog component
onAdd=new EventEmitter()




onclickemit(){
      this.onAdd.emit()

}




/////////////////////////////////////////

push data to stating of array

array.unshift("venki")


///////////////

angulr ng switch



<input type="hidden" #selection>

  <div class="card-container">
    <div class="card card-small" (click)="selection.value = 'component'" tabindex="0">
        <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>New Component</span>
    </div>

    <div class="card card-small" (click)="selection.value = 'material'" tabindex="0">
        <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>Angular Material</span>
    </div>

    <div class="card card-small" (click)="selection.value = 'pwa'" tabindex="0">
        <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>Add PWA Support</span>
    </div>

    <div class="card card-small" (click)="selection.value = 'dependency'" tabindex="0">
      <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>Add Dependency</span>
    </div>

    <div class="card card-small" (click)="selection.value = 'test'" tabindex="0">
      <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>Run and Watch Tests</span>
    </div>

    <div class="card card-small" (click)="selection.value = 'build'" tabindex="0">
      <svg class="material-icons" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>

      <span>Build for Production</span>
    </div>
  </div>

  <!-- Terminal -->
  <div class="terminal" [ngSwitch]="selection.value">
      <pre *ngSwitchDefault>ng generate component xyz</pre>
      <pre *ngSwitchCase="'material'">ng add @angular/material</pre>
      <pre *ngSwitchCase="'pwa'">ng add @angular/pwa</pre>
      <pre *ngSwitchCase="'dependency'">ng add _____</pre>
      <pre *ngSwitchCase="'test'">ng test</pre>
      <pre *ngSwitchCase="'build'">ng build --prod</pre>
  </div>

////////////////

custom search nested object 


function filterIt(arr, searchKey) {
  return arr.filter(obj => Object.keys(obj).some(key => obj[key].includes(searchKey)));
}

///////////////




Order.find({ "articles.quantity": { "$gte": 5 } })
    .select({ "articles.$": 1 })
    .populate({
        "path": "articles.article",
        "match": { "price": { "$lte": 500 } }
    }).exec(function(err,orders) {
       // populated and filtered twice
    }
)



////////

whichView: string;
constructor(private router: Router) {
  if (this.router.url.endsWith('physician/create')) {
    this.whichView = 'create';
  } else if (this.router.url.endsWith('physician/edit')) {
    this.whichView = 'edit'
  } else {
    this.whichView = 'view'
  }
}
In view:

<container-element [ngSwitch]="whichView">
  <some-element *ngSwitchCase="create">...</some-element>
  <some-element *ngSwitchCase="edit">...</some-element>
  <some-other-element *ngSwitchCase="update">...</some-other-element>
  <some-element *ngSwitchDefault>...</some-element>
</container-element>
/////////////))))))



  // Encrypt data with secret key
  encryptData(plainText) {
    var ciphertext = CryptoJS.AES.encrypt(plainText, this.frontendconfig.getSecretKey()).toString();
    return ciphertext.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, 'cFcFc'); 
  }

  
  // Decrypt data
  decryptData(cipherText) {
    var decode =cipherText.replace(/-/g, '+').replace(/_/g, '/').replace('cFcFc', '=');
    const bytes = CryptoJS.AES.decrypt(decode, this.frontendconfig.getSecretKey());
    if (bytes) {
      try {
        const str = bytes.toString(CryptoJS.enc.Utf8);
        if (str.length > 0) {
          return str;
        } else {
          return 'error';
        } 
      } catch (e) {        
        console.log(e);
        
        return  'error'
      }
    }
    return 'error';
  }


/////////////

ngb curosal in ngfor



<div [textContent]="dataEvent"></div>
<a [routerLink]="['/new-page']">go to new page</a>
<div *ngFor="let urls of url;let k = index">
<ngb-carousel *ngIf="images" (slide)="onSlide($event)" [activeId]="urls.currentslide" [interval]="false">
	<ng-template *ngFor="let image of images; let i = index" ngbSlide [id]="'slideId_'+k+'_'+ i">
		<img [src]="image" alt="Random slide" style="height:200px;width:200px">
  </ng-template>
</ngb-carousel>
<div *ngFor="let image of images; let j = index">
	<img [src]="image" alt="Random slide" style="height:50px;width:50px" (click)="testt(k,j,urls)">
</div>
</div>








import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-home-page',
  templateUrl: './home-page.component.html'
})
export class HomePageComponent {
test="slideId_"+2
  images = [1, 2, 3].map(() => `https://picsum.photos/900/500?random&t=${Math.random()}`);
constructor(){
  this.url.forEach((element,index)=>{
    element['currentslide']="slideId_"+index+'_0'
  })
}
  dataEvent: string;
url=[{name:"hi"},{name:'hello'},{name:'bye'}]
  onSlide(event) {
    this.dataEvent = JSON.stringify(event);
    console.log(event);
    const imageIndex = parseInt(event.current.replace("slideId_", ""), 10);
    console.log("image index", imageIndex);
  }
  testt(k,j,urls){
urls.currentslide="slideId_"+k+'_'+j;
  }
}
////////////

function getCoords() {
  return new Promise((resolve, reject) =>
    navigator.permissions ?

      // Permission API is implemented
      navigator.permissions.query({
        name: 'geolocation'
      }).then(permission =>
        // is geolocation granted?
        permission.state === "granted"
          ? navigator.geolocation.getCurrentPosition(pos => resolve(pos.coords)) 
          : resolve(null)
      ) :

    // Permission API was not implemented
    reject(new Error("Permission API is not supported"))
  )
}

getCoords().then(coords => console.log(coords))
//////////////////////////////////



 if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(position => {
        this.latitude = position.coords.latitude;
        this.longitude = position.coords.longitude;
        console.log( this.longitude, this.latitude)
      }, error => {
        this.userService.openSnackBar('Your Location is Blocked, please Allow for security reasons', 'X');
        this.latitude = undefined;
        this.longitude = undefined;
      });
    }

////////////////////
              *ngFor="let index of leadsData|filter: searchOption|paginate :{ itemsPerPage: 5,currentPage: p}; let index = index">

////


mongodb-stitch-browser-sdk
/////////////

get file type

var exec =require('child_process').exec;
var path='http://localhost:9000/uploads/small.webm'
var test='file -b --mime-type'
exec(test+path,function(error,stdout,stderr){
    console.log(stdout)
    console.log(error)

})
//////////////////


git remote -v

git remote set-url origin https://username@github.com/MyRepo/project.git
///////////


onfocus="if (this.hasAttribute('readonly')) { this.removeAttribute('readonly');	this.blur();this.focus();}" readonly



///////////
    <input type="text" class="form-control" (keydown.enter)="$event.preventDefault()" placeholder="Search Nearest Location" autocorrect="off" autocapitalize="off" spellcheck="off" type="text" #search>
 //////
 display map with routes
 init(){
    var directionsService = new google.maps.DirectionsService();
var locations = [
  ['Manly Beach', -33.80010128657071, 151.28747820854187, 2],
  ['Bondi Beach', -33.890542, 151.274856, 4],
  ['Coogee Beach', -33.923036, 151.259052, 5],
  ['Maroubra Beach', -33.950198, 151.259302, 1],
  ['Cronulla Beach', -34.028249, 151.157507, 3]
];
     var directionsDisplay = new google.maps.DirectionsRenderer();

    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 10,
      center: new google.maps.LatLng(-33.92, 151.25),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    console.log(map);
    
    directionsDisplay.setMap(map);
    directionsDisplay.setPanel(document.getElementById('directions-panel'));
    var infowindow = new google.maps.InfoWindow();
    var marker, i;
    var request :any= {
      travelMode: google.maps.TravelMode.DRIVING
    };
    for (i = 0; i < locations.length; i++) {
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(locations[i][1], locations[i][2]),
      });
  
      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent(locations[i][0]);
          infowindow.open(map, marker);
        }
      })(marker, i));
  
      if (i == 0) request.origin = marker.getPosition();
      else if (i == locations.length - 1) request.destination = marker.getPosition();
      else {
        if (!request.waypoints) request.waypoints = [];
        request.waypoints.push({
          location: marker.getPosition(),
          stopover: true
        });
      }
  
    }
    directionsService.route(request, function(result, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        console.log(result);
        
        directionsDisplay.setDirections(result);
      }
    });
  }

html:<div id="map"></div>
    <div id="directions-panel"></div>

css:
#map {
  height: 100%;
  width: 100%;
  margin: 0px;
  padding: 0px
}
#directions-panel {
  width: 100%;
  height: 600px;
  position: relative;
}

///////



check running process
netstat -tulpn
////

convert json to buffer in noddejs 

 var buf = Buffer.from(JSON.stringify(Json));
convert buffer to json angular or javascript

    var temp = JSON.parse(JSON.stringify(this.binArrayToJson(res.data)))


 binArrayToJson(binArray) {
  var str = "";
  for (var i = 0; i < binArray.length; i++) {
      str += String.fromCharCode(parseInt(binArray[i]));
  } 
  return JSON.parse(str)
}

///


nginx commands

status : sudo systemctl status nginx

stop: sudo systemctl stop nginx

start : sudo systemctl start nginx
reload:sudo systemctl reload nginx


systemctl status nginx.service
////



ng  not recognize 

Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser


///////////////////////

nano 000-default.conf
 2030  sudo service apache2 restart



/////////////

initDrawingManager

///////////


chmod -R 0777 filename/

add write permissions
/////////

 git branch added to local

git checkout -b Test origin/Test

get fetch all branches to local
git fetch --all



////////////////

delete batch history
history -d 2038

/////

apache change port 

sudo nano  ports.conf 80 to any other port

sudo systemctl status apache2

sudo nano /etc/apache2/sites-enabled/000-default.conf

changes port in above path 80 to any other

sudo service apache2 restart

restart apache


////


Host website to real https server, if you dont have any server just — free npm plugin — npm install -g surge
ng build — prod
now go to your website folder enter command surge . Enter information and hosting ready :)


///





angular service workers
1.npm install @angular/service-worker
2. set service worker  set to true in angulr.json(      "serviceWorker": true
)
3.




/////



// ssh password changed

ssh -t nixcraft@server1.cyberciti.biz passwd


/////
automatic coding standards in angular

http://mowede.com/blog/angular-devops-series-2/


/////


update angular cli
ng update @angular/core @angular/cli
///




 disable source map of angular while development running


ng serve --sourceMap=false or ng serve --source-map=false



///

site map generator 

npm i sitemap-generator-cli

////



git hub username
venki0004
Suneetha147!
/////


sweet Alert npm

prompt messages


/////////
hopa to run angular 
Installation
npm i hopa -g
Usage
Go to the folder that contains your files and run hopa.

> hopa
This will display a menu and you have to pick a file. You'll get transpilation, bundling, running and watching.

> hopa -i script.js -o bundle.js -m
Gets script.js, transpiles it and bundle it to a new file called bundle.js which is also minified. No watching in this case. It's a single-shot operation. -m and -o are optional. If the output is not specified Hopa creates a file with name bundle.<your file>. Have in mind that this feature is experimental. I find that in some cases Hopa can't resolve properly modules and errors out.

////////////////


let  a=10
if(true){
    let  a=5 // block scope

}
console.log(a,'gjgj');
   


let points = 50;
var winner = false; // global scode and block scope access
if(points > 40) {
  var winner = true;
}


console.log(winner)
var c=6
var c=1
let  b=10
 b=6
 const d=5
 d=4
if(true){
    const  b=5
}
console.log(b,'db');

// test()

///////////////////
















